schema {
  query: QueryRoot
  mutation: Mutation
}

"""Marks an element of a GraphQL schema as having restricted access."""
directive @accessRestricted(
  """Explains the reason around this restriction"""
  reason: String = null
) on FIELD_DEFINITION | OBJECT

"A field that requires Shopify approval to be accessed.\n\nVisit https://shopify.dev/apps/store/data-protection/protected-customer-data for more information.\n"
directive @protectedField(
  """The version as of the Shopify approval is required."""
  asOf: String!

  """The protected content type."""
  content: ProtectedContent!

  """The protected subject type."""
  subject: ProtectedSubject!
) on FIELD_DEFINITION

"""
An Amazon Web Services Amazon Resource Name (ARN), including the Region and account ID.
For more information, refer to [Amazon Resource Names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
"""
scalar ARN

"The permission required to access a Shopify Admin API or Storefront API resource for a shop. Merchants grant access scopes that are requested by applications.\n"
type AccessScope {
  """
  A description of the actions that the access scope allows an app to perform.
  """
  description: String!

  "A readable string that represents the access scope. The string usually follows the format `{action}_{resource}`. `{action}` is `read` or `write`, and `{resource}` is the resource that the action can be performed on. `{action}` and `{resource}` are separated by an underscore. For example, `read_orders` or `write_products`.\n"
  handle: String!
}

"""A sale associated with an order price adjustment."""
type AdjustmentSale implements Sale {
  """The type of order action that the sale represents."""
  actionType: SaleActionType!

  """The unique identifier for the sale."""
  id: ID!

  """The line type assocated with the sale."""
  lineType: SaleLineType!

  """The number of units either ordered or intended to be returned."""
  quantity: Int

  """All individual taxes associated with the sale."""
  taxes: [SaleTax!]!

  """The total sale amount after taxes and discounts."""
  totalAmount: MoneyBag!

  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: MoneyBag!

  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """The total amount of taxes for the sale."""
  totalTaxAmount: MoneyBag!
}

"""Targets all items the cart for a specified discount."""
type AllDiscountItems {
  """
  Whether all items are eligible for the discount. This value always returns `true`.
  """
  allItems: Boolean!
}

"A version of the API, as defined by [Shopify API versioning](https://shopify.dev/api/usage/versioning).\nVersions are commonly referred to by their handle (for example, `2021-10`).\n"
type ApiVersion {
  """The human-readable name of the version."""
  displayName: String!

  """
  The unique identifier of an ApiVersion. All supported API versions have a date-based (YYYY-MM) or `unstable` handle.
  """
  handle: String!

  """
  Whether the version is actively supported by Shopify. Supported API versions are guaranteed to be stable. Unsupported API versions include unstable, release candidate, and end-of-life versions that are marked as unsupported. For more information, refer to [Versioning](https://shopify.dev/api/usage/versioning).
  """
  supported: Boolean!
}

"""A Shopify application."""
type App implements Node {
  """A unique application API identifier."""
  apiKey: String!

  """App store page URL of the app."""
  appStoreAppUrl: URL

  """App store page URL of the developer who created the app."""
  appStoreDeveloperUrl: URL

  """The access scopes available to the app."""
  availableAccessScopes: [AccessScope!]!

  """Banner image for the app."""
  banner: Image!

  """Description of the app."""
  description: String

  """The name of the app developer."""
  developerName: String

  """The type of app developer."""
  developerType: AppDeveloperType!

  """Website of the developer who created the app."""
  developerUrl: URL! @deprecated(reason: "Use `appStoreDeveloperUrl` instead")

  """Whether the app uses the Embedded App SDK."""
  embedded: Boolean!

  """Requirements that must be met before the app can be installed."""
  failedRequirements: [FailedRequirement!]!

  """
  A list of app features that are shown in the Shopify App Store listing.
  """
  features: [String!]!

  """Feedback from this app about the store."""
  feedback: AppFeedback

  """Handle of the app."""
  handle: String

  """Icon that represents the app."""
  icon: Image!

  """A globally-unique identifier."""
  id: ID!

  """Webpage where you can install the app."""
  installUrl: URL

  "Corresponding AppInstallation for this shop and App.\nReturns null if the App is not installed.\n"
  installation: AppInstallation

  "Whether the app is the [post purchase](https://shopify.dev/apps/checkout/post-purchase) app in use.\n"
  isPostPurchaseAppInUse: Boolean!

  """Webpage that the app starts in."""
  launchUrl: URL! @deprecated(reason: "Use AppInstallation.launchUrl instead")

  "Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.\n"
  navigationItems: [NavigationItem!]! @deprecated(reason: "Use AppInstallation.navigationItems instead")

  """Whether the app was previously installed on the current shop."""
  previouslyInstalled: Boolean!

  """Detailed information about the app pricing."""
  pricingDetails: String

  """Summary of the app pricing details."""
  pricingDetailsSummary: String!

  """Link to app privacy policy."""
  privacyPolicyUrl: URL

  """The public category for the app."""
  publicCategory: AppPublicCategory!

  """Whether the app is published to the Shopify App Store."""
  published: Boolean!

  """The access scopes requested by the app."""
  requestedAccessScopes: [AccessScope!]!

  """Screenshots of the app."""
  screenshots: [Image!]!

  """Whether the app was developed by Shopify."""
  shopifyDeveloped: Boolean!

  """Name of the app."""
  title: String!

  "Message that appears when the app is uninstalled. For example:\nBy removing this app, you will no longer be able to publish products to MySocialSite or view this app in your Shopify admin. You can re-enable this channel at any time.\n"
  uninstallMessage: String!

  """Webpage where you can uninstall the app."""
  uninstallUrl: URL @deprecated(reason: "Use AppInstallation.uninstallUrl instead")

  """The webhook API version for the app."""
  webhookApiVersion: String!
}

"An auto-generated type for paginating through multiple Apps.\n"
type AppConnection {
  """A list of edges."""
  edges: [AppEdge!]!

  """A list of the nodes contained in AppEdge."""
  nodes: [App!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""
App credits can be applied by the merchant towards future app purchases, subscriptions, or usage records in Shopify.
"""
type AppCredit implements Node {
  """The amount that can be used towards future app purchases in Shopify."""
  amount: MoneyV2!

  """The date and time when the app credit was created."""
  createdAt: DateTime!

  """The description of the app credit."""
  description: String!

  """A globally-unique identifier."""
  id: ID!

  """Whether the app credit is a test transaction."""
  test: Boolean!
}

"An auto-generated type for paginating through multiple AppCredits.\n"
type AppCreditConnection {
  """A list of edges."""
  edges: [AppCreditEdge!]!

  """A list of the nodes contained in AppCreditEdge."""
  nodes: [AppCredit!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `appCreditCreate` mutation."""
type AppCreditCreatePayload {
  """The newly created app credit."""
  appCredit: AppCredit

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type which holds one AppCredit and a cursor during pagination.\n"
type AppCreditEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppCreditEdge."""
  node: AppCredit!
}

"""Possible types of app developer."""
enum AppDeveloperType {
  """Indicates the app developer works directly for a Merchant."""
  MERCHANT

  """Indicates the app developer is a Partner."""
  PARTNER

  """Indicates the app developer is Shopify."""
  SHOPIFY

  """
  Indicates the app developer is unknown. It is not categorized as any of the other developer types.
  """
  UNKNOWN
}

"""A script that defines a discount type."""
type AppDiscountType {
  """The app providing the app discount type."""
  app: App!

  """The App Bridge details for discount type configuration."""
  appBridge: FunctionsAppBridge!

  """The API key of the app providing the app discount type."""
  appKey: String!

  """A description of the app discount type."""
  description: String

  """The class of the app discount type."""
  discountClass: DiscountClass!

  """The ID of the function providing the app discount type."""
  functionId: String!

  """
  The target type of the app discount type. Possible values: `SHIPPING_LINE` and `LINE_ITEM`.
  """
  targetType: DiscountApplicationTargetType!

  """The title of the app discount type."""
  title: String!
}

"An auto-generated type which holds one App and a cursor during pagination.\n"
type AppEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppEdge."""
  node: App!
}

"Reports the status of shops and their resources and displays this information\nwithin Shopify admin. AppFeedback is used to notify merchants about steps they need to take\nto set up an app on their store.\n"
type AppFeedback {
  """The application associated to the feedback."""
  app: App!

  """A link to where merchants can resolve errors."""
  link: Link

  """The feedback message presented to the merchant."""
  messages: [UserError!]!
}

"""Represents an installed application on a shop."""
type AppInstallation implements HasMetafields & Node {
  """
  The access scopes granted to the application by a merchant during installation.
  """
  accessScopes: [AccessScope!]!

  """
  The active application subscriptions billed to the shop on a recurring basis.
  """
  activeSubscriptions: [AppSubscription!]!

  """All subscriptions created for a shop."""
  allSubscriptions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: AppSubscriptionSortKeys = CREATED_AT
  ): AppSubscriptionConnection!

  """Application which is installed."""
  app: App!

  """Channel associated with the installed application."""
  channel: Channel @deprecated(reason: "Use `publication` instead")

  """Credits that can be used towards future app purchases."""
  credits(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: AppTransactionSortKeys = CREATED_AT
  ): AppCreditConnection!

  """A globally-unique identifier."""
  id: ID!

  """The URL to launch the application."""
  launchUrl: URL!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The key for the metafield."""
    key: String!

    """The namespace for the metafield."""
    namespace: String!
  ): Metafield

  """List of metafields that belong to the resource."""
  metafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The metafield namespace to filter by."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  """One-time purchases to a shop."""
  oneTimePurchases(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: AppTransactionSortKeys = CREATED_AT
  ): AppPurchaseOneTimeConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The key for the private metafield."""
    key: String!

    """The namespace for the private metafield."""
    namespace: String!
  ): PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter the private metafields by namespace."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PrivateMetafieldConnection!

  """The publication associated with the installed application."""
  publication: Publication

  """
  The records that track the externally-captured revenue for the app. The records are used for revenue attribution purposes.
  """
  revenueAttributionRecords(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: AppRevenueAttributionRecordSortKeys = CREATED_AT
  ): AppRevenueAttributionRecordConnection!

  """Subscriptions charge to a shop on a recurring basis."""
  subscriptions: [AppSubscription!]! @deprecated(reason: "Use `activeSubscriptions` instead")

  """The URL to uninstall the application."""
  uninstallUrl: URL
}

"The possible categories of an app installation, based on their purpose\nor the environment they can run in.\n"
enum AppInstallationCategory {
  """
  Apps that serve as channels through which sales are made, such as the online store.
  """
  CHANNEL

  """Apps that can be used in the POS mobile client."""
  POS_EMBEDDED
}

"An auto-generated type for paginating through multiple AppInstallations.\n"
type AppInstallationConnection {
  """A list of edges."""
  edges: [AppInstallationEdge!]!

  """A list of the nodes contained in AppInstallationEdge."""
  nodes: [AppInstallation!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one AppInstallation and a cursor during pagination.\n"
type AppInstallationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppInstallationEdge."""
  node: AppInstallation!
}

"""The levels of privacy of an app installation."""
enum AppInstallationPrivacy {
  PRIVATE
  PUBLIC
}

"""The set of valid sort keys for the AppInstallation query."""
enum AppInstallationSortKeys {
  """Sort by the `app_title` value."""
  APP_TITLE

  """Sort by the `id` value."""
  ID

  """Sort by the `installed_at` value."""
  INSTALLED_AT

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"The pricing model for the app subscription.\nThe pricing model input can be either `appRecurringPricingDetails` or `appUsagePricingDetails`.\n"
input AppPlanInput {
  """The pricing details for recurring billing."""
  appRecurringPricingDetails: AppRecurringPricingInput

  """The pricing details for usage-based billing."""
  appUsagePricingDetails: AppUsagePricingInput
}

"""The app plan that the merchant is subscribed to."""
type AppPlanV2 {
  """The plan billed to a shop on a recurring basis."""
  pricingDetails: AppPricingDetails!
}

"The information about the price that's charged to a shop every plan period.\nThe concrete type can be `AppRecurringPricing` for recurring billing or `AppUsagePricing` for usage-based billing.\n"
union AppPricingDetails = AppRecurringPricing | AppUsagePricing

"""The frequency at which the shop is billed for an app subscription."""
enum AppPricingInterval {
  """The app subscription bills the shop annually."""
  ANNUAL

  """The app subscription bills the shop every 30 days."""
  EVERY_30_DAYS
}

"""The public-facing category for an app."""
enum AppPublicCategory {
  """
  App's public category is [Custom](https://shopify.dev/apps/getting-started/app-types).
  """
  CUSTOM

  """
  App's public category is Other. An app is in this category if it is not classified under any of the [other app types](https://shopify.dev/apps/getting-started/app-types).
  """
  OTHER

  """
  App's public category is [Private](https://shopify.dev/apps/getting-started/app-types).
  """
  PRIVATE

  """
  App's public category is [Public](https://shopify.dev/apps/getting-started/app-types).
  """
  PUBLIC
}

"""Services and features purchased once by the store."""
interface AppPurchase {
  """The date and time when the app purchase occurred."""
  createdAt: DateTime!

  """The name of the app purchase."""
  name: String!

  """The amount to be charged to the store for the app purchase."""
  price: MoneyV2!

  """The status of the app purchase."""
  status: AppPurchaseStatus!

  """Whether the app purchase is a test transaction."""
  test: Boolean!
}

"""Services and features purchased once by a store."""
type AppPurchaseOneTime implements AppPurchase & Node {
  """The date and time when the app purchase occurred."""
  createdAt: DateTime!

  """A globally-unique identifier."""
  id: ID!

  """The name of the app purchase."""
  name: String!

  """The amount to be charged to the store for the app purchase."""
  price: MoneyV2!

  """The status of the app purchase."""
  status: AppPurchaseStatus!

  """Whether the app purchase is a test transaction."""
  test: Boolean!
}

"An auto-generated type for paginating through multiple AppPurchaseOneTimes.\n"
type AppPurchaseOneTimeConnection {
  """A list of edges."""
  edges: [AppPurchaseOneTimeEdge!]!

  """A list of the nodes contained in AppPurchaseOneTimeEdge."""
  nodes: [AppPurchaseOneTime!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `appPurchaseOneTimeCreate` mutation."""
type AppPurchaseOneTimeCreatePayload {
  """The newly created app one-time purchase."""
  appPurchaseOneTime: AppPurchaseOneTime

  "The URL that the merchant can access to approve or decline the newly created app one-time purchase.\n\nIf the merchant declines, then the merchant is redirected to the app and receives a notification message stating that the charge was declined.\nIf the merchant approves and they're successfully invoiced, then the state of the charge changes from `pending` to `active`.\n\nYou get paid after the charge is activated.\n"
  confirmationUrl: URL

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type which holds one AppPurchaseOneTime and a cursor during pagination.\n"
type AppPurchaseOneTimeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppPurchaseOneTimeEdge."""
  node: AppPurchaseOneTime!
}

"The approval status of the app purchase.\n\nThe merchant is charged for the purchase immediately after approval, and the status changes to `active`.\nIf the payment fails, then the app purchase remains `pending`.\n\nPurchases start as `pending` and can change to: `active`, `declined`, `expired`. After a purchase changes, it\nremains in that final state.\n"
enum AppPurchaseStatus {
  """
  The app purchase has been approved by the merchant and is ready to be activated by the app. App purchases created through the GraphQL Admin API are activated upon approval.
  """
  ACCEPTED @deprecated(reason: "As of API version 2021-01, when a merchant accepts an app purchase, the status immediately changes from `pending` to `active`.")

  """
  The app purchase was approved by the merchant and has been activated by the app. Active app purchases are charged to the merchant and are paid out to the partner.
  """
  ACTIVE

  """The app purchase was declined by the merchant."""
  DECLINED

  """The app purchase was not accepted within two days of being created."""
  EXPIRED

  """The app purchase is pending approval by the merchant."""
  PENDING
}

"The pricing information about a subscription app.\nThe object contains an interval (the frequency at which the shop is billed for an app subscription) and\na price (the amount to be charged to the subscribing shop at each interval).\n"
type AppRecurringPricing {
  """
  The discount applied to the subscription for a given number of billing intervals.
  """
  discount: AppSubscriptionDiscount

  """
  The frequency at which the subscribing shop is billed for an app subscription.
  """
  interval: AppPricingInterval!

  """
  The amount and currency to be charged to the subscribing shop every billing interval.
  """
  price: MoneyV2!
}

"""
Instructs the app subscription to generate a fixed charge on a recurring basis. The frequency is specified by the billing interval.
"""
input AppRecurringPricingInput {
  """
  The discount applied to the subscription for a given number of billing intervals.
  """
  discount: AppSubscriptionDiscountInput

  """How often the app subscription generates a charge."""
  interval: AppPricingInterval = EVERY_30_DAYS

  """
  The amount to be charged to the store every billing interval. The only permitted currency code is USD.
  """
  price: MoneyInput!
}

"""Represents app revenue that was captured externally by the partner."""
type AppRevenueAttributionRecord implements Node {
  """The financial amount captured in this attribution."""
  amount: MoneyV2!

  """The timestamp when the financial amount was captured."""
  capturedAt: DateTime!

  """The timestamp at which this revenue attribution was issued."""
  createdAt: DateTime!

  """A globally-unique identifier."""
  id: ID!

  "The unique value submitted during the creation of the app revenue attribution record.\nFor more information, refer to\n[Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).\n"
  idempotencyKey: String!

  """Indicates whether this is a test submission."""
  test: Boolean!

  """The type of revenue attribution."""
  type: AppRevenueAttributionType!
}

"An auto-generated type for paginating through multiple AppRevenueAttributionRecords.\n"
type AppRevenueAttributionRecordConnection {
  """A list of edges."""
  edges: [AppRevenueAttributionRecordEdge!]!

  """A list of the nodes contained in AppRevenueAttributionRecordEdge."""
  nodes: [AppRevenueAttributionRecord!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `appRevenueAttributionRecordCreate` mutation."""
type AppRevenueAttributionRecordCreatePayload {
  """The created app revenue attribution record."""
  appRevenueAttributionRecord: AppRevenueAttributionRecord

  """The list of errors that occurred from executing the mutation."""
  userErrors: [AppRevenueAttributionRecordCreateUserError!]!
}

"""
An error that occurs during the execution of `AppRevenueAttributionRecordCreate`.
"""
type AppRevenueAttributionRecordCreateUserError implements DisplayableError {
  """The error code."""
  code: AppRevenueAttributionRecordCreateUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `AppRevenueAttributionRecordCreateUserError`.
"""
enum AppRevenueAttributionRecordCreateUserErrorCode {
  """The input value is invalid."""
  INVALID

  """The input value is already taken."""
  TAKEN
}

"""Return type for `appRevenueAttributionRecordDelete` mutation."""
type AppRevenueAttributionRecordDeletePayload {
  """The ID of the revenue attribution that was deleted, if one was."""
  deletedId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [AppRevenueAttributionRecordDeleteUserError!]!
}

"""
An error that occurs during the execution of `AppRevenueAttributionRecordDelete`.
"""
type AppRevenueAttributionRecordDeleteUserError implements DisplayableError {
  """The error code."""
  code: AppRevenueAttributionRecordDeleteUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `AppRevenueAttributionRecordDeleteUserError`.
"""
enum AppRevenueAttributionRecordDeleteUserErrorCode {
  """The input value is invalid."""
  INVALID
}

"An auto-generated type which holds one AppRevenueAttributionRecord and a cursor during pagination.\n"
type AppRevenueAttributionRecordEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppRevenueAttributionRecordEdge."""
  node: AppRevenueAttributionRecord!
}

"""Allows to supply an app revenue attribution record."""
input AppRevenueAttributionRecordInput {
  """The financial amount captured in this attribution."""
  amount: MoneyInput!

  """The timestamp when the financial amount was captured."""
  capturedAt: DateTime!

  "The unique value submitted during creation.\nFor more information, refer to\n[Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).\n"
  idempotencyKey: String!

  """Indicates whether this is a test submission."""
  test: Boolean!

  """The type of revenue attribution."""
  type: AppRevenueAttributionType!
}

"""The set of valid sort keys for the AppRevenueAttributionRecord query."""
enum AppRevenueAttributionRecordSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"""Represents the billing types of revenue attribution."""
enum AppRevenueAttributionType {
  """App purchase related revenue collection."""
  APPLICATION_PURCHASE

  """App subscription revenue collection."""
  APPLICATION_SUBSCRIPTION

  """App usage-based revenue collection."""
  APPLICATION_USAGE

  """Other app revenue collection type."""
  OTHER
}

"""
Provides users access to services and/or features for a duration of time.
"""
type AppSubscription implements Node {
  """The date and time when the app subscription was created."""
  createdAt: DateTime!

  """The date and time when the current app subscription period ends."""
  currentPeriodEnd: DateTime

  """A globally-unique identifier."""
  id: ID!

  """The plans attached to the app subscription."""
  lineItems: [AppSubscriptionLineItem!]!

  """The name of the app subscription."""
  name: String!

  """
  The URL that the merchant is redirected to after approving the app subscription.
  """
  returnUrl: URL!

  """The status of the app subscription."""
  status: AppSubscriptionStatus!

  """Specifies whether the app subscription is a test transaction."""
  test: Boolean!

  """
  The number of free trial days, starting at the subscription's creation date, by which billing is delayed.
  """
  trialDays: Int!
}

"""Return type for `appSubscriptionCancel` mutation."""
type AppSubscriptionCancelPayload {
  """The cancelled app subscription."""
  appSubscription: AppSubscription

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type for paginating through multiple AppSubscriptions.\n"
type AppSubscriptionConnection {
  """A list of edges."""
  edges: [AppSubscriptionEdge!]!

  """A list of the nodes contained in AppSubscriptionEdge."""
  nodes: [AppSubscription!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `appSubscriptionCreate` mutation."""
type AppSubscriptionCreatePayload {
  """The newly-created app subscription."""
  appSubscription: AppSubscription

  """
  The URL pointing to the page where the merchant approves or declines the charges for an app subscription.
  """
  confirmationUrl: URL

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Discount applied to the recurring pricing portion of a subscription."""
type AppSubscriptionDiscount {
  "The total number of billing intervals to which the discount will be applied.\nThe discount will be applied to an indefinite number of billing intervals if this value is blank.\n"
  durationLimitInIntervals: Int

  """The price of the subscription after the discount is applied."""
  priceAfterDiscount: MoneyV2!

  """
  The remaining number of billing intervals to which the discount will be applied.
  """
  remainingDurationInIntervals: Int

  """The value of the discount applied every billing interval."""
  value: AppSubscriptionDiscountValue!
}

"""The fixed amount value of a discount."""
type AppSubscriptionDiscountAmount {
  """The fixed amount value of a discount."""
  amount: MoneyV2!
}

"Specifies a discount to the recurring pricing portion of a subscription over a number of billing intervals.\n"
input AppSubscriptionDiscountInput {
  "The total number of billing intervals to which the discount will be applied.\nThe discount will be applied to an indefinite number of billing intervals if this value is left blank.\n"
  durationLimitInIntervals: Int

  """The value to be discounted every billing interval."""
  value: AppSubscriptionDiscountValueInput
}

"""The percentage value of a discount."""
type AppSubscriptionDiscountPercentage {
  """The percentage value of a discount."""
  percentage: Float!
}

"""The value of the discount."""
union AppSubscriptionDiscountValue = AppSubscriptionDiscountAmount | AppSubscriptionDiscountPercentage

"""Specifies the value discounted every billing interval."""
input AppSubscriptionDiscountValueInput {
  """The monetary value of a discount."""
  amount: Decimal

  """The percentage value of a discount."""
  percentage: Float
}

"An auto-generated type which holds one AppSubscription and a cursor during pagination.\n"
type AppSubscriptionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppSubscriptionEdge."""
  node: AppSubscription!
}

"""The plan attached to an app subscription."""
type AppSubscriptionLineItem {
  """A globally-unique identifier."""
  id: ID!

  """The pricing model for the app subscription."""
  plan: AppPlanV2!

  """A list of the store's usage records for a usage pricing plan."""
  usageRecords(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: AppUsageRecordSortKeys = CREATED_AT
  ): AppUsageRecordConnection!
}

"""
Allows an app to add more than one pricing plan to an app subscription.
"""
input AppSubscriptionLineItemInput {
  """The pricing model for the app subscription."""
  plan: AppPlanInput!
}

"""Return type for `appSubscriptionLineItemUpdate` mutation."""
type AppSubscriptionLineItemUpdatePayload {
  """The updated app subscription."""
  appSubscription: AppSubscription

  """
  The URL where the merchant approves or declines the updated app subscription line item.
  """
  confirmationUrl: URL

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""
The replacement behavior when creating an app subscription for a merchant with an already existing app subscription.
"""
enum AppSubscriptionReplacementBehavior {
  """
  Cancels the merchant's current app subscription immediately and replaces it with the newly created app subscription.
  """
  APPLY_IMMEDIATELY

  """
  Defers canceling the merchant's current app subscription and applying the newly created app subscription until the start of the next billing cycle.
  """
  APPLY_ON_NEXT_BILLING_CYCLE

  "Cancels the merchant's current app subscription immediately and replaces it with the newly created app subscription, with the exception of\nthe following scenarios where replacing the current app subscription will be deferred until the start of the next billing cycle.\n1) The current app subscription is annual and the newly created app subscription is also annual but is of a lesser value.\n2) The current app subscription is annual and the newly created app subscription is monthly.\n3) The current app subscription and the newly created app subscription are identical except for the `discount` value.\n"
  STANDARD
}

"""The set of valid sort keys for the AppSubscription query."""
enum AppSubscriptionSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"""The status of the app subscription."""
enum AppSubscriptionStatus {
  """
  The app subscription has been approved by the merchant and is ready to be activated by the app.
  """
  ACCEPTED @deprecated(reason: "As of API version 2021-01, when a merchant approves an app subscription, the status immediately transitions from `pending` to `active`.")

  """
  The app subscription has been approved by the merchant. Active app subscriptions are billed to the shop. After payment, partners receive payouts.
  """
  ACTIVE

  """
  The app subscription was cancelled by the app. This could be caused by the app being uninstalled, a new app subscription being activated, or a direct cancellation by the app. This is a terminal state.
  """
  CANCELLED

  """
  The app subscription was declined by the merchant. This is a terminal state.
  """
  DECLINED

  """
  The app subscription wasn't approved by the merchant within two days of being created. This is a terminal state.
  """
  EXPIRED

  """
  The app subscription is on hold due to non-payment. The subscription re-activates after payments resume.
  """
  FROZEN

  """The app subscription is pending approval by the merchant."""
  PENDING
}

"""Return type for `appSubscriptionTrialExtend` mutation."""
type AppSubscriptionTrialExtendPayload {
  """The app subscription that had its trial extended."""
  appSubscription: AppSubscription

  """The list of errors that occurred from executing the mutation."""
  userErrors: [AppSubscriptionTrialExtendUserError!]!
}

"""
An error that occurs during the execution of `AppSubscriptionTrialExtend`.
"""
type AppSubscriptionTrialExtendUserError implements DisplayableError {
  """The error code."""
  code: AppSubscriptionTrialExtendUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `AppSubscriptionTrialExtendUserError`.
"""
enum AppSubscriptionTrialExtendUserErrorCode {
  """The app subscription isn't active."""
  SUBSCRIPTION_NOT_ACTIVE

  """The app subscription wasn't found."""
  SUBSCRIPTION_NOT_FOUND

  """The trial isn't active."""
  TRIAL_NOT_ACTIVE
}

"""The set of valid sort keys for the AppTransaction query."""
enum AppTransactionSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"Defines a usage pricing model for the app subscription.\nThese charges are variable based on how much the merchant uses the app.\n"
type AppUsagePricing {
  """The total usage records for interval."""
  balanceUsed: MoneyV2!

  "The capped amount prevents the merchant from being charged for any usage over that amount during a billing period.\nThis prevents billing from exceeding a maximum threshold over the duration of the billing period.\nFor the merchant to continue using the app after exceeding a capped amount, they would need to agree to a new usage charge.\n"
  cappedAmount: MoneyV2!

  """The frequency with which the app usage records are billed."""
  interval: AppPricingInterval!

  "The terms and conditions for app usage pricing.\nMust be present in order to create usage charges.\nThe terms are presented to the merchant when they approve an app's usage charges.\n"
  terms: String!
}

"""
Allows an app to issue arbitrary charges for app usage associated with a subscription.
"""
input AppUsagePricingInput {
  """
  The maximum amount of usage charges that can be incurred within a subscription billing interval.
  """
  cappedAmount: MoneyInput!

  """
  The terms and conditions for app usage. These terms stipulate the pricing model for the charges that an app creates.
  """
  terms: String!
}

"""Store usage for app subscriptions with usage pricing."""
type AppUsageRecord implements Node {
  """The date and time when the usage record was created."""
  createdAt: DateTime!

  """The description of the app usage record."""
  description: String!

  """A globally-unique identifier."""
  id: ID!

  """
  The price of the usage record. The only permitted currency code is USD.
  """
  price: MoneyV2!

  """Defines the usage pricing plan the merchant is subscribed to."""
  subscriptionLineItem: AppSubscriptionLineItem!
}

"An auto-generated type for paginating through multiple AppUsageRecords.\n"
type AppUsageRecordConnection {
  """A list of edges."""
  edges: [AppUsageRecordEdge!]!

  """A list of the nodes contained in AppUsageRecordEdge."""
  nodes: [AppUsageRecord!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `appUsageRecordCreate` mutation."""
type AppUsageRecordCreatePayload {
  """The newly created app usage record."""
  appUsageRecord: AppUsageRecord

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type which holds one AppUsageRecord and a cursor during pagination.\n"
type AppUsageRecordEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppUsageRecordEdge."""
  node: AppUsageRecord!
}

"""The set of valid sort keys for the AppUsageRecord query."""
enum AppUsageRecordSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"""Represents a generic custom attribute."""
type Attribute {
  """Key or name of the attribute."""
  key: String!

  """Value of the attribute."""
  value: String
}

"""Specifies the input fields required for an attribute."""
input AttributeInput {
  """Key or name of the attribute."""
  key: String!

  """Value of the attribute."""
  value: String!
}

"Automatic discount applications capture the intentions of a discount that was automatically applied.\n"
type AutomaticDiscountApplication implements DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  "An ordered index that can be used to identify the discount application and indicate the precedence\nof the discount application for calculations.\n"
  index: Int!

  """How the discount amount is distributed on the discounted lines."""
  targetSelection: DiscountApplicationTargetSelection!

  """Whether the discount is applied on line items or shipping lines."""
  targetType: DiscountApplicationTargetType!

  """The title of the discount application."""
  title: String!

  """The value of the discount application."""
  value: PricingValue!
}

"""The set of valid sort keys for the AutomaticDiscount query."""
enum AutomaticDiscountSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"Represents an object containing all information for channels available to a shop.\n"
type AvailableChannelDefinitionsByChannel {
  """The channel definitions for channels installed on a shop."""
  channelDefinitions: [ChannelDefinition!]!

  """The name of the channel."""
  channelName: String!
}

"""The possible types for a badge."""
enum BadgeType {
  """This badge has type `attention`."""
  ATTENTION

  """This badge has type `default`."""
  DEFAULT

  """This badge has type `info`."""
  INFO

  """This badge has type `success`."""
  SUCCESS

  """This badge has type `warning`."""
  WARNING
}

"Basic events chronicle resource activities such as the creation of an article, the fulfillment of an order, or\nthe addition of a product.\n"
type BasicEvent implements Event & Node {
  """The name of the app that created the event."""
  appTitle: String

  """Whether the event was created by an app."""
  attributeToApp: Boolean!

  """Whether the event was caused by an admin user."""
  attributeToUser: Boolean!

  """The date and time when the event was created."""
  createdAt: DateTime!

  """Whether the event is critical."""
  criticalAlert: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """Human readable text that describes the event."""
  message: FormattedString!
}

"""
Represents an error that happens during the execution of a billing attempt mutation.
"""
type BillingAttemptUserError implements DisplayableError {
  """The error code."""
  code: BillingAttemptUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `BillingAttemptUserError`.
"""
enum BillingAttemptUserErrorCode {
  """The input value is blank."""
  BLANK

  """Subscription contract does not exist."""
  CONTRACT_NOT_FOUND

  """The input value is invalid."""
  INVALID
}

"""Possible error codes that can be returned by `BulkMutationUserError`."""
enum BulkMutationErrorCode {
  """
  There was a problem reading the JSONL file. This error might be intermittent, so you can try performing the same query again.
  """
  INTERNAL_FILE_SERVER_ERROR

  """
  The operation did not run because the mutation is invalid. Check your mutation syntax and try again.
  """
  INVALID_MUTATION

  """
  The JSONL file submitted via the `stagedUploadsCreate` mutation is invalid. Update the file and try again.
  """
  INVALID_STAGED_UPLOAD_FILE

  """
  The JSONL file could not be found. Try [uploading the file](https://shopify.dev/api/usage/bulk-operations/imports#generate-the-uploaded-url-and-parameters) again, and check that you've entered the URL correctly for the `bulkOperationRunMutationUploadPath` mutation argument.
  """
  NO_SUCH_FILE

  """
  The operation did not run because another bulk mutation is already running. [Wait for the operation to finish](https://shopify.dev/api/usage/bulk-operations/imports#wait-for-the-operation-to-finish) before retrying this operation.
  """
  OPERATION_IN_PROGRESS
}

"""Represents an error that happens during execution of a bulk mutation."""
type BulkMutationUserError implements DisplayableError {
  """The error code."""
  code: BulkMutationErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"An asynchronous long-running operation to fetch data in bulk or to bulk import data.\n\nBulk operations are created using the `bulkOperationRunQuery` or `bulkOperationRunMutation` mutation. After\nthey are created, clients should poll the `status` field for updates. When `COMPLETED`, the `url` field contains\na link to the data in [JSONL](http://jsonlines.org/) format.\n\nRefer to the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/imports) for more details.\n"
type BulkOperation implements Node {
  """When the bulk operation was successfully completed."""
  completedAt: DateTime

  """When the bulk operation was created."""
  createdAt: DateTime!

  """Error code for failed operations."""
  errorCode: BulkOperationErrorCode

  """File size in bytes of the file in the `url` field."""
  fileSize: UnsignedInt64

  """A globally-unique identifier."""
  id: ID!

  "A running count of all the objects processed.\nFor example, when fetching all the products and their variants, this field counts both products and variants.\nThis field can be used to track operation progress.\n"
  objectCount: UnsignedInt64!

  "The URL that points to the partial or incomplete response data (in [JSONL](http://jsonlines.org/) format) that was returned by a failed operation.\nThe URL expires 7 days after the operation fails. Returns `null` when there's no data available.\n"
  partialDataUrl: URL

  """GraphQL query document specified in `bulkOperationRunQuery`."""
  query: String!

  "A running count of all the objects that are processed at the root of the query.\nFor example, when fetching all the products and their variants, this field only counts products.\nThis field can be used to track operation progress.\n"
  rootObjectCount: UnsignedInt64!

  """Status of the bulk operation."""
  status: BulkOperationStatus!

  """The bulk operation's type."""
  type: BulkOperationType!

  "The URL that points to the response data in [JSONL](http://jsonlines.org/) format.\nThe URL expires 7 days after the operation completes.\n"
  url: URL
}

"""Return type for `bulkOperationCancel` mutation."""
type BulkOperationCancelPayload {
  """The bulk operation to be canceled."""
  bulkOperation: BulkOperation

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Error codes for failed bulk operations."""
enum BulkOperationErrorCode {
  "The provided operation `query` returned access denied due to missing\n[access scopes](https://shopify.dev/api/usage/access-scopes).\nReview the requested object permissions and execute the query as a normal non-bulk GraphQL request to see more details.\n"
  ACCESS_DENIED

  "The operation resulted in partial or incomplete data due to internal server errors during execution.\nThese errors might be intermittent, so you can try performing the same query again.\n"
  INTERNAL_SERVER_ERROR

  "The operation resulted in partial or incomplete data due to query timeouts during execution.\nIn some cases, timeouts can be avoided by modifying your `query` to select fewer fields.\n"
  TIMEOUT
}

"""Return type for `bulkOperationRunMutation` mutation."""
type BulkOperationRunMutationPayload {
  """The newly created bulk operation."""
  bulkOperation: BulkOperation

  """The list of errors that occurred from executing the mutation."""
  userErrors: [BulkMutationUserError!]!
}

"""Return type for `bulkOperationRunQuery` mutation."""
type BulkOperationRunQueryPayload {
  """The newly created bulk operation."""
  bulkOperation: BulkOperation

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""The valid values for the status of a bulk operation."""
enum BulkOperationStatus {
  """The bulk operation has been canceled."""
  CANCELED

  "Cancelation has been initiated on the bulk operation. There may be a short delay from when a cancelation\nstarts until the operation is actually canceled.\n"
  CANCELING

  """The bulk operation has successfully completed."""
  COMPLETED

  """The bulk operation has been created."""
  CREATED

  """The bulk operation URL has expired."""
  EXPIRED

  "The bulk operation has failed. For information on why the operation failed, use\n[BulkOperation.errorCode](https://shopify.dev/api/admin-graphql/latest/enums/bulkoperationerrorcode).\n"
  FAILED

  """The bulk operation is runnning."""
  RUNNING
}

"""The valid values for the bulk operation's type."""
enum BulkOperationType {
  """The bulk operation is a mutation."""
  MUTATION

  """The bulk operation is a query."""
  QUERY
}

"""Return type for `bulkProductResourceFeedbackCreate` mutation."""
type BulkProductResourceFeedbackCreatePayload {
  """The feedback that is created."""
  feedback: [ProductResourceFeedback!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [BulkProductResourceFeedbackCreateUserError!]!
}

"""
An error that occurs during the execution of `BulkProductResourceFeedbackCreate`.
"""
type BulkProductResourceFeedbackCreateUserError implements DisplayableError {
  """The error code."""
  code: BulkProductResourceFeedbackCreateUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `BulkProductResourceFeedbackCreateUserError`.
"""
enum BulkProductResourceFeedbackCreateUserErrorCode {
  """The input value is blank."""
  BLANK

  """The input value is invalid."""
  INVALID

  """
  The input value should be less than or equal to the maximum value allowed.
  """
  LESS_THAN_OR_EQUAL_TO

  """
  The operation was attempted on too many feedback objects. The maximum number of feedback objects that you can operate on is 50.
  """
  MAXIMUM_FEEDBACK_LIMIT_EXCEEDED

  """
  The feedback for a later version of this resource was already accepted.
  """
  OUTDATED_FEEDBACK

  """The input value needs to be blank."""
  PRESENT

  """The product wasn't found or isn't available to the channel."""
  PRODUCT_NOT_FOUND
}

"A discount that is automatically applied to an order that is being edited.\n"
type CalculatedAutomaticDiscountApplication implements CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """The level at which the discount was applied."""
  appliedTo: DiscountApplicationLevel!

  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String

  """A globally-unique identifier."""
  id: ID!

  """How the discount amount is distributed on the discounted lines."""
  targetSelection: DiscountApplicationTargetSelection!

  """Whether the discount is applied on line items or shipping lines."""
  targetType: DiscountApplicationTargetType!

  """The value of the discount application."""
  value: PricingValue!
}

"An amount discounting the line that has been allocated by an associated discount application.\n"
type CalculatedDiscountAllocation {
  """
  The money amount that's allocated by the discount application in shop and presentment currencies.
  """
  allocatedAmountSet: MoneyBag!

  """The discount that the allocated amount originated from."""
  discountApplication: CalculatedDiscountApplication!
}

"A [discount application](https://shopify.dev/api/admin-graphql/latest/interfaces/discountapplication) involved in order editing that might be newly added or have new changes applied.\n"
interface CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """The level at which the discount was applied."""
  appliedTo: DiscountApplicationLevel!

  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String

  """A globally-unique identifier."""
  id: ID!

  """How the discount amount is distributed on the discounted lines."""
  targetSelection: DiscountApplicationTargetSelection!

  """Whether the discount is applied on line items or shipping lines."""
  targetType: DiscountApplicationTargetType!

  """The value of the discount application."""
  value: PricingValue!
}

"An auto-generated type for paginating through multiple CalculatedDiscountApplications.\n"
type CalculatedDiscountApplicationConnection {
  """A list of edges."""
  edges: [CalculatedDiscountApplicationEdge!]!

  """A list of the nodes contained in CalculatedDiscountApplicationEdge."""
  nodes: [CalculatedDiscountApplication!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one CalculatedDiscountApplication and a cursor during pagination.\n"
type CalculatedDiscountApplicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CalculatedDiscountApplicationEdge."""
  node: CalculatedDiscountApplication!
}

"A discount code that is applied to an order that is being edited.\n"
type CalculatedDiscountCodeApplication implements CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """The level at which the discount was applied."""
  appliedTo: DiscountApplicationLevel!

  """
  The string identifying the discount code that was used at the time of application.
  """
  code: String!

  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String

  """A globally-unique identifier."""
  id: ID!

  """How the discount amount is distributed on the discounted lines."""
  targetSelection: DiscountApplicationTargetSelection!

  """Whether the discount is applied on line items or shipping lines."""
  targetType: DiscountApplicationTargetType!

  """The value of the discount application."""
  value: PricingValue!
}

"""The computed properties for a draft order."""
type CalculatedDraftOrder {
  """Order-level discount applied to the draft order."""
  appliedDiscount: DraftOrderAppliedDiscount

  """
  The available shipping rates for the draft order. Requires a customer with a valid shipping address and at least one line item.
  """
  availableShippingRates: [ShippingRate!]!

  """
  Customer who will be sent an invoice for the draft order, if there is one.
  """
  customer: Customer

  """Line items in the draft order with their computed properties."""
  lineItems: [CalculatedDraftOrderLineItem!]!

  """Line item that contains the shipping costs."""
  shippingLine: ShippingLine

  "Subtotal of the line items and their discounts (does not contain shipping charges or shipping discounts, or taxes).\n"
  subtotalPrice: Money!

  """Total amount of taxes charged for each line item and shipping line."""
  taxLines: [TaxLine!]!

  """
  Total amount of the draft order (includes taxes, shipping charges, and discounts).
  """
  totalPrice: Money!

  """Total shipping charge for the draft order."""
  totalShippingPrice: Money!

  """Total amount of taxes for the draft order."""
  totalTax: Money!
}

"""The computed line items for a draft order."""
type CalculatedDraftOrderLineItem {
  """The discount applied to the line item."""
  appliedDiscount: DraftOrderAppliedDiscount

  """
  Whether the line item is a custom line item (`true`) or a product variant line item (`false`).
  """
  custom: Boolean!

  """
  List of additional information, often representing custom features or special requests.
  """
  customAttributes: [Attribute!]!

  """Total price with discounts applied."""
  discountedTotal: MoneyV2!

  """The unit price with discounts applied."""
  discountedUnitPrice: MoneyV2!

  "Name of the service provider who fulfilled the order.\n\nValid values are either **manual** or the name of the provider.\nFor example, **amazon**, **shipwire**.\n\nDeleted fulfillment services will return null.\n"
  fulfillmentService: FulfillmentService

  """The image associated with the draft order line item."""
  image: Image

  """Whether the line item represents the puchase of a gift card."""
  isGiftCard: Boolean!

  """Name of the product."""
  name: String!

  "The total price (without discounts) of the line item, based on the original unit price of the variant x quantity.\n"
  originalTotal: MoneyV2!

  """The variant price without any discounts applied."""
  originalUnitPrice: MoneyV2!

  """The product associated with the draft order line item."""
  product: Product

  """The number of variant items requested in the draft order."""
  quantity: Int!

  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!

  """Variant SKU number."""
  sku: String

  """Whether the variant is taxable."""
  taxable: Boolean!

  """
  Title of the product or variant (this field only applies to custom line items).
  """
  title: String!

  """The total value of the discount."""
  totalDiscount: MoneyV2!

  """The variant associated with the draft order line item."""
  variant: ProductVariant

  """Name of the variant."""
  variantTitle: String

  """Name of the vendor who made the variant."""
  vendor: String

  """The weight unit and value for a draft order line item."""
  weight: Weight
}

"A line item involved in order editing that may be newly added or have new changes applied.\n"
type CalculatedLineItem {
  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  calculatedDiscountAllocations: [CalculatedDiscountAllocation!]!

  """
  List of additional information, often representing custom features or special requests.
  """
  customAttributes: [Attribute!]!

  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  discountAllocations: [DiscountAllocation!]! @deprecated(reason: "Use `calculatedDiscountAllocations` instead")

  """
  The price of a single quantity of the line item with line item discounts applied, in shop and presentment currencies. Discounts applied to the entire order aren't included in this price.
  """
  discountedUnitPriceSet: MoneyBag!

  """The total number of items that can be edited."""
  editableQuantity: Int!

  """The editable quantity prior to any changes made in the current edit."""
  editableQuantityBeforeChanges: Int!

  """The total price of editable lines in shop and presentment currencies."""
  editableSubtotalSet: MoneyBag!

  """Whether the calculated line item has a staged discount."""
  hasStagedLineItemDiscount: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The image object associated to the line item's variant."""
  image: Image

  """
  The variant unit price in shop and presentment currencies, without any discounts applied.
  """
  originalUnitPriceSet: MoneyBag!

  """The total number of items."""
  quantity: Int!

  """Whether the line item can be restocked or not."""
  restockable: Boolean!

  """Whether the changes on the line item will result in a restock."""
  restocking: Boolean!

  """The variant SKU number."""
  sku: String

  """A list of changes that affect this line item."""
  stagedChanges: [OrderStagedChange!]!

  """The title of the product."""
  title: String!

  """
  The total price of uneditable lines in shop and presentment currencies.
  """
  uneditableSubtotalSet: MoneyBag!

  "The product variant associated with this line item. The value is null for custom line items and items where\nthe variant has been deleted.\n"
  variant: ProductVariant

  """The title of the variant."""
  variantTitle: String
}

"An auto-generated type for paginating through multiple CalculatedLineItems.\n"
type CalculatedLineItemConnection {
  """A list of edges."""
  edges: [CalculatedLineItemEdge!]!

  """A list of the nodes contained in CalculatedLineItemEdge."""
  nodes: [CalculatedLineItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one CalculatedLineItem and a cursor during pagination.\n"
type CalculatedLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CalculatedLineItemEdge."""
  node: CalculatedLineItem!
}

"Represents a discount that was manually created for an order that is being edited.\n"
type CalculatedManualDiscountApplication implements CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """The level at which the discount was applied."""
  appliedTo: DiscountApplicationLevel!

  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String

  """A globally-unique identifier."""
  id: ID!

  """How the discount amount is distributed on the discounted lines."""
  targetSelection: DiscountApplicationTargetSelection!

  """Whether the discount is applied on line items or shipping lines."""
  targetType: DiscountApplicationTargetType!

  """The value of the discount application."""
  value: PricingValue!
}

"An order with edits applied but not saved.\n"
type CalculatedOrder implements Node {
  "Returns only the new discount applications being added to the order in the current edit.\n"
  addedDiscountApplications(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CalculatedDiscountApplicationConnection!

  "Returns only the new line items being added to the order during the current edit.\n"
  addedLineItems(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CalculatedLineItemConnection!

  """
  Amount of the order-level discount (does not contain any line item discounts) in shop and presentment currencies.
  """
  cartDiscountAmountSet: MoneyBag

  """Whether the changes have been applied and saved to the order."""
  committed: Boolean!

  """A globally-unique identifier."""
  id: ID!

  "Returns all items on the order that existed before starting the edit.\nWill include any changes that have been made.\nWill not include line items added during the current edit.\n"
  lineItems(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `editable`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CalculatedLineItemConnection!

  """The HTML of the customer notification for the order edit."""
  notificationPreviewHtml: HTML

  """The customer notification title."""
  notificationPreviewTitle: String!

  """The order without any changes applied."""
  order: Order! @deprecated(reason: "Use `originalOrder` instead")

  "The order without any changes applied.\n"
  originalOrder: Order!

  "List of changes made to the order during the current edit.\n"
  stagedChanges(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): OrderStagedChangeConnection!

  """
  The sum of the quantities for the line items that contribute to the order's subtotal.
  """
  subtotalLineItemsQuantity: Int!

  """
  The subtotal of the line items, in shop and presentment currencies, after all the discounts are applied.  The subtotal does not include shipping.  The subtotal includes taxes for taxes-included orders and excludes taxes for taxes-excluded orders.
  """
  subtotalPriceSet: MoneyBag

  """Taxes charged for the line item."""
  taxLines: [TaxLine!]!

  """
  Total price of the order less the total amount received from the customer in shop and presentment currencies.
  """
  totalOutstandingSet: MoneyBag!

  """
  Total amount of the order (includes taxes and discounts) in shop and presentment currencies.
  """
  totalPriceSet: MoneyBag!
}

"A discount created by a Shopify script for an order that is being edited.\n"
type CalculatedScriptDiscountApplication implements CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """The level at which the discount was applied."""
  appliedTo: DiscountApplicationLevel!

  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String

  """A globally-unique identifier."""
  id: ID!

  """How the discount amount is distributed on the discounted lines."""
  targetSelection: DiscountApplicationTargetSelection!

  """Whether the discount is applied on line items or shipping lines."""
  targetType: DiscountApplicationTargetType!

  """The value of the discount application."""
  value: PricingValue!
}

"A channel represents an app where you sell a group of products and collections.\nA channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.\n"
type Channel implements Node {
  """Underlying app used by the channel."""
  app: App!

  """
  The collection publications for the list of collections published to the channel.
  """
  collectionPublicationsV3(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """The list of collections published to the channel."""
  collections(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CollectionConnection!

  """Unique identifier for the channel."""
  handle: String! @deprecated(reason: "Use `id` instead")

  """Whether the collection is available to the channel."""
  hasCollection(
    """Collection ID to check."""
    id: ID!
  ): Boolean!

  """A globally-unique identifier."""
  id: ID!

  """Name of the channel."""
  name: String!

  "Menu items for the channel, which also appear as submenu items in left navigation sidebar in the Shopify admin.\n"
  navigationItems: [NavigationItem!]! @deprecated(reason: "Use App.navigationItems instead")

  """Home page for the channel."""
  overviewPath: URL @deprecated(reason: "Use App.launchUrl instead")

  """The product publications for the products published to the channel."""
  productPublications(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductPublicationConnection! @deprecated(reason: "Use `productPublicationsV3` instead")

  """
  The product publications for the list of products published to the channel.
  """
  productPublicationsV3(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """The list of products published to the channel."""
  products(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductConnection!

  """Whether the channel supports future publishing."""
  supportsFuturePublishing: Boolean!
}

"An auto-generated type for paginating through multiple Channels.\n"
type ChannelConnection {
  """A list of edges."""
  edges: [ChannelEdge!]!

  """A list of the nodes contained in ChannelEdge."""
  nodes: [Channel!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"A channel definition represents channels surfaces on the platform.\nA channel definition can be a platform or a subsegment of it such as Facebook Home, Instagram Live, Instagram Shops, or WhatsApp chat.\n"
type ChannelDefinition implements Node {
  """Name of the channel that this sub channel belongs to."""
  channelName: String!

  """Unique string used as a public identifier for the channel definition."""
  handle: String!

  """The unique identifier for the channel definition."""
  id: ID!

  """
  Name of the sub channel (e.g. Online Store, Instagram Shopping, TikTok Live).
  """
  subChannelName: String!

  """Icon displayed when showing the channel in admin."""
  svgIcon: String
}

"An auto-generated type which holds one Channel and a cursor during pagination.\n"
type ChannelEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ChannelEdge."""
  node: Channel!
}

"Contains the information for a given sales channel.\n"
type ChannelInformation implements Node {
  """The app associated with the channel."""
  app: App!

  """The channel definition associated with the channel."""
  channelDefinition: ChannelDefinition

  """The unique identifier for the channel."""
  channelId: ID!

  """A globally-unique identifier."""
  id: ID!
}

"""The set of valid sort keys for the CodeDiscount query."""
enum CodeDiscountSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `ends_at` value."""
  ENDS_AT

  """Sort by the `id` value."""
  ID

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE

  """Sort by the `starts_at` value."""
  STARTS_AT

  """Sort by the `title` value."""
  TITLE

  """Sort by the `updated_at` value."""
  UPDATED_AT
}

"Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.\n\nCollections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.\n\nCollections can also be created for a custom group of products. These are called custom or manual collections.\n"
type Collection implements HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & Node & Publishable {
  """
  The number of publications a resource is published to without feedback errors.
  """
  availablePublicationCount: Int!

  "A single-line, text-only description of the collection, stripped of any HTML tags and formatting that were included in the description.\n"
  description(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  "The description of the collection, including any HTML tags and formatting. This content is typically displayed to customers, such as on an online store, depending on the theme.\n"
  descriptionHtml: HTML!

  """
  Information about the collection that's provided through resource feedback.
  """
  feedback: ResourceFeedback

  "A unique string that identifies the collection. If a handle isn't specified when a collection is created, it's automatically generated from the collection's original title, and typically includes words from the title separated by hyphens. For example, a collection that was created with the title `Summer Catalog 2022` might have the handle `summer-catalog-2022`.\n\nIf the title is changed, the handle doesn't automatically change.\n\nThe handle can be used in themes by the Liquid templating language to refer to the collection, but using the ID is preferred because it never changes.\n"
  handle: String!

  """Whether the collection includes the specified product."""
  hasProduct(
    """The ID of the product to check."""
    id: ID!
  ): Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The image associated with the collection."""
  image: Image

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The key for the metafield."""
    key: String!

    """The namespace for the metafield."""
    namespace: String!
  ): Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    "Supported filter parameters:\n - `created_at`\n - `key`\n - `namespace`\n - `owner_type`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The metafield namespace to filter by."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The key for the private metafield."""
    key: String!

    """The namespace for the private metafield."""
    namespace: String!
  ): PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter the private metafields by namespace."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PrivateMetafieldConnection!

  """The products that are included in the collection."""
  products(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductCollectionSortKeys = COLLECTION_DEFAULT
  ): ProductConnection!

  """The number of products in the collection."""
  productsCount: Int!

  """The number of publications a resource is published on."""
  publicationCount(
    """
    Include only the resource's publications that are published. If false, then return all the resource's publications including future publications.
    """
    onlyPublished: Boolean = true
  ): Int!

  """The channels where the collection is published."""
  publications(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """
    Whether or not to return only the collection publications that are published.
    """
    onlyPublished: Boolean = true

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CollectionPublicationConnection! @deprecated(reason: "Use `resourcePublications` instead")

  """Check to see whether the resource is published to a given channel."""
  publishedOnChannel(
    """The ID of the channel to check."""
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead")

  """
  Check to see whether the resource is published to the calling app's channel.
  """
  publishedOnCurrentChannel: Boolean! @deprecated(reason: "Use `publishedOnCurrentPublication` instead")

  """
  Check to see whether the resource is published to the calling app's publication.
  """
  publishedOnCurrentPublication: Boolean!

  """Check to see whether the resource is published to a given publication."""
  publishedOnPublication(
    """The ID of the publication to check."""
    publicationId: ID!
  ): Boolean!

  """The list of resources that are published to a publication."""
  resourcePublications(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Whether to return only the resources that are currently published. If false, then also returns the resources that are scheduled to be published.\n"
    onlyPublished: Boolean = true

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """
  The list of resources that are either published or staged to be published to a publication.
  """
  resourcePublicationsV2(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Whether to return only the resources that are currently published. If false, then also returns the resources that are scheduled or staged to be published.\n"
    onlyPublished: Boolean = true

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ResourcePublicationV2Connection!

  "For a smart (automated) collection, specifies the rules that determine whether a product is included.\n"
  ruleSet: CollectionRuleSet

  "If the default SEO fields for page title and description have been modified, contains the modified information.\n"
  seo: SEO!

  "The order in which the products in the collection are displayed by default in the Shopify admin and in sales channels, such as an online store.\n"
  sortOrder: CollectionSortOrder!

  "The Storefront GraphQL API ID of the `Collection`.\n\nAs of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.\n"
  storefrontId: StorefrontID! @deprecated(reason: "Use `id` instead")

  "The suffix of the Liquid template being used to show the collection in an online store. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid` template.\n"
  templateSuffix: String

  "The name of the collection. It's displayed in the Shopify admin and is typically displayed in sales channels, such as an online store.\n"
  title: String!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [PublishedTranslation!]!

  """The list of channels that the resource is not published to."""
  unpublishedChannels(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ChannelConnection! @deprecated(reason: "Use `unpublishedPublications` instead")

  """The list of publications that the resource is not published to."""
  unpublishedPublications(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PublicationConnection!

  "The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the collection was last modified.\n"
  updatedAt: DateTime!
}

"""Return type for `collectionAddProducts` mutation."""
type CollectionAddProductsPayload {
  """The updated collection."""
  collection: Collection

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type for paginating through multiple Collections.\n"
type CollectionConnection {
  """A list of edges."""
  edges: [CollectionEdge!]!

  """A list of the nodes contained in CollectionEdge."""
  nodes: [Collection!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `collectionCreate` mutation."""
type CollectionCreatePayload {
  """The collection that has been created."""
  collection: Collection

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the collection to delete."""
input CollectionDeleteInput {
  """The ID of the collection to be deleted."""
  id: ID!
}

"""Return type for `collectionDelete` mutation."""
type CollectionDeletePayload {
  """The ID of the collection that was deleted."""
  deletedCollectionId: ID

  """The shop associated with the collection."""
  shop: Shop!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type which holds one Collection and a cursor during pagination.\n"
type CollectionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CollectionEdge."""
  node: Collection!
}

"""Specifies the input fields required to create a collection."""
input CollectionInput {
  """The description of the collection, in HTML format."""
  descriptionHtml: String

  "A unique human-friendly string for the collection. Automatically generated from the collection's title.\n"
  handle: String

  """
  Specifies the collection to update or create a new collection if absent.
  """
  id: ID

  """The image associated with the collection."""
  image: ImageInput

  """The metafields to associate with this collection."""
  metafields: [MetafieldInput!]

  """The private metafields to associated with this product."""
  privateMetafields: [PrivateMetafieldInput!]

  """
  Initial list of collection products. Only valid with `productCreate` and without rules.
  """
  products: [ID!]

  "Indicates whether a redirect is required after a new handle has been provided.\nIf true, then the old handle is redirected to the new one automatically.\n"
  redirectNewHandle: Boolean = false

  "The rules used to assign products to the collection.\n"
  ruleSet: CollectionRuleSetInput

  """SEO information for the collection."""
  seo: SEOInput

  """The order in which the collection's products are sorted."""
  sortOrder: CollectionSortOrder

  """The theme template used when viewing the collection in a store."""
  templateSuffix: String

  """Required for creating a new collection."""
  title: String
}

"""Represents the publications where a collection is published."""
type CollectionPublication {
  """The channel where the collection will be published."""
  channel: Channel! @deprecated(reason: "Use `publication` instead")

  """The collection to be published on the publication."""
  collection: Collection!

  """Whether the publication is published or not."""
  isPublished: Boolean!

  """The publication where the collection will be published."""
  publication: Publication!

  """The date that the publication was or is going to be published."""
  publishDate: DateTime!
}

"An auto-generated type for paginating through multiple CollectionPublications.\n"
type CollectionPublicationConnection {
  """A list of edges."""
  edges: [CollectionPublicationEdge!]!

  """A list of the nodes contained in CollectionPublicationEdge."""
  nodes: [CollectionPublication!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one CollectionPublication and a cursor during pagination.\n"
type CollectionPublicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CollectionPublicationEdge."""
  node: CollectionPublication!
}

"""Specifies the publications to which a collection will be published."""
input CollectionPublicationInput {
  """The ID of the publication."""
  publicationId: ID
}

"""
Specifies a collection to publish and the sales channels to publish it to.
"""
input CollectionPublishInput {
  """The channels where the collection will be published."""
  collectionPublications: [CollectionPublicationInput!]!

  """The collection to create or update publications for."""
  id: ID!
}

"""Return type for `collectionPublish` mutation."""
type CollectionPublishPayload {
  """The published collection."""
  collection: Collection

  """The channels where the collection has been published."""
  collectionPublications: [CollectionPublication!]

  """The shop associated with the collection."""
  shop: Shop!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `collectionRemoveProducts` mutation."""
type CollectionRemoveProductsPayload {
  """The asynchronous job removing the products."""
  job: Job

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `collectionReorderProducts` mutation."""
type CollectionReorderProductsPayload {
  """The asynchronous job reordering the products."""
  job: Job

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Represents at rule that's used to assign products to a collection."""
type CollectionRule {
  """
  The attribute that the rule focuses on (for example, `title` or `product_type`).
  """
  column: CollectionRuleColumn!

  """The value that the operator is applied to (for example, `Hats`)."""
  condition: String!

  "The type of operator that the rule is based on (for example, `equals`, `contains`, or `not_equals`).\n"
  relation: CollectionRuleRelation!
}

"""
Specifies the property of a product being used to populate the smart collection.
"""
enum CollectionRuleColumn {
  """
  The `is_price_reduced` attribute, which is a Boolean type evaluated as `true` if a product has a `compare_at_price` set on any of its variants.
  """
  IS_PRICE_REDUCED

  """The `tag` attribute."""
  TAG

  """The `title` attribute."""
  TITLE

  """The `type` attribute."""
  TYPE

  """The `variant_compare_at_price` attribute."""
  VARIANT_COMPARE_AT_PRICE

  """The `variant_inventory` attribute."""
  VARIANT_INVENTORY

  """The `variant_price` attribute."""
  VARIANT_PRICE

  """The `variant_title` attribute."""
  VARIANT_TITLE

  """The `variant_weight` attribute."""
  VARIANT_WEIGHT

  """The `vendor` attribute."""
  VENDOR
}

"""
Collections may use rules to automatically include the matching products. This defines restrictions for a type of rule.
"""
type CollectionRuleConditions {
  """Allowed relations of the rule."""
  allowedRelations: [CollectionRuleRelation!]!

  """Most commonly used relation for this rule."""
  defaultRelation: CollectionRuleRelation!

  """Type of the rule."""
  ruleType: CollectionRuleColumn!
}

"""Specifies a rule to associate with a collection."""
input CollectionRuleInput {
  """
  The attribute that the rule focuses on (for example, `title` or `product_type`).
  """
  column: CollectionRuleColumn!

  """The value that the operator is applied to (for example, `Hats`)."""
  condition: String!

  "The type of operator that the rule is based on (for example, `equals`, `contains`, or `not_equals`).\n"
  relation: CollectionRuleRelation!
}

"""Specifies the relationship between the `column` and the condition."""
enum CollectionRuleRelation {
  """The attribute contains the condition."""
  CONTAINS

  """The attribute ends with the condition."""
  ENDS_WITH

  """The attribute is equal to the condition."""
  EQUALS

  """The attribute is greater than the condition."""
  GREATER_THAN

  """The attribute is not set."""
  IS_NOT_SET

  """The attribute is set."""
  IS_SET

  """The attribute is less than the condition."""
  LESS_THAN

  """The attribute does not contain the condition."""
  NOT_CONTAINS

  """The attribute does not equal the condition."""
  NOT_EQUALS

  """The attribute starts with the condition."""
  STARTS_WITH
}

"""
The set of rules that are used to determine which products are included in the collection.
"""
type CollectionRuleSet {
  "Whether products must match any or all of the rules to be included in the collection.\nIf true, then products must match one or more of the rules to be included in the collection.\nIf false, then products must match all of the rules to be included in the collection.\n"
  appliedDisjunctively: Boolean!

  """The rules used to assign products to the collection."""
  rules: [CollectionRule!]!
}

"""Specifies a rule set for the collection."""
input CollectionRuleSetInput {
  "Whether products must match any or all of the rules to be included in the collection.\nIf true, then products must match one or more of the rules to be included in the collection.\nIf false, then products must match all of the rules to be included in the collection.\n"
  appliedDisjunctively: Boolean!

  """The rules used to assign products to the collection."""
  rules: [CollectionRuleInput!]
}

"""The set of valid sort keys for the Collection query."""
enum CollectionSortKeys {
  """Sort by the `id` value."""
  ID

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE

  """Sort by the `title` value."""
  TITLE

  """Sort by the `updated_at` value."""
  UPDATED_AT
}

"""Specifies the sort order for the products in the collection."""
enum CollectionSortOrder {
  """Alphabetically, in ascending order (A - Z)."""
  ALPHA_ASC

  """Alphabetically, in descending order (Z - A)."""
  ALPHA_DESC

  """By best-selling products."""
  BEST_SELLING

  """By date created, in ascending order (oldest - newest)."""
  CREATED

  """By date created, in descending order (newest - oldest)."""
  CREATED_DESC

  """In the order set manually by the merchant."""
  MANUAL

  """By price, in ascending order (lowest - highest)."""
  PRICE_ASC

  """By price, in descending order (highest - lowest)."""
  PRICE_DESC
}

"""
Specifies the collection to unpublish and the sales channels to remove it from.
"""
input CollectionUnpublishInput {
  """The channels where the collection is published."""
  collectionPublications: [CollectionPublicationInput!]!

  """The collection to create or update publications for."""
  id: ID!
}

"""Return type for `collectionUnpublish` mutation."""
type CollectionUnpublishPayload {
  """The collection that has been unpublished."""
  collection: Collection

  """The shop associated with the collection."""
  shop: Shop!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `collectionUpdate` mutation."""
type CollectionUpdatePayload {
  """The updated collection."""
  collection: Collection

  """The asynchronous job updating the products based on the new rule set."""
  job: Job

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"Comment events are generated by staff members of a shop.\nThey are created when a staff member adds a comment to the timeline of an order, draft order, customer, or transfer.\n"
type CommentEvent implements Event & Node {
  """The name of the app that created the event."""
  appTitle: String

  """The attachments associated with the comment event."""
  attachments: [CommentEventAttachment!]!

  """Whether the event was created by an app."""
  attributeToApp: Boolean!

  """Whether the event was caused by an admin user."""
  attributeToUser: Boolean!

  """The name of the user that authored the comment event."""
  author: StaffMember!

  """
  Whether the comment event can be deleted. If true, then the comment event can be deleted.
  """
  canDelete: Boolean!

  """
  Whether the comment event can be edited. If true, then the comment event can be edited.
  """
  canEdit: Boolean!

  """The date and time when the event was created."""
  createdAt: DateTime!

  """Whether the event is critical."""
  criticalAlert: Boolean!

  """
  Whether the comment event has been edited. If true, then the comment event has been edited.
  """
  edited: Boolean!

  """
  The object reference associated with the comment event. For example, a product or discount).
  """
  embed: CommentEventEmbed

  """A globally-unique identifier."""
  id: ID!

  """Human readable text that describes the event."""
  message: FormattedString!

  """The raw body of the comment event."""
  rawMessage: String!

  """The parent subject to which the comment event belongs."""
  subject: CommentEventSubject!
}

"""A file attachment associated to a comment event."""
type CommentEventAttachment {
  """
  The file extension of the comment event attachment, indicating the file format.
  """
  fileExtension: String

  """A globally-unique identifier."""
  id: ID!

  """The image attached to the comment event."""
  image: Image

  """The filename of the comment event attachment."""
  name: String!

  """The size of the attachment."""
  size: Int!

  """The URL of the attachment."""
  url: URL!
}

"""The main embed of a comment event."""
union CommentEventEmbed = Customer | DraftOrder | Order | Product | ProductVariant

"""The subject line of a comment event."""
interface CommentEventSubject {
  """
  Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
  """
  hasTimelineComment: Boolean!

  """A globally-unique identifier."""
  id: ID!
}

"""The context data that determines the pricing of a variant."""
input ContextualPricingContext {
  """The country code used to fetch country-specific prices."""
  country: CountryCode
}

"""
The list of all the countries from the combined shipping zones for the shop.
"""
type CountriesInShippingZones {
  """The list of all the countries from all the combined shipping zones."""
  countryCodes: [CountryCode!]!

  """Whether 'Rest of World' has been defined in any of the shipping zones."""
  includeRestOfWorld: Boolean!
}

"The code designating a country/region, which generally follows ISO 3166-1 alpha-2 guidelines.\nIf a territory doesn't have a country code value in the `CountryCode` enum, then it might be considered a subdivision\nof another country. For example, the territories associated with Spain are represented by the country code `ES`,\nand the territories associated with the United States of America are represented by the country code `US`.\n"
enum CountryCode {
  """Ascension Island."""
  AC

  """Andorra."""
  AD

  """United Arab Emirates."""
  AE

  """Afghanistan."""
  AF

  """Antigua & Barbuda."""
  AG

  """Anguilla."""
  AI

  """Albania."""
  AL

  """Armenia."""
  AM

  """Netherlands Antilles."""
  AN

  """Angola."""
  AO

  """Argentina."""
  AR

  """Austria."""
  AT

  """Australia."""
  AU

  """Aruba."""
  AW

  """Åland Islands."""
  AX

  """Azerbaijan."""
  AZ

  """Bosnia & Herzegovina."""
  BA

  """Barbados."""
  BB

  """Bangladesh."""
  BD

  """Belgium."""
  BE

  """Burkina Faso."""
  BF

  """Bulgaria."""
  BG

  """Bahrain."""
  BH

  """Burundi."""
  BI

  """Benin."""
  BJ

  """St. Barthélemy."""
  BL

  """Bermuda."""
  BM

  """Brunei."""
  BN

  """Bolivia."""
  BO

  """Caribbean Netherlands."""
  BQ

  """Brazil."""
  BR

  """Bahamas."""
  BS

  """Bhutan."""
  BT

  """Bouvet Island."""
  BV

  """Botswana."""
  BW

  """Belarus."""
  BY

  """Belize."""
  BZ

  """Canada."""
  CA

  """Cocos (Keeling) Islands."""
  CC

  """Congo - Kinshasa."""
  CD

  """Central African Republic."""
  CF

  """Congo - Brazzaville."""
  CG

  """Switzerland."""
  CH

  """Côte d’Ivoire."""
  CI

  """Cook Islands."""
  CK

  """Chile."""
  CL

  """Cameroon."""
  CM

  """China."""
  CN

  """Colombia."""
  CO

  """Costa Rica."""
  CR

  """Cuba."""
  CU

  """Cape Verde."""
  CV

  """Curaçao."""
  CW

  """Christmas Island."""
  CX

  """Cyprus."""
  CY

  """Czechia."""
  CZ

  """Germany."""
  DE

  """Djibouti."""
  DJ

  """Denmark."""
  DK

  """Dominica."""
  DM

  """Dominican Republic."""
  DO

  """Algeria."""
  DZ

  """Ecuador."""
  EC

  """Estonia."""
  EE

  """Egypt."""
  EG

  """Western Sahara."""
  EH

  """Eritrea."""
  ER

  """Spain."""
  ES

  """Ethiopia."""
  ET

  """Finland."""
  FI

  """Fiji."""
  FJ

  """Falkland Islands."""
  FK

  """Faroe Islands."""
  FO

  """France."""
  FR

  """Gabon."""
  GA

  """United Kingdom."""
  GB

  """Grenada."""
  GD

  """Georgia."""
  GE

  """French Guiana."""
  GF

  """Guernsey."""
  GG

  """Ghana."""
  GH

  """Gibraltar."""
  GI

  """Greenland."""
  GL

  """Gambia."""
  GM

  """Guinea."""
  GN

  """Guadeloupe."""
  GP

  """Equatorial Guinea."""
  GQ

  """Greece."""
  GR

  """South Georgia & South Sandwich Islands."""
  GS

  """Guatemala."""
  GT

  """Guinea-Bissau."""
  GW

  """Guyana."""
  GY

  """Hong Kong SAR."""
  HK

  """Heard & McDonald Islands."""
  HM

  """Honduras."""
  HN

  """Croatia."""
  HR

  """Haiti."""
  HT

  """Hungary."""
  HU

  """Indonesia."""
  ID

  """Ireland."""
  IE

  """Israel."""
  IL

  """Isle of Man."""
  IM

  """India."""
  IN

  """British Indian Ocean Territory."""
  IO

  """Iraq."""
  IQ

  """Iran."""
  IR

  """Iceland."""
  IS

  """Italy."""
  IT

  """Jersey."""
  JE

  """Jamaica."""
  JM

  """Jordan."""
  JO

  """Japan."""
  JP

  """Kenya."""
  KE

  """Kyrgyzstan."""
  KG

  """Cambodia."""
  KH

  """Kiribati."""
  KI

  """Comoros."""
  KM

  """St. Kitts & Nevis."""
  KN

  """North Korea."""
  KP

  """South Korea."""
  KR

  """Kuwait."""
  KW

  """Cayman Islands."""
  KY

  """Kazakhstan."""
  KZ

  """Laos."""
  LA

  """Lebanon."""
  LB

  """St. Lucia."""
  LC

  """Liechtenstein."""
  LI

  """Sri Lanka."""
  LK

  """Liberia."""
  LR

  """Lesotho."""
  LS

  """Lithuania."""
  LT

  """Luxembourg."""
  LU

  """Latvia."""
  LV

  """Libya."""
  LY

  """Morocco."""
  MA

  """Monaco."""
  MC

  """Moldova."""
  MD

  """Montenegro."""
  ME

  """St. Martin."""
  MF

  """Madagascar."""
  MG

  """North Macedonia."""
  MK

  """Mali."""
  ML

  """Myanmar (Burma)."""
  MM

  """Mongolia."""
  MN

  """Macao SAR."""
  MO

  """Martinique."""
  MQ

  """Mauritania."""
  MR

  """Montserrat."""
  MS

  """Malta."""
  MT

  """Mauritius."""
  MU

  """Maldives."""
  MV

  """Malawi."""
  MW

  """Mexico."""
  MX

  """Malaysia."""
  MY

  """Mozambique."""
  MZ

  """Namibia."""
  NA

  """New Caledonia."""
  NC

  """Niger."""
  NE

  """Norfolk Island."""
  NF

  """Nigeria."""
  NG

  """Nicaragua."""
  NI

  """Netherlands."""
  NL

  """Norway."""
  NO

  """Nepal."""
  NP

  """Nauru."""
  NR

  """Niue."""
  NU

  """New Zealand."""
  NZ

  """Oman."""
  OM

  """Panama."""
  PA

  """Peru."""
  PE

  """French Polynesia."""
  PF

  """Papua New Guinea."""
  PG

  """Philippines."""
  PH

  """Pakistan."""
  PK

  """Poland."""
  PL

  """St. Pierre & Miquelon."""
  PM

  """Pitcairn Islands."""
  PN

  """Palestinian Territories."""
  PS

  """Portugal."""
  PT

  """Paraguay."""
  PY

  """Qatar."""
  QA

  """Réunion."""
  RE

  """Romania."""
  RO

  """Serbia."""
  RS

  """Russia."""
  RU

  """Rwanda."""
  RW

  """Saudi Arabia."""
  SA

  """Solomon Islands."""
  SB

  """Seychelles."""
  SC

  """Sudan."""
  SD

  """Sweden."""
  SE

  """Singapore."""
  SG

  """St. Helena."""
  SH

  """Slovenia."""
  SI

  """Svalbard & Jan Mayen."""
  SJ

  """Slovakia."""
  SK

  """Sierra Leone."""
  SL

  """San Marino."""
  SM

  """Senegal."""
  SN

  """Somalia."""
  SO

  """Suriname."""
  SR

  """South Sudan."""
  SS

  """São Tomé & Príncipe."""
  ST

  """El Salvador."""
  SV

  """Sint Maarten."""
  SX

  """Syria."""
  SY

  """Eswatini."""
  SZ

  """Tristan da Cunha."""
  TA

  """Turks & Caicos Islands."""
  TC

  """Chad."""
  TD

  """French Southern Territories."""
  TF

  """Togo."""
  TG

  """Thailand."""
  TH

  """Tajikistan."""
  TJ

  """Tokelau."""
  TK

  """Timor-Leste."""
  TL

  """Turkmenistan."""
  TM

  """Tunisia."""
  TN

  """Tonga."""
  TO

  """Turkey."""
  TR

  """Trinidad & Tobago."""
  TT

  """Tuvalu."""
  TV

  """Taiwan."""
  TW

  """Tanzania."""
  TZ

  """Ukraine."""
  UA

  """Uganda."""
  UG

  """U.S. Outlying Islands."""
  UM

  """United States."""
  US

  """Uruguay."""
  UY

  """Uzbekistan."""
  UZ

  """Vatican City."""
  VA

  """St. Vincent & Grenadines."""
  VC

  """Venezuela."""
  VE

  """British Virgin Islands."""
  VG

  """Vietnam."""
  VN

  """Vanuatu."""
  VU

  """Wallis & Futuna."""
  WF

  """Samoa."""
  WS

  """Kosovo."""
  XK

  """Yemen."""
  YE

  """Mayotte."""
  YT

  """South Africa."""
  ZA

  """Zambia."""
  ZM

  """Zimbabwe."""
  ZW

  """Unknown Region."""
  ZZ
}

"The country-specific harmonized system code and ISO country code for an inventory item.\n"
type CountryHarmonizedSystemCode {
  """
  The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.
  """
  countryCode: CountryCode!

  """
  The country-specific harmonized system code. These are usually longer than 6 digits.
  """
  harmonizedSystemCode: String!
}

"An auto-generated type for paginating through multiple CountryHarmonizedSystemCodes.\n"
type CountryHarmonizedSystemCodeConnection {
  """A list of edges."""
  edges: [CountryHarmonizedSystemCodeEdge!]!

  """A list of the nodes contained in CountryHarmonizedSystemCodeEdge."""
  nodes: [CountryHarmonizedSystemCode!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one CountryHarmonizedSystemCode and a cursor during pagination.\n"
type CountryHarmonizedSystemCodeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CountryHarmonizedSystemCodeEdge."""
  node: CountryHarmonizedSystemCode!
}

"The fields required to specify a harmonized system code.\n"
input CountryHarmonizedSystemCodeInput {
  """
  The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.
  """
  countryCode: CountryCode!

  """Country specific harmonized system code."""
  harmonizedSystemCode: String!
}

"""Specifies the input fields required to create a media object."""
input CreateMediaInput {
  """The alt text associated to the media."""
  alt: String

  """The media content type."""
  mediaContentType: MediaContentType!

  """
  The original source of the media object. May be an external URL or signed upload URL.
  """
  originalSource: String!
}

"""The part of the image that should remain after cropping."""
enum CropRegion {
  """Keep the bottom of the image."""
  BOTTOM

  """Keep the center of the image."""
  CENTER

  """Keep the left of the image."""
  LEFT

  """Keep the right of the image."""
  RIGHT

  """Keep the top of the image."""
  TOP
}

"The three-letter currency codes that represent the world currencies used in stores. These include standard ISO 4217 codes, legacy codes,\nand non-standard codes.\n"
enum CurrencyCode {
  """United Arab Emirates Dirham (AED)."""
  AED

  """Afghan Afghani (AFN)."""
  AFN

  """Albanian Lek (ALL)."""
  ALL

  """Armenian Dram (AMD)."""
  AMD

  """Netherlands Antillean Guilder."""
  ANG

  """Angolan Kwanza (AOA)."""
  AOA

  """Argentine Pesos (ARS)."""
  ARS

  """Australian Dollars (AUD)."""
  AUD

  """Aruban Florin (AWG)."""
  AWG

  """Azerbaijani Manat (AZN)."""
  AZN

  """Bosnia and Herzegovina Convertible Mark (BAM)."""
  BAM

  """Barbadian Dollar (BBD)."""
  BBD

  """Bangladesh Taka (BDT)."""
  BDT

  """Bulgarian Lev (BGN)."""
  BGN

  """Bahraini Dinar (BHD)."""
  BHD

  """Burundian Franc (BIF)."""
  BIF

  """Bermudian Dollar (BMD)."""
  BMD

  """Brunei Dollar (BND)."""
  BND

  """Bolivian Boliviano (BOB)."""
  BOB

  """Brazilian Real (BRL)."""
  BRL

  """Bahamian Dollar (BSD)."""
  BSD

  """Bhutanese Ngultrum (BTN)."""
  BTN

  """Botswana Pula (BWP)."""
  BWP

  """Belarusian Ruble (BYN)."""
  BYN

  """Belarusian Ruble (BYR)."""
  BYR @deprecated(reason: "`BYR` is deprecated. Use `BYN` available from version `2021-01` onwards instead.")

  """Belize Dollar (BZD)."""
  BZD

  """Canadian Dollars (CAD)."""
  CAD

  """Congolese franc (CDF)."""
  CDF

  """Swiss Francs (CHF)."""
  CHF

  """Chilean Peso (CLP)."""
  CLP

  """Chinese Yuan Renminbi (CNY)."""
  CNY

  """Colombian Peso (COP)."""
  COP

  """Costa Rican Colones (CRC)."""
  CRC

  """Cape Verdean escudo (CVE)."""
  CVE

  """Czech Koruny (CZK)."""
  CZK

  """Djiboutian Franc (DJF)."""
  DJF

  """Danish Kroner (DKK)."""
  DKK

  """Dominican Peso (DOP)."""
  DOP

  """Algerian Dinar (DZD)."""
  DZD

  """Egyptian Pound (EGP)."""
  EGP

  """Eritrean Nakfa (ERN)."""
  ERN

  """Ethiopian Birr (ETB)."""
  ETB

  """Euro (EUR)."""
  EUR

  """Fijian Dollars (FJD)."""
  FJD

  """Falkland Islands Pounds (FKP)."""
  FKP

  """United Kingdom Pounds (GBP)."""
  GBP

  """Georgian Lari (GEL)."""
  GEL

  """Ghanaian Cedi (GHS)."""
  GHS

  """Gibraltar Pounds (GIP)."""
  GIP

  """Gambian Dalasi (GMD)."""
  GMD

  """Guinean Franc (GNF)."""
  GNF

  """Guatemalan Quetzal (GTQ)."""
  GTQ

  """Guyanese Dollar (GYD)."""
  GYD

  """Hong Kong Dollars (HKD)."""
  HKD

  """Honduran Lempira (HNL)."""
  HNL

  """Croatian Kuna (HRK)."""
  HRK

  """Haitian Gourde (HTG)."""
  HTG

  """Hungarian Forint (HUF)."""
  HUF

  """Indonesian Rupiah (IDR)."""
  IDR

  """Israeli New Shekel (NIS)."""
  ILS

  """Indian Rupees (INR)."""
  INR

  """Iraqi Dinar (IQD)."""
  IQD

  """Iranian Rial (IRR)."""
  IRR

  """Icelandic Kronur (ISK)."""
  ISK

  """Jersey Pound."""
  JEP

  """Jamaican Dollars (JMD)."""
  JMD

  """Jordanian Dinar (JOD)."""
  JOD

  """Japanese Yen (JPY)."""
  JPY

  """Kenyan Shilling (KES)."""
  KES

  """Kyrgyzstani Som (KGS)."""
  KGS

  """Cambodian Riel."""
  KHR

  """Kiribati Dollar (KID)."""
  KID

  """Comorian Franc (KMF)."""
  KMF

  """South Korean Won (KRW)."""
  KRW

  """Kuwaiti Dinar (KWD)."""
  KWD

  """Cayman Dollars (KYD)."""
  KYD

  """Kazakhstani Tenge (KZT)."""
  KZT

  """Laotian Kip (LAK)."""
  LAK

  """Lebanese Pounds (LBP)."""
  LBP

  """Sri Lankan Rupees (LKR)."""
  LKR

  """Liberian Dollar (LRD)."""
  LRD

  """Lesotho Loti (LSL)."""
  LSL

  """Lithuanian Litai (LTL)."""
  LTL

  """Latvian Lati (LVL)."""
  LVL

  """Libyan Dinar (LYD)."""
  LYD

  """Moroccan Dirham."""
  MAD

  """Moldovan Leu (MDL)."""
  MDL

  """Malagasy Ariary (MGA)."""
  MGA

  """Macedonia Denar (MKD)."""
  MKD

  """Burmese Kyat (MMK)."""
  MMK

  """Mongolian Tugrik."""
  MNT

  """Macanese Pataca (MOP)."""
  MOP

  """Mauritanian Ouguiya (MRU)."""
  MRU

  """Mauritian Rupee (MUR)."""
  MUR

  """Maldivian Rufiyaa (MVR)."""
  MVR

  """Malawian Kwacha (MWK)."""
  MWK

  """Mexican Pesos (MXN)."""
  MXN

  """Malaysian Ringgits (MYR)."""
  MYR

  """Mozambican Metical."""
  MZN

  """Namibian Dollar."""
  NAD

  """Nigerian Naira (NGN)."""
  NGN

  """Nicaraguan Córdoba (NIO)."""
  NIO

  """Norwegian Kroner (NOK)."""
  NOK

  """Nepalese Rupee (NPR)."""
  NPR

  """New Zealand Dollars (NZD)."""
  NZD

  """Omani Rial (OMR)."""
  OMR

  """Panamian Balboa (PAB)."""
  PAB

  """Peruvian Nuevo Sol (PEN)."""
  PEN

  """Papua New Guinean Kina (PGK)."""
  PGK

  """Philippine Peso (PHP)."""
  PHP

  """Pakistani Rupee (PKR)."""
  PKR

  """Polish Zlotych (PLN)."""
  PLN

  """Paraguayan Guarani (PYG)."""
  PYG

  """Qatari Rial (QAR)."""
  QAR

  """Romanian Lei (RON)."""
  RON

  """Serbian dinar (RSD)."""
  RSD

  """Russian Rubles (RUB)."""
  RUB

  """Rwandan Franc (RWF)."""
  RWF

  """Saudi Riyal (SAR)."""
  SAR

  """Solomon Islands Dollar (SBD)."""
  SBD

  """Seychellois Rupee (SCR)."""
  SCR

  """Sudanese Pound (SDG)."""
  SDG

  """Swedish Kronor (SEK)."""
  SEK

  """Singapore Dollars (SGD)."""
  SGD

  """Saint Helena Pounds (SHP)."""
  SHP

  """Sierra Leonean Leone (SLL)."""
  SLL

  """Somali Shilling (SOS)."""
  SOS

  """Surinamese Dollar (SRD)."""
  SRD

  """South Sudanese Pound (SSP)."""
  SSP

  """Sao Tome And Principe Dobra (STD)."""
  STD @deprecated(reason: "`STD` is deprecated. Use `STN` available from version `2022-07` onwards instead.")

  """Sao Tome And Principe Dobra (STN)."""
  STN

  """Syrian Pound (SYP)."""
  SYP

  """Swazi Lilangeni (SZL)."""
  SZL

  """Thai baht (THB)."""
  THB

  """Tajikistani Somoni (TJS)."""
  TJS

  """Turkmenistani Manat (TMT)."""
  TMT

  """Tunisian Dinar (TND)."""
  TND

  """Tongan Pa'anga (TOP)."""
  TOP

  """Turkish Lira (TRY)."""
  TRY

  """Trinidad and Tobago Dollars (TTD)."""
  TTD

  """Taiwan Dollars (TWD)."""
  TWD

  """Tanzanian Shilling (TZS)."""
  TZS

  """Ukrainian Hryvnia (UAH)."""
  UAH

  """Ugandan Shilling (UGX)."""
  UGX

  """United States Dollars (USD)."""
  USD

  """Uruguayan Pesos (UYU)."""
  UYU

  """Uzbekistan som (UZS)."""
  UZS

  """Venezuelan Bolivares (VED)."""
  VED

  """Venezuelan Bolivares (VEF)."""
  VEF @deprecated(reason: "`VEF` is deprecated. Use `VES` available from version `2020-10` onwards instead.")

  """Venezuelan Bolivares (VES)."""
  VES

  """Vietnamese đồng (VND)."""
  VND

  """Vanuatu Vatu (VUV)."""
  VUV

  """Samoan Tala (WST)."""
  WST

  """Central African CFA Franc (XAF)."""
  XAF

  """East Caribbean Dollar (XCD)."""
  XCD

  """West African CFA franc (XOF)."""
  XOF

  """CFP Franc (XPF)."""
  XPF

  """Unrecognized currency."""
  XXX

  """Yemeni Rial (YER)."""
  YER

  """South African Rand (ZAR)."""
  ZAR

  """Zambian Kwacha (ZMW)."""
  ZMW
}

"""
Currency formats configured for the merchant. These formats are available to use within Liquid.
"""
type CurrencyFormats {
  """Money without currency in HTML."""
  moneyFormat: FormattedString!

  """Money without currency in emails."""
  moneyInEmailsFormat: String!

  """Money with currency in HTML."""
  moneyWithCurrencyFormat: FormattedString!

  """Money with currency in emails."""
  moneyWithCurrencyInEmailsFormat: String!
}

"""A setting for a presentment currency."""
type CurrencySetting {
  """The currency's ISO code."""
  currencyCode: CurrencyCode!

  """The full name of the currency."""
  currencyName: String!

  """
  Whether the currency is enabled or not. An enabled currency setting is visible to buyers and allows orders to be generated with that currency as presentment.
  """
  enabled: Boolean!

  """
  The date and time when the active exchange rate for the currency was last modified. It can be the automatic rate's creation date, or the manual rate's last updated at date if active.
  """
  rateUpdatedAt: DateTime
}

"An auto-generated type for paginating through multiple CurrencySettings.\n"
type CurrencySettingConnection {
  """A list of edges."""
  edges: [CurrencySettingEdge!]!

  """A list of the nodes contained in CurrencySettingEdge."""
  nodes: [CurrencySetting!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one CurrencySetting and a cursor during pagination.\n"
type CurrencySettingEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CurrencySettingEdge."""
  node: CurrencySetting!
}

"Represents information about a customer of the shop, such as the customer's contact details, their order\nhistory, and whether they've agreed to receive marketing material by email.\n\n**Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.\n"
type Customer implements CommentEventSubject & HasEvents & HasMetafieldDefinitions & HasMetafields & LegacyInteroperability & Node {
  """Whether the customer has agreed to receive marketing material."""
  acceptsMarketing: Boolean! @deprecated(reason: "Use `emailMarketingConsent` instead")

  "The date and time when the customer consented or objected to receiving marketing material by email.\n"
  acceptsMarketingUpdatedAt: DateTime! @deprecated(reason: "Use `emailMarketingConsent` instead")

  """A list of addresses associated with the customer."""
  addresses(
    """Truncate the array result to this size."""
    first: Int
  ): [MailingAddress!]!

  """
  The total amount that the customer has spent on orders in their lifetime.
  """
  amountSpent: MoneyV2!

  """The average amount that the customer spent per order."""
  averageOrderAmount: Money @deprecated(reason: "Use `averageOrderAmountV2` instead")

  """The average amount that the customer spent per order."""
  averageOrderAmountV2: MoneyV2

  "Whether the merchant can delete the customer from their store.\n\nA customer can be deleted from a store only if they have not yet made an order. After a customer makes an\norder, they can't be deleted from a store.\n"
  canDelete: Boolean!

  """The date and time when the customer was added to the store."""
  createdAt: DateTime!

  """The default address associated with the customer."""
  defaultAddress: MailingAddress

  "The full name of the customer, based on the values for first_name and last_name. If the first_name and\nlast_name are not available, then this falls back to the customer's email address, and if that is not available, the customer's phone number.\n"
  displayName: String!

  """The customer's email address."""
  email: String

  "The current email marketing state for the customer.\nIf the customer doesn't have an email address, then this property is `null`.\n"
  emailMarketingConsent: CustomerEmailMarketingConsentState

  """A list of events associated with the customer."""
  events(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `comments`\n - `created_at`\n - `subject_type`\n - `verb`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """The customer's first name."""
  firstName: String

  """
  Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
  """
  hasTimelineComment: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The image associated with the customer."""
  image: Image!

  """The customer's last name."""
  lastName: String

  """The customer's last order."""
  lastOrder: Order

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  "The amount of time since the customer was first added to the store.\n\nExample: 'about 12 years'.\n"
  lifetimeDuration: String!

  """The customer's locale."""
  locale: String!

  """The market that includes the customer’s default address."""
  market: Market

  "The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines, that the\ncustomer gave when they consented to receive marketing material by email.\n\nIf the customer does not accept email marketing, then this property is `null`.\n"
  marketingOptInLevel: CustomerMarketingOptInLevel @deprecated(reason: "Use `emailMarketingConsent` instead")

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The key for the metafield."""
    key: String!

    """The namespace for the metafield."""
    namespace: String!
  ): Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    "Supported filter parameters:\n - `created_at`\n - `key`\n - `namespace`\n - `owner_type`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The metafield namespace to filter by."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  """A unique identifier for the customer that's used with Multipass login."""
  multipassIdentifier: String

  """A note about the customer."""
  note: String

  """
  The number of orders that the customer has made at the store in their lifetime.
  """
  numberOfOrders: UnsignedInt64!

  """A list of the customer's orders."""
  orders(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `cart_token`\n - `channel`\n - `channel_id`\n - `chargeback_status`\n - `checkout_token`\n - `created_at`\n - `credit_card_last4`\n - `customer_id`\n - `delivery_method`\n - `discount_code`\n - `earliest_fulfill_by`\n - `email`\n - `financial_status`\n - `fraud_protection_level`\n - `fulfillment_location_id`\n - `fulfillment_status`\n - `gateway`\n - `location_id`\n - `name`\n - `payment_provider_id`\n - `processed_at`\n - `reference_location_id`\n - `return_status`\n - `risk_level`\n - `sales_channel`\n - `source_identifier`\n - `source_name`\n - `status`\n - `tag`\n - `tag_not`\n - `test`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: OrderSortKeys = ID
  ): OrderConnection!

  """A list of the customer's payment methods."""
  paymentMethods(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
  ): CustomerPaymentMethodConnection!

  """The customer's phone number."""
  phone: String

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The key for the private metafield."""
    key: String!

    """The namespace for the private metafield."""
    namespace: String!
  ): PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter the private metafields by namespace."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PrivateMetafieldConnection!

  """
  Possible subscriber states of a customer defined by their subscription contracts.
  """
  productSubscriberStatus: CustomerProductSubscriberStatus!

  "The current SMS marketing state for the customer's phone number.\n\nIf the customer does not have a phone number, then this property is `null`.\n"
  smsMarketingConsent: CustomerSmsMarketingConsentState

  """The state of the customer's account with the shop."""
  state: CustomerState!

  """The statistics for a given customer."""
  statistics: CustomerStatistics!

  """A list of the customer's subscription contracts."""
  subscriptionContracts(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SubscriptionContractConnection!

  """A comma separated list of tags that have been added to the customer."""
  tags: [String!]!

  """
  Whether the customer is exempt from being charged taxes on their orders.
  """
  taxExempt: Boolean!

  """The list of tax exemptions applied to the customer."""
  taxExemptions: [TaxExemption!]!

  """The URL to unsubscribe the customer from the mailing list."""
  unsubscribeUrl: URL!

  """The date and time when the customer was last updated."""
  updatedAt: DateTime!

  "Whether the email address is formatted correctly. This does not\nguarantee that the email address actually exists.\n"
  validEmailAddress: Boolean!

  """
  Whether the customer has verified their email address. Defaults to `true` if the customer is created through the Shopify admin or API.
  """
  verifiedEmail: Boolean!
}

"""Return type for `customerAddTaxExemptions` mutation."""
type CustomerAddTaxExemptionsPayload {
  """The updated customer."""
  customer: Customer

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type for paginating through multiple Customers.\n"
type CustomerConnection {
  """A list of edges."""
  edges: [CustomerEdge!]!

  """A list of the nodes contained in CustomerEdge."""
  nodes: [Customer!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"The source that collected the customer's consent to receive marketing materials.\n"
enum CustomerConsentCollectedFrom {
  "The customer consent was collected outside of Shopify.\n"
  OTHER

  "The customer consent was collected by Shopify.\n"
  SHOPIFY
}

"""Return type for `customerCreate` mutation."""
type CustomerCreatePayload {
  """The created customer."""
  customer: Customer

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Represents a card instrument for customer payment method."""
type CustomerCreditCard {
  """The billing address of the card."""
  billingAddress: CustomerCreditCardBillingAddress

  """The brand of the card."""
  brand: String!

  """Whether the card is about to expire."""
  expiresSoon: Boolean!

  """The expiry month of the card."""
  expiryMonth: Int!

  """The expiry year of the card."""
  expiryYear: Int!

  """The card's BIN number."""
  firstDigits: String

  """
  The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!

  """The last 4 digits of the card."""
  lastDigits: String!

  """The masked card number with only the last 4 digits displayed."""
  maskedNumber: String!

  """The name of the card holder."""
  name: String!

  """The source of the card if coming from a wallet such as Apple Pay."""
  source: String

  """The last 4 digits of the Device Account Number."""
  virtualLastDigits: String
}

"""The billing address of a credit card payment instrument."""
type CustomerCreditCardBillingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """The name of the city, district, village, or town."""
  city: String

  """The name of the country."""
  country: String

  "The two-letter code for the country of the address.\nFor example, US.\n"
  countryCode: CountryCode

  """The region of the address, such as the province, state, or district."""
  province: String

  "The two-letter code for the region.\nFor example, ON.\n"
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

"""Specifies the customer to delete."""
input CustomerDeleteInput {
  """The ID of the customer to delete."""
  id: ID!
}

"""Return type for `customerDelete` mutation."""
type CustomerDeletePayload {
  """The ID of the deleted customer."""
  deletedCustomerId: ID

  """The shop of the deleted customer."""
  shop: Shop!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type which holds one Customer and a cursor during pagination.\n"
type CustomerEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CustomerEdge."""
  node: Customer!
}

"Represents an email address.\n"
type CustomerEmailAddress {
  """The customer's default email address."""
  emailAddress: String!

  """Whether the customer has subscribed to email marketing."""
  marketingState: CustomerEmailAddressMarketingState!

  """The URL to unsubscribe a member from all mailing lists."""
  marketingUnsubscribeUrl: URL!

  "Whether the customer has opted in to having their opened emails tracked.\n"
  openTrackingLevel: CustomerEmailAddressOpenTrackingLevel!

  "The URL that can be used to opt a customer in or out of email open tracking.\n"
  openTrackingUrl: URL!
}

"Possible marketing states for the customer’s email address.\n"
enum CustomerEmailAddressMarketingState {
  "The customer’s email address marketing state is invalid.\n"
  INVALID

  "The customer is not subscribed to email marketing.\n"
  NOT_SUBSCRIBED

  "The customer is in the process of subscribing to email marketing.\n"
  PENDING

  "The customer is subscribed to email marketing.\n"
  SUBSCRIBED

  "The customer is not subscribed to email marketing but was previously subscribed.\n"
  UNSUBSCRIBED
}

"The different levels related to whether a customer has opted in to having their opened emails tracked.\n"
enum CustomerEmailAddressOpenTrackingLevel {
  "The customer has opted in to having their open emails tracked.\n"
  OPTED_IN

  "The customer has opted out of having their open emails tracked.\n"
  OPTED_OUT

  "The customer has not specified whether they want to opt in or out of having their open emails tracked.\n"
  UNKNOWN
}

"""
Information that describes when a customer consented to
        receiving marketing material by email.
"""
input CustomerEmailMarketingConsentInput {
  """
  The latest date and time when the customer consented or objected to
            receiving marketing material by email.
  """
  consentUpdatedAt: DateTime

  """
  The customer opt-in level at the time of subscribing to marketing material.
  """
  marketingOptInLevel: CustomerMarketingOptInLevel

  """
  The current marketing state associated with the customer's email.
            If the customer doesn't have an email, then this field is `null`.
  """
  marketingState: CustomerEmailMarketingState!
}

"The record of when a customer consented to receive marketing material by email.\n"
type CustomerEmailMarketingConsentState {
  "The date and time at which the customer consented to receive marketing material by email.\nThe customer's consent state reflects the consent record with the most recent `consent_updated_at` date.\nIf no date is provided, then the date and time at which the consent information was sent is used.\n"
  consentUpdatedAt: DateTime

  "The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines,\nthat the customer gave when they consented to receive marketing material by email.\n"
  marketingOptInLevel: CustomerMarketingOptInLevel

  """The current email marketing state for the customer."""
  marketingState: CustomerEmailMarketingState!
}

"The email consent information to update for a given customer ID.\n"
input CustomerEmailMarketingConsentUpdateInput {
  """
  The ID of the customer for which to update the email marketing consent information. The customer must have a unique email address associated to the record. If not, add the email address using the `customerUpdate` mutation first.
  """
  customerId: ID!

  """
  The marketing consent information when the customer consented to receiving marketing material by email.
  """
  emailMarketingConsent: CustomerEmailMarketingConsentInput!
}

"""Return type for `customerEmailMarketingConsentUpdate` mutation."""
type CustomerEmailMarketingConsentUpdatePayload {
  "The updated customer.\n"
  customer: Customer

  """The list of errors that occurred from executing the mutation."""
  userErrors: [CustomerEmailMarketingConsentUpdateUserError!]!
}

"""
An error that occurs during the execution of `CustomerEmailMarketingConsentUpdate`.
"""
type CustomerEmailMarketingConsentUpdateUserError implements DisplayableError {
  """The error code."""
  code: CustomerEmailMarketingConsentUpdateUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `CustomerEmailMarketingConsentUpdateUserError`.
"""
enum CustomerEmailMarketingConsentUpdateUserErrorCode {
  """The input value isn't included in the list."""
  INCLUSION

  """Unexpected internal error happened."""
  INTERNAL_ERROR

  """The input value is invalid."""
  INVALID

  """Missing a required argument."""
  MISSING_ARGUMENT
}

"The possible email marketing states for a customer.\n"
enum CustomerEmailMarketingState {
  "The customer’s email address marketing state is invalid.\n"
  INVALID

  "The customer isn't subscribed to email marketing.\n"
  NOT_SUBSCRIBED

  "The customer is in the process of subscribing to email marketing.\n"
  PENDING

  "The customer's personal data is erased. This value is internally-set and read-only.\n"
  REDACTED

  "The customer is subscribed to email marketing.\n"
  SUBSCRIBED

  "The customer isn't currently subscribed to email marketing but was previously subscribed.\n"
  UNSUBSCRIBED
}

"""Return type for `customerGenerateAccountActivationUrl` mutation."""
type CustomerGenerateAccountActivationUrlPayload {
  """The generated account activation URL."""
  accountActivationUrl: URL

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""
Provides the fields and values to use when creating or updating a customer.
"""
input CustomerInput {
  """The addresses for a customer."""
  addresses: [MailingAddressInput!]

  """The unique email address of the customer."""
  email: String

  """
  Information that describes when the customer consented to receiving marketing
          material by email. The `email` field is required when creating a customer with email marketing
          consent information.
  """
  emailMarketingConsent: CustomerEmailMarketingConsentInput

  """The customer's first name."""
  firstName: String

  """The ID of the customer to update."""
  id: ID

  """The customer's last name."""
  lastName: String

  """The customer's locale."""
  locale: String

  """Additional metafields to associate to the customer."""
  metafields: [MetafieldInput!]

  """A note about the customer."""
  note: String

  """The unique phone number for the customer."""
  phone: String

  """The private metafields to associate with the customer."""
  privateMetafields: [PrivateMetafieldInput!]

  """
  The marketing consent information when the customer consented to receiving marketing
          material by SMS. The `phone` field is required when creating a customer with SMS
          marketing consent information.
  """
  smsMarketingConsent: CustomerSmsMarketingConsentInput

  "A list of tags to associate with the customer. Can be an array or a comma-separated list. Example values: `[\"tag1\", \"tag2\", \"tag3\"]`, `\"tag1, tag2, tag3\"`\n\nUpdating `tags` overwrites any existing tags that were previously added to the customer. To add new tags without overwriting\nexisting tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)\nmutation.\n"
  tags: [String!]

  """Whether the customer is exempt from paying taxes on their order."""
  taxExempt: Boolean

  """The list of tax exemptions to apply to the customer."""
  taxExemptions: [TaxExemption!]
}

"""Represents a customer's visiting activities on a shop's online store."""
type CustomerJourney {
  """The position of the current order within the customer's order history."""
  customerOrderIndex: Int!

  """
  The amount of days between first session and order creation date. First session represents first session since the last order, or first session within the 30 day attribution window, if more than 30 days has passed since the last order.
  """
  daysToConversion: Int!

  """The customer's first session going into the shop."""
  firstVisit: CustomerVisit!

  """The last session before an order is made."""
  lastVisit: CustomerVisit

  """Events preceding a customer order, such as shop sessions."""
  moments: [CustomerMoment!]!
}

"""Represents a customer's visiting activities on a shop's online store."""
type CustomerJourneySummary {
  """
  The position of the current order within the customer's order history. Test orders aren't included.
  """
  customerOrderIndex: Int

  """
  The number of days between the first session and the order creation date. The first session represents the first session since the last order, or the first session within the 30 day attribution window, if more than 30 days have passed since the last order.
  """
  daysToConversion: Int

  """The customer's first session going into the shop."""
  firstVisit: CustomerVisit

  """The last session before an order is made."""
  lastVisit: CustomerVisit

  """The events preceding a customer's order, such as shop sessions."""
  moments(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CustomerMomentConnection

  """
  The total number of customer moments associated with this order. Returns null if the order is still in the process of being attributed.
  """
  momentsCount: Int

  """Whether the attributed sessions for the order have been created yet."""
  ready: Boolean!
}

"The possible values for the marketing subscription opt-in level enabled at the time the customer consented to receive marketing information.\n\nThe levels are defined by [the M3AAWG best practices guideline\n  document](https://www.m3aawg.org/sites/maawg/files/news/M3AAWG_Senders_BCP_Ver3-2015-02.pdf).\n"
enum CustomerMarketingOptInLevel {
  "After providing their information, the customer receives a confirmation and is required to\nperform a intermediate step before receiving marketing information.\n"
  CONFIRMED_OPT_IN

  "After providing their information, the customer receives marketing information without any\nintermediate steps.\n"
  SINGLE_OPT_IN

  "The customer receives marketing information but how they were opted in is unknown.\n"
  UNKNOWN
}

"""
Represents a session preceding an order, often used for building a timeline of events leading to an order.
"""
interface CustomerMoment {
  """The date and time when the customer's session occurred."""
  occurredAt: DateTime!
}

"An auto-generated type for paginating through multiple CustomerMoments.\n"
type CustomerMomentConnection {
  """A list of edges."""
  edges: [CustomerMomentEdge!]!

  """A list of the nodes contained in CustomerMomentEdge."""
  nodes: [CustomerMoment!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one CustomerMoment and a cursor during pagination.\n"
type CustomerMomentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CustomerMomentEdge."""
  node: CustomerMoment!
}

"""All possible instruments for CustomerPaymentMethods."""
union CustomerPaymentInstrument = CustomerCreditCard | CustomerPaypalBillingAgreement | CustomerShopPayAgreement

"""The billing address of a payment instrument."""
type CustomerPaymentInstrumentBillingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """The name of the city, district, village, or town."""
  city: String

  """The name of the country."""
  country: String

  "The two-letter code for the country of the address.\nFor example, US.\n"
  countryCode: CountryCode

  """The name of the buyer of the address."""
  name: String

  """The region of the address, such as the province, state, or district."""
  province: String

  "The two-letter code for the region.\nFor example, ON.\n"
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

"""A customer's payment method."""
type CustomerPaymentMethod implements Node {
  """The customer to whom the payment method belongs."""
  customer: Customer

  """The ID of this payment method."""
  id: ID!

  """The instrument for this payment method."""
  instrument: CustomerPaymentInstrument

  """The time that the payment method was revoked."""
  revokedAt: DateTime

  """The revocation reason for this payment method."""
  revokedReason: CustomerPaymentMethodRevocationReason

  """List Subscription Contracts."""
  subscriptionContracts(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SubscriptionContractConnection!
}

"An auto-generated type for paginating through multiple CustomerPaymentMethods.\n"
type CustomerPaymentMethodConnection {
  """A list of edges."""
  edges: [CustomerPaymentMethodEdge!]!

  """A list of the nodes contained in CustomerPaymentMethodEdge."""
  nodes: [CustomerPaymentMethod!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `customerPaymentMethodCreditCardCreate` mutation."""
type CustomerPaymentMethodCreditCardCreatePayload {
  """The customer payment method."""
  customerPaymentMethod: CustomerPaymentMethod

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `customerPaymentMethodCreditCardUpdate` mutation."""
type CustomerPaymentMethodCreditCardUpdatePayload {
  """The customer payment method."""
  customerPaymentMethod: CustomerPaymentMethod

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type which holds one CustomerPaymentMethod and a cursor during pagination.\n"
type CustomerPaymentMethodEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CustomerPaymentMethodEdge."""
  node: CustomerPaymentMethod!
}

"""Return type for `customerPaymentMethodGetUpdateUrl` mutation."""
type CustomerPaymentMethodGetUpdateUrlPayload {
  """The URL to redirect the customer to update the payment method."""
  updatePaymentMethodUrl: URL

  """The list of errors that occurred from executing the mutation."""
  userErrors: [CustomerPaymentMethodGetUpdateUrlUserError!]!
}

"""
An error that occurs during the execution of `CustomerPaymentMethodGetUpdateUrl`.
"""
type CustomerPaymentMethodGetUpdateUrlUserError implements DisplayableError {
  """The error code."""
  code: CustomerPaymentMethodGetUpdateUrlUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `CustomerPaymentMethodGetUpdateUrlUserError`.
"""
enum CustomerPaymentMethodGetUpdateUrlUserErrorCode {
  """Customer doesn't exist."""
  CUSTOMER_DOES_NOT_EXIST

  """Invalid payment instrument."""
  INVALID_INSTRUMENT

  """Payment method doesn't exist."""
  PAYMENT_METHOD_DOES_NOT_EXIST

  """Too many requests."""
  TOO_MANY_REQUESTS
}

"""
Return type for `customerPaymentMethodPaypalBillingAgreementCreate` mutation.
"""
type CustomerPaymentMethodPaypalBillingAgreementCreatePayload {
  """The customer payment method."""
  customerPaymentMethod: CustomerPaymentMethod

  """The list of errors that occurred from executing the mutation."""
  userErrors: [CustomerPaymentMethodUserError!]!
}

"""
Return type for `customerPaymentMethodPaypalBillingAgreementUpdate` mutation.
"""
type CustomerPaymentMethodPaypalBillingAgreementUpdatePayload {
  """The customer payment method."""
  customerPaymentMethod: CustomerPaymentMethod

  """The list of errors that occurred from executing the mutation."""
  userErrors: [CustomerPaymentMethodUserError!]!
}

"""Return type for `customerPaymentMethodRemoteCreate` mutation."""
type CustomerPaymentMethodRemoteCreatePayload {
  """The customer payment method."""
  customerPaymentMethod: CustomerPaymentMethod

  """The list of errors that occurred from executing the mutation."""
  userErrors: [CustomerPaymentMethodRemoteUserError!]!
}

"""
Return type for `customerPaymentMethodRemoteCreditCardCreate` mutation.
"""
type CustomerPaymentMethodRemoteCreditCardCreatePayload {
  """The customer payment method."""
  customerPaymentMethod: CustomerPaymentMethod

  """The list of errors that occurred from executing the mutation."""
  userErrors: [CustomerPaymentMethodUserError!]!
}

"Input for a remote gateway payment method, only one remote reference permitted.\n"
input CustomerPaymentMethodRemoteInput {
  "The input fields for a remote authorize net customer profile.\n"
  authorizeNetCustomerPaymentProfile: RemoteAuthorizeNetCustomerPaymentProfileInput

  """The input fields for a remote Braintree customer profile."""
  braintreePaymentMethod: RemoteBraintreePaymentMethodInput

  "Input containing the fields for a remote stripe payment method.\n"
  stripePaymentMethod: RemoteStripePaymentMethodInput
}

"""Represents an error in the input of a mutation."""
type CustomerPaymentMethodRemoteUserError implements DisplayableError {
  """The error code."""
  code: CustomerPaymentMethodRemoteUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `CustomerPaymentMethodRemoteUserError`.
"""
enum CustomerPaymentMethodRemoteUserErrorCode {
  """Authorize.net is not enabled for subscriptions."""
  AUTHORIZE_NET_NOT_ENABLED_FOR_SUBSCRIPTIONS

  """Braintree is not enabled for subscriptions."""
  BRAINTREE_NOT_ENABLED_FOR_SUBSCRIPTIONS

  """Exactly one remote reference is required."""
  EXACTLY_ONE_REMOTE_REFERENCE_REQUIRED

  """The input value is invalid."""
  INVALID

  """The input value needs to be blank."""
  PRESENT

  """The input value is already taken."""
  TAKEN
}

"""The revocation reason types for a customer payment method."""
enum CustomerPaymentMethodRevocationReason {
  """The Authorize.net payment gateway is not enabled."""
  AUTHORIZE_NET_GATEWAY_NOT_ENABLED

  """
  Authorize.net did not return any payment methods. Make sure that the correct Authorize.net account is linked.
  """
  AUTHORIZE_NET_RETURNED_NO_PAYMENT_METHOD

  """The credit card failed to update."""
  FAILED_TO_UPDATE_CREDIT_CARD

  """The payment method was manually revoked."""
  MANUALLY_REVOKED

  """
  The payment method was replaced with an existing payment method. The associated contracts have been migrated to the other payment method.
  """
  MERGED

  """Failed to contact the Stripe API."""
  STRIPE_API_AUTHENTICATION_ERROR

  """Invalid request. Failed to retrieve payment method from Stripe."""
  STRIPE_API_INVALID_REQUEST_ERROR

  """The Stripe payment gateway is not enabled."""
  STRIPE_GATEWAY_NOT_ENABLED

  """The Stripe payment method type should be card."""
  STRIPE_PAYMENT_METHOD_NOT_CARD

  """
  Stripe did not return any payment methods. Make sure that the correct Stripe account is linked.
  """
  STRIPE_RETURNED_NO_PAYMENT_METHOD
}

"""Return type for `customerPaymentMethodRevoke` mutation."""
type CustomerPaymentMethodRevokePayload {
  """The ID of the revoked customer payment method."""
  revokedCustomerPaymentMethodId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `customerPaymentMethodSendUpdateEmail` mutation."""
type CustomerPaymentMethodSendUpdateEmailPayload {
  """The customer to whom an update payment method email was sent."""
  customer: Customer

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Represents an error in the input of a mutation."""
type CustomerPaymentMethodUserError implements DisplayableError {
  """The error code."""
  code: CustomerPaymentMethodUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `CustomerPaymentMethodUserError`.
"""
enum CustomerPaymentMethodUserErrorCode {
  """The input value is invalid."""
  INVALID

  """The input value needs to be blank."""
  PRESENT

  """The input value is already taken."""
  TAKEN
}

"""Represents a PayPal instrument for customer payment method."""
type CustomerPaypalBillingAgreement {
  """The billing address of this payment method."""
  billingAddress: CustomerPaymentInstrumentBillingAddress

  """Whether the PayPal billing agreement is inactive."""
  inactive: Boolean!

  """
  Whether the payment method can be revoked.The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!

  """The customers's PayPal account email address."""
  paypalAccountEmail: String
}

"A phone number.\n"
type CustomerPhoneNumber {
  """Whether the customer has subscribed to SMS marketing material."""
  marketingState: CustomerSmsMarketingState!

  """A customer's phone number."""
  phoneNumber: String!
}

"""The valid tiers for the predicted spend of a customer with a shop."""
enum CustomerPredictedSpendTier {
  "The customer's spend is higher than the 70th percentile of the shop's customer sales.\n"
  HIGH

  "The customer's spend is lower than the 10th percentile of the shop's customer sales, including customers who didn't repurchase.\n"
  LOW

  "The customer's spend is between the 10th and 70th percentile of the shop's customer sales.\n"
  MEDIUM
}

"The possible product subscription states for a customer, as defined by the customer's subscription contracts.\n"
enum CustomerProductSubscriberStatus {
  "The customer has at least one active subscription contract.\n"
  ACTIVE

  "The customer's last subscription contract was cancelled and there are no other active or paused\nsubscription contracts.\n"
  CANCELLED

  "The customer's last subscription contract expired and there are no other active or paused\nsubscription contracts.\n"
  EXPIRED

  "The customer's last subscription contract failed and there are no other active or paused\nsubscription contracts.\n"
  FAILED

  "The customer has never had a subscription contract.\n"
  NEVER_SUBSCRIBED

  "The customer has at least one paused subscription contract and there are no other active\nsubscription contracts.\n"
  PAUSED
}

"""Return type for `customerRemoveTaxExemptions` mutation."""
type CustomerRemoveTaxExemptionsPayload {
  """The updated customer."""
  customer: Customer

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `customerReplaceTaxExemptions` mutation."""
type CustomerReplaceTaxExemptionsPayload {
  """The updated customer."""
  customer: Customer

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""The set of valid sort keys for the CustomerSavedSearch query."""
enum CustomerSavedSearchSortKeys {
  """Sort by the `id` value."""
  ID

  """Sort by the `name` value."""
  NAME

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"The member of a segment.\n"
type CustomerSegmentMember {
  """The total amount of money that the member has spent on orders."""
  amountSpent: MoneyV2

  """The member's default address."""
  defaultAddress: MailingAddress

  """The member's default email address."""
  defaultEmailAddress: CustomerEmailAddress

  """The member's default phone number."""
  defaultPhoneNumber: CustomerPhoneNumber

  """
  The full name of the member, which is based on the values of the `first_name` and `last_name` fields. If the member's first name and last name aren't available, then the customer's email address is used. If the customer's email address isn't available, then the customer's phone number is used.
  """
  displayName: String!

  """The member's first name."""
  firstName: String

  """The member’s ID."""
  id: ID!

  """The member's last name."""
  lastName: String

  """The ID of the member's most recent order."""
  lastOrderId: ID

  """A note about the member."""
  note: String

  """The total number of orders that the member has made."""
  numberOfOrders: UnsignedInt64
}

"""The connection type for the `CustomerSegmentMembers` object."""
type CustomerSegmentMemberConnection {
  """A list of edges."""
  edges: [CustomerSegmentMemberEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The statistics for a given segment."""
  statistics: SegmentStatistics!
}

"An auto-generated type which holds one CustomerSegmentMember and a cursor during pagination.\n"
type CustomerSegmentMemberEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CustomerSegmentMemberEdge."""
  node: CustomerSegmentMember!
}

"""Represents a Shop Pay card instrument for customer payment method."""
type CustomerShopPayAgreement {
  """Whether the card is about to expire."""
  expiresSoon: Boolean!

  """The expiry month of the card."""
  expiryMonth: Int!

  """The expiry year of the card."""
  expiryYear: Int!

  """Whether the Shop Pay billing agreement is inactive."""
  inactive: Boolean!

  """
  The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!

  """The last 4 digits of the card."""
  lastDigits: String!

  """The masked card number with only the last 4 digits displayed."""
  maskedNumber: String!

  """The name of the card holder."""
  name: String!
}

"""
An error that occurs during execution of an SMS marketing consent mutation.
"""
type CustomerSmsMarketingConsentError implements DisplayableError {
  """The error code."""
  code: CustomerSmsMarketingConsentErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `CustomerSmsMarketingConsentError`.
"""
enum CustomerSmsMarketingConsentErrorCode {
  """The input value isn't included in the list."""
  INCLUSION

  """Unexpected internal error happened."""
  INTERNAL_ERROR

  """The input value is invalid."""
  INVALID

  """Missing a required argument."""
  MISSING_ARGUMENT
}

"""
The marketing consent information when the customer consented to
        receiving marketing material by SMS.
"""
input CustomerSmsMarketingConsentInput {
  "The date and time when the customer consented to receive marketing material by SMS.\nIf no date is provided, then the date and time when the consent information was sent is used.\n"
  consentUpdatedAt: DateTime

  "The marketing subscription opt-in level that was set when the customer consented to receive marketing information.\n"
  marketingOptInLevel: CustomerMarketingOptInLevel

  """The current SMS marketing state for the customer."""
  marketingState: CustomerSmsMarketingState!
}

"The record of when a customer consented to receive marketing material by SMS.\n\nThe customer's consent state reflects the record with the most recent date when consent was updated.\n"
type CustomerSmsMarketingConsentState {
  """
  The source from which the SMS marketing information for the customer was collected.
  """
  consentCollectedFrom: CustomerConsentCollectedFrom

  "The date and time when the customer consented to receive marketing material by SMS.\nIf no date is provided, then the date and time when the consent information was sent is used.\n"
  consentUpdatedAt: DateTime

  "The marketing subscription opt-in level that was set when the customer consented to receive marketing information.\n"
  marketingOptInLevel: CustomerMarketingOptInLevel!

  """The current SMS marketing state for the customer."""
  marketingState: CustomerSmsMarketingState!
}

"The SMS marketing consent information to update for a given customer ID.\n"
input CustomerSmsMarketingConsentUpdateInput {
  """
  The ID of the customer to update the SMS marketing consent information for. The customer must have a unique phone number associated to the record. If not, add the phone number using the `customerUpdate` mutation first.
  """
  customerId: ID!

  """
  The marketing consent information when the customer consented to receiving marketing material by SMS.
  """
  smsMarketingConsent: CustomerSmsMarketingConsentInput!
}

"""Return type for `customerSmsMarketingConsentUpdate` mutation."""
type CustomerSmsMarketingConsentUpdatePayload {
  "The updated customer.\n"
  customer: Customer

  """The list of errors that occurred from executing the mutation."""
  userErrors: [CustomerSmsMarketingConsentError!]!
}

"The valid SMS marketing states for a customer’s phone number.\n"
enum CustomerSmsMarketingState {
  "The customer hasn't subscribed to SMS marketing.\n"
  NOT_SUBSCRIBED

  "The customer is in the process of subscribing to SMS marketing.\n"
  PENDING

  "The customer's personal data is erased. This value is internally-set and read-only.\n"
  REDACTED

  "The customer is subscribed to SMS marketing.\n"
  SUBSCRIBED

  "The customer isn't currently subscribed to SMS marketing but was previously subscribed.\n"
  UNSUBSCRIBED
}

"""The set of valid sort keys for the Customer query."""
enum CustomerSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  """Sort by the `last_order_date` value."""
  LAST_ORDER_DATE

  """Sort by the `location` value."""
  LOCATION

  """Sort by the `name` value."""
  NAME

  """Sort by the `orders_count` value."""
  ORDERS_COUNT

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE

  """Sort by the `total_spent` value."""
  TOTAL_SPENT

  """Sort by the `updated_at` value."""
  UPDATED_AT
}

"""The valid values for the state of a customer's account with a shop."""
enum CustomerState {
  """The customer declined the email invite to create an account."""
  DECLINED

  """
  The customer doesn't have an active account. Customer accounts can be disabled from the Shopify admin at any time.
  """
  DISABLED

  """The customer has created an account."""
  ENABLED

  """The customer has received an email invite to create an account."""
  INVITED
}

"""A customer's computed statistics."""
type CustomerStatistics {
  """The predicted spend tier of a customer with a shop."""
  predictedSpendTier: CustomerPredictedSpendTier
}

"""Return type for `customerUpdateDefaultAddress` mutation."""
type CustomerUpdateDefaultAddressPayload {
  """The customer whose address was updated."""
  customer: Customer

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `customerUpdate` mutation."""
type CustomerUpdatePayload {
  """The updated customer."""
  customer: Customer

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""
Represents a customer's session visiting a shop's online store, including information about the marketing activity attributed to starting the session.
"""
type CustomerVisit implements CustomerMoment & Node {
  """A globally-unique identifier."""
  id: ID!

  """URL of the first page the customer landed on for the session."""
  landingPage: URL

  """
  Landing page information with URL linked in HTML. For example, the first page the customer visited was store.myshopify.com/products/1.
  """
  landingPageHtml: HTML

  "Represent actions taken by an app, on behalf of a merchant,\nto market Shopify resources such as products, collections, and discounts.\n"
  marketingEvent: MarketingEvent

  """The date and time when the customer's session occurred."""
  occurredAt: DateTime!

  "Marketing referral code from the link that the customer clicked to visit the store.\nSupports the following URL attributes: _ref_, _source_, or _r_.\nFor example, if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.\n"
  referralCode: String

  """Referral information with URLs linked in HTML."""
  referralInfoHtml: FormattedString!

  "Webpage where the customer clicked a link that sent them to the online store.\nFor example, _https://randomblog.com/page1_ or _android-app://com.google.android.gm_.\n"
  referrerUrl: URL

  "Source from which the customer visited the store, such as a platform (Facebook, Google), email, direct,\na website domain, QR code, or unknown.\n"
  source: String!

  """Describes the source explicitly for first or last session."""
  sourceDescription: String

  """Type of marketing tactic."""
  sourceType: MarketingTactic

  """
  A set of UTM parameters gathered from the URL parameters of the referrer.
  """
  utmParameters: UTMParameters
}

"Represents an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)-encoded date string.\nFor example, September 7, 2019 is represented as `\"2019-07-16\"`.\n"
scalar Date

"Represents an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)-encoded date and time string.\nFor example, 3:50 pm on September 7, 2019 in the time zone of UTC (Coordinated Universal Time) is\nrepresented as `\"2019-09-07T15:50:00Z`\".\n"
scalar DateTime

"""Days of the week from Monday to Sunday."""
enum DayOfTheWeek {
  """Friday."""
  FRIDAY

  """Monday."""
  MONDAY

  """Saturday."""
  SATURDAY

  """Sunday."""
  SUNDAY

  """Thursday."""
  THURSDAY

  """Tuesday."""
  TUESDAY

  """Wednesday."""
  WEDNESDAY
}

"A signed decimal number, which supports arbitrary precision and is serialized as a string.\n\nExample values: `\"29.99\"`, `\"29.999\"`.\n"
scalar Decimal

"A token that delegates a set of scopes from the original permission.\n\nTo learn more about creating delegate access tokens, refer to\n[Delegate OAuth access tokens to subsystems]\n(https://shopify.dev/apps/auth/oauth/delegate-access-tokens).\n"
type DelegateAccessToken {
  """The list of permissions associated with the token."""
  accessScopes: [String!]!

  """The issued delegate access token."""
  accessToken: String!

  """The date and time when the delegate access token was created."""
  createdAt: DateTime!
}

"""Return type for `delegateAccessTokenCreate` mutation."""
type DelegateAccessTokenCreatePayload {
  """The delegate access token."""
  delegateAccessToken: DelegateAccessToken

  """The user's shop."""
  shop: Shop!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DelegateAccessTokenCreateUserError!]!
}

"""
An error that occurs during the execution of `DelegateAccessTokenCreate`.
"""
type DelegateAccessTokenCreateUserError implements DisplayableError {
  """The error code."""
  code: DelegateAccessTokenCreateUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `DelegateAccessTokenCreateUserError`.
"""
enum DelegateAccessTokenCreateUserErrorCode {
  """The parent access token can't be a delegate token."""
  DELEGATE_ACCESS_TOKEN

  """The access scope can't be empty."""
  EMPTY_ACCESS_SCOPE

  """The delegate token can't expire after the parent token."""
  EXPIRES_AFTER_PARENT

  """The expires_in value must be greater than 0."""
  NEGATIVE_EXPIRES_IN

  """Persistence failed."""
  PERSISTENCE_FAILED

  """The parent access token can't have a refresh token."""
  REFRESH_TOKEN

  """Unknown scopes."""
  UNKNOWN_SCOPES
}

"""The input fields for a delegate access token."""
input DelegateAccessTokenInput {
  """The list of scopes that will be delegated to the new access token."""
  delegateAccessScope: [String!]!

  """
  The amount of time, in seconds, after which the delegate access token is no longer valid.
  """
  expiresIn: Int
}

"Deletion events chronicle the destruction of resources (e.g. products and collections).\nOnce deleted, the deletion event is the only trace of the original's existence,\nas the resource itself has been removed and can no longer be accessed.\n"
type DeletionEvent {
  """
  The date and time when the deletion event for the related resource was generated.
  """
  occurredAt: DateTime!

  """The id of the resource that was deleted."""
  subjectId: ID!

  """The type of resource that was deleted."""
  subjectType: DeletionEventSubjectType!
}

"An auto-generated type for paginating through multiple DeletionEvents.\n"
type DeletionEventConnection {
  """A list of edges."""
  edges: [DeletionEventEdge!]!

  """A list of the nodes contained in DeletionEventEdge."""
  nodes: [DeletionEvent!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one DeletionEvent and a cursor during pagination.\n"
type DeletionEventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DeletionEventEdge."""
  node: DeletionEvent!
}

"""The set of valid sort keys for the DeletionEvent query."""
enum DeletionEventSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"""The supported subject types of deletion events."""
enum DeletionEventSubjectType {
  COLLECTION
  PRODUCT
}

"""
A shipping service and a list of countries that the service is available for.
"""
type DeliveryAvailableService {
  """The countries the service provider ships to."""
  countries: DeliveryCountryCodesOrRestOfWorld!

  """The name of the service."""
  name: String!
}

"""A shipping service provider or a carrier account."""
type DeliveryCarrierService implements Node {
  """The list of services offered for given destinations."""
  availableServicesForCountries(
    """The country codes of the destinations."""
    countryCodes: [CountryCode!]

    """The locations of the possible origins."""
    origins: [ID!]

    """Whether to use 'Rest of World' as the destination."""
    restOfWorld: Boolean!
  ): [DeliveryAvailableService!]!

  """
  The properly formatted name of the shipping service provider, ready to display.
  """
  formattedName: String

  """The logo of the service provider."""
  icon: Image!

  """A globally-unique identifier."""
  id: ID!

  """The name of the shipping service provider."""
  name: String
}

"""A carrier service and the associated list of shop locations."""
type DeliveryCarrierServiceAndLocations {
  """The carrier service."""
  carrierService: DeliveryCarrierService!

  """The list of locations that support this carrier service."""
  locations: [Location!]!
}

"""
A condition that must pass for a delivery method definition to be applied to an order.
"""
type DeliveryCondition implements Node {
  """The value (weight or price) that the condition field is compared to."""
  conditionCriteria: DeliveryConditionCriteria!

  """The field to compare the criterion value against, using the operator."""
  field: DeliveryConditionField!

  """A globally-unique identifier."""
  id: ID!

  """The operator to compare the field and criterion value."""
  operator: DeliveryConditionOperator!
}

"""The value (weight or price) that the condition field is compared to."""
union DeliveryConditionCriteria = MoneyV2 | Weight

"""The field type that the condition will be applied to."""
enum DeliveryConditionField {
  """The condition will check against the total price of the order."""
  TOTAL_PRICE

  """The condition will check against the total weight of the order."""
  TOTAL_WEIGHT
}

"""The operator to use to determine if the condition passes."""
enum DeliveryConditionOperator {
  """
  The condition will check whether the field is greater than or equal to the criterion.
  """
  GREATER_THAN_OR_EQUAL_TO

  """
  The condition will check if the field is less than or equal to the criterion.
  """
  LESS_THAN_OR_EQUAL_TO
}

"""A country that is used to define a shipping zone."""
type DeliveryCountry implements Node {
  "A two-letter country code in ISO 3166-1 alpha-2 standard.\nIt also includes a flag indicating whether the country should be\na part of the 'Rest Of World' shipping zone.\n"
  code: DeliveryCountryCodeOrRestOfWorld!

  """A globally-unique identifier."""
  id: ID!

  """The full name of the country."""
  name: String!

  """The list of regions associated with this country."""
  provinces: [DeliveryProvince!]!

  """
  The translated name of the country. The translation returned is based on the system's locale.
  """
  translatedName: String!
}

"""The country details and the associated shipping zone."""
type DeliveryCountryAndZone {
  """The country details."""
  country: DeliveryCountry!

  """The name of the shipping zone."""
  zone: String!
}

"The country code and whether the country is a part of the 'Rest Of World' shipping zone.\n"
type DeliveryCountryCodeOrRestOfWorld {
  """The country code in the ISO 3166-1 alpha-2 format."""
  countryCode: CountryCode

  """Whether the country is a part of the 'Rest of World' shipping zone."""
  restOfWorld: Boolean!
}

"The list of country codes and information whether the countries\nare a part of the 'Rest Of World' shipping zone.\n"
type DeliveryCountryCodesOrRestOfWorld {
  """List of applicable country codes in the ISO 3166-1 alpha-2 format."""
  countryCodes: [CountryCode!]!

  """Whether the countries are a part of the 'Rest of World' shipping zone."""
  restOfWorld: Boolean!
}

"""The input fields to specify a country."""
input DeliveryCountryInput {
  """The country code of the country in the ISO 3166-1 alpha-2 format."""
  code: CountryCode

  """Associate all available provinces with this country."""
  includeAllProvinces: Boolean

  """The regions associated with this country."""
  provinces: [DeliveryProvinceInput!]

  """Whether the country is a part of the 'Rest of World' shipping zone."""
  restOfWorld: Boolean
}

"""
Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned.
"""
type DeliveryLegacyModeBlocked {
  """
  Whether the shop can convert to full multi-location delivery profiles mode.
  """
  blocked: Boolean!

  """
  The reasons why the shop is blocked from converting to full multi-location delivery profiles mode.
  """
  reasons: [DeliveryLegacyModeBlockedReason!]
}

"""
Reasons the shop is blocked from converting to full multi-location delivery profiles mode.
"""
enum DeliveryLegacyModeBlockedReason {
  """
  Multi-Location mode is disabled. The shop can't convert to full multi-location delivery profiles mode.
  """
  MULTI_LOCATION_DISABLED @deprecated(reason: "All shops are now using multi-location mode.")

  """There are no locations for this store that can fulfill online orders."""
  NO_LOCATIONS_FULFILLING_ONLINE_ORDERS
}

"A location group is a collection of active locations. They share zones and delivery methods across delivery\nprofiles.\n"
type DeliveryLocationGroup implements Node {
  """A globally-unique identifier."""
  id: ID!

  """A list of active locations that are part of this location group."""
  locations(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """If true, also include the locations that are deactivated."""
    includeInactive: Boolean = false

    """If true, also include the legacy locations of fulfillment services."""
    includeLegacy: Boolean = false

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `active`\n - `address1`\n - `address2`\n - `city`\n - `country`\n - `legacy`\n - `name`\n - `province`\n - `zip`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: LocationSortKeys = NAME
  ): LocationConnection!
}

"""
Links a location group with a zone and the associated method definitions.
"""
type DeliveryLocationGroupZone {
  """The number of method definitions for the zone."""
  methodDefinitionCounts: DeliveryMethodDefinitionCounts!

  """The method definitions associated to a zone and location group."""
  methodDefinitions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Return only eligible or ineligible method definitions."""
    eligible: Boolean

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: MethodDefinitionSortKeys = ID

    """Return only merchant or participant method definitions."""
    type: DeliveryMethodDefinitionType
  ): DeliveryMethodDefinitionConnection!

  """The zone associated to a location group."""
  zone: DeliveryZone!
}

"An auto-generated type for paginating through multiple DeliveryLocationGroupZones.\n"
type DeliveryLocationGroupZoneConnection {
  """A list of edges."""
  edges: [DeliveryLocationGroupZoneEdge!]!

  """A list of the nodes contained in DeliveryLocationGroupZoneEdge."""
  nodes: [DeliveryLocationGroupZone!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one DeliveryLocationGroupZone and a cursor during pagination.\n"
type DeliveryLocationGroupZoneEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DeliveryLocationGroupZoneEdge."""
  node: DeliveryLocationGroupZone!
}

"""
The input fields for a delivery zone associated to a location group and profile.
"""
input DeliveryLocationGroupZoneInput {
  """A list of countries to associate with the zone."""
  countries: [DeliveryCountryInput!]

  """A globally-unique identifier of the zone."""
  id: ID

  """A list of method definitions to create."""
  methodDefinitionsToCreate: [DeliveryMethodDefinitionInput!]

  """A list of method definitions to update."""
  methodDefinitionsToUpdate: [DeliveryMethodDefinitionInput!]

  """The name of the zone."""
  name: String
}

"""The delivery method used by a fulfillment order."""
type DeliveryMethod implements Node {
  """A globally-unique identifier."""
  id: ID!

  """
  The maximum date and time by which the delivery is expected to be completed.
  """
  maxDeliveryDateTime: DateTime

  """The type of the delivery method."""
  methodType: DeliveryMethodType!

  """
  The minimum date and time by which the delivery is expected to be completed.
  """
  minDeliveryDateTime: DateTime
}

"A method definition contains the delivery rate and the conditions that must be met for the method to be\napplied.\n"
type DeliveryMethodDefinition implements Node {
  """Whether this method definition is active."""
  active: Boolean!

  """The description of the method definition."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """
  The method conditions that must pass for this method definition to be applied to an order.
  """
  methodConditions: [DeliveryCondition!]!

  """The name of the method definition."""
  name: String!

  """
  The provided rate for this method definition, from a rate definition or participant.
  """
  rateProvider: DeliveryRateProvider!
}

"An auto-generated type for paginating through multiple DeliveryMethodDefinitions.\n"
type DeliveryMethodDefinitionConnection {
  """A list of edges."""
  edges: [DeliveryMethodDefinitionEdge!]!

  """A list of the nodes contained in DeliveryMethodDefinitionEdge."""
  nodes: [DeliveryMethodDefinition!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"The number of method definitions for a zone, separated into merchant-owned and participant definitions.\n"
type DeliveryMethodDefinitionCounts {
  """The number of participant method definitions for the specified zone."""
  participantDefinitionsCount: Int!

  """
  The number of merchant-defined method definitions for the specified zone.
  """
  rateDefinitionsCount: Int!
}

"An auto-generated type which holds one DeliveryMethodDefinition and a cursor during pagination.\n"
type DeliveryMethodDefinitionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DeliveryMethodDefinitionEdge."""
  node: DeliveryMethodDefinition!
}

"""The input fields for a method definition."""
input DeliveryMethodDefinitionInput {
  """Whether to use this method definition during rate calculation."""
  active: Boolean

  """A list of conditions to update on the method definition."""
  conditionsToUpdate: [DeliveryUpdateConditionInput!]

  """The description of the method definition."""
  description: String

  """
  A globally-unique identifier of the method definition. Use only when updating a method definiton.
  """
  id: ID

  """The name of the method definition."""
  name: String

  """A participant to apply to the method definition."""
  participant: DeliveryParticipantInput

  """A list of price conditions on the method definition."""
  priceConditionsToCreate: [DeliveryPriceConditionInput!]

  """A rate definition to apply to the method definition."""
  rateDefinition: DeliveryRateDefinitionInput

  """A list of weight conditions on the method definition."""
  weightConditionsToCreate: [DeliveryWeightConditionInput!]
}

"""The different types of method definitions to filter by."""
enum DeliveryMethodDefinitionType {
  """A static merchant-defined rate."""
  MERCHANT

  """A dynamic participant rate."""
  PARTICIPANT
}

"""Possible method types that a delivery method can have."""
enum DeliveryMethodType {
  """The order is delivered using a local delivery service."""
  LOCAL

  """No delivery is needed."""
  NONE

  """The order is picked up by the customer."""
  PICK_UP

  """The order is delivered to a retail store."""
  RETAIL

  """The order is shipped."""
  SHIPPING
}

"A participant defines carrier-calculated rates for shipping services\nwith a possible merchant-defined fixed fee or a percentage-of-rate fee.\n"
type DeliveryParticipant implements Node {
  "Whether to display new shipping services automatically to the customer when the service becomes available.\n"
  adaptToNewServicesFlag: Boolean!

  """The carrier used for this participant."""
  carrierService: DeliveryCarrierService!

  """The merchant-defined fixed fee for this participant."""
  fixedFee: MoneyV2

  """A globally-unique identifier."""
  id: ID!

  """
  The carrier-specific services offered by the participant, and whether each service is active.
  """
  participantServices: [DeliveryParticipantService!]!

  """The merchant-defined percentage-of-rate fee for this participant."""
  percentageOfRateFee: Float!
}

"""The input fields for a participant."""
input DeliveryParticipantInput {
  "Whether to automatically display new shipping services to the customer when a service becomes available.\n"
  adaptToNewServices: Boolean

  """The ID of the carrier service for this participant."""
  carrierServiceId: ID

  """The fixed feed that is defined by the merchant for this participant."""
  fixedFee: MoneyInput

  """The ID of the participant."""
  id: ID

  """The list of shipping services offered by the participant."""
  participantServices: [DeliveryParticipantServiceInput!]

  """The merchant-defined percentage-of-rate fee for this participant."""
  percentageOfRateFee: Float
}

"""A mail service provided by the participant."""
type DeliveryParticipantService {
  """Whether the service is active."""
  active: Boolean!

  """The name of the service."""
  name: String!
}

"""The input fields for a shipping service provided by a participant."""
input DeliveryParticipantServiceInput {
  """Whether the service is active."""
  active: Boolean!

  """The name of the service."""
  name: String!
}

"""
The input fields for a price-based condition of a delivery method definition.
"""
input DeliveryPriceConditionInput {
  """The monetary value to compare the price of an order to."""
  criteria: MoneyInput

  """The operator to use for comparison."""
  operator: DeliveryConditionOperator
}

"""
How many product variants are in a profile. This count is capped at 500.
"""
type DeliveryProductVariantsCount {
  """Whether the count has reached the cap of 500."""
  capped: Boolean!

  """The product variant count."""
  count: Int!
}

"A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones.\n"
type DeliveryProfile implements Node {
  """The number of active shipping rates for the profile."""
  activeMethodDefinitionsCount: Int!

  """Whether this is the default profile."""
  default: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """
  Whether this shop has enabled legacy compatibility mode for delivery profiles.
  """
  legacyMode: Boolean!

  """The number of locations without rates defined."""
  locationsWithoutRatesCount: Int!

  """The name of the delivery profile."""
  name: String!

  """The number of active origin locations for the profile."""
  originLocationCount: Int!

  """
  The number of product variants for this profile. The count for the default profile is not supported and will return -1.
  """
  productVariantsCount: Int! @deprecated(reason: "Use `productVariantsCountV2` instead")

  """How many product variants are in this profile."""
  productVariantsCountV2: DeliveryProductVariantsCount!

  """The products and variants associated with this profile."""
  profileItems(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): DeliveryProfileItemConnection!

  """The location groups and associated zones using this profile."""
  profileLocationGroups: [DeliveryProfileLocationGroup!]!

  """Selling plan groups associated with the specified delivery profile."""
  sellingPlanGroups(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SellingPlanGroupConnection!

  """
  List of locations that have not been assigned to a location group for this profile.
  """
  unassignedLocations: [Location!]!

  """The number of countries with active rates to deliver to."""
  zoneCountryCount: Int!
}

"An auto-generated type for paginating through multiple DeliveryProfiles.\n"
type DeliveryProfileConnection {
  """A list of edges."""
  edges: [DeliveryProfileEdge!]!

  """A list of the nodes contained in DeliveryProfileEdge."""
  nodes: [DeliveryProfile!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one DeliveryProfile and a cursor during pagination.\n"
type DeliveryProfileEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DeliveryProfileEdge."""
  node: DeliveryProfile!
}

"""The input fields for a delivery profile."""
input DeliveryProfileInput {
  """The list of condition IDs to delete."""
  conditionsToDelete: [ID!]

  """The list of location groups to be created in the delivery profile."""
  locationGroupsToCreate: [DeliveryProfileLocationGroupInput!]

  """The list of location groups to be deleted from the delivery profile."""
  locationGroupsToDelete: [ID!]

  """The list of location groups to be updated in the delivery profile."""
  locationGroupsToUpdate: [DeliveryProfileLocationGroupInput!]

  """The list of method definition IDs to delete."""
  methodDefinitionsToDelete: [ID!]

  """The name of the delivery profile."""
  name: String

  """The list of location groups associated with the delivery profile."""
  profileLocationGroups: [DeliveryProfileLocationGroupInput!]

  """
  The list of selling plan groups to be associated with the delivery profile.
  """
  sellingPlanGroupsToAssociate: [ID!]

  """
  The list of selling plan groups to be dissociated with the delivery profile.
  """
  sellingPlanGroupsToDissociate: [ID!]

  """
  The list of product variant IDs to be associated with the delivery profile.
  """
  variantsToAssociate: [ID!]

  "The list of product variant IDs to be dissociated from the delivery profile.\nThe dissociated product variants are moved back to the default delivery profile.\n"
  variantsToDissociate: [ID!]

  """The list of zone IDs to delete."""
  zonesToDelete: [ID!]
}

"""
A product and the subset of associated variants that are part of this delivery profile.
"""
type DeliveryProfileItem implements Node {
  """A globally-unique identifier."""
  id: ID!

  """A product associated with this profile."""
  product: Product!

  """The product variants associated with this delivery profile."""
  variants(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductVariantConnection!
}

"An auto-generated type for paginating through multiple DeliveryProfileItems.\n"
type DeliveryProfileItemConnection {
  """A list of edges."""
  edges: [DeliveryProfileItemEdge!]!

  """A list of the nodes contained in DeliveryProfileItemEdge."""
  nodes: [DeliveryProfileItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one DeliveryProfileItem and a cursor during pagination.\n"
type DeliveryProfileItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DeliveryProfileItemEdge."""
  node: DeliveryProfileItem!
}

"""
Links a location group with zones. Both are associated to a delivery profile.
"""
type DeliveryProfileLocationGroup {
  """
  The countries already selected in any zone for the specified location group.
  """
  countriesInAnyZone: [DeliveryCountryAndZone!]!

  """The collection of locations that make up the specified location group."""
  locationGroup: DeliveryLocationGroup!

  """The applicable zones associated to the specified location group."""
  locationGroupZones(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): DeliveryLocationGroupZoneConnection!
}

"""
The input fields for a location group associated to a delivery profile.
"""
input DeliveryProfileLocationGroupInput {
  """The globally-unique identifier of the delivery profile location group."""
  id: ID

  """The list of location IDs to be moved to this location group."""
  locations: [ID!]

  """The list of location group zones to create."""
  zonesToCreate: [DeliveryLocationGroupZoneInput!]

  """The list of location group zones to update."""
  zonesToUpdate: [DeliveryLocationGroupZoneInput!]
}

"""A region that is used to define a shipping zone."""
type DeliveryProvince implements Node {
  """The code of the region."""
  code: String!

  """A globally-unique identifier."""
  id: ID!

  """The full name of the region."""
  name: String!

  """
  The translated name of the region. The translation returned is based on the system's locale.
  """
  translatedName: String!
}

"""The input fields to specify a region."""
input DeliveryProvinceInput {
  """The code of the region."""
  code: String!
}

"""
The merchant-defined rate of the [DeliveryMethodDefinition](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryMethodDefinition).
"""
type DeliveryRateDefinition implements Node {
  """A globally-unique identifier."""
  id: ID!

  """The price of this rate."""
  price: MoneyV2!
}

"""The input fields for a rate definition."""
input DeliveryRateDefinitionInput {
  """A globally-unique identifier of the rate definition."""
  id: ID

  """The price of the rate definition."""
  price: MoneyInput!
}

"""A rate provided by a merchant-defined rate or a participant."""
union DeliveryRateProvider = DeliveryParticipant | DeliveryRateDefinition

"The `DeliverySetting` object enables you to manage shop-wide shipping settings.\nYou can enable legacy compatibility mode for the multi-location delivery profiles feature\nif the legacy mode isn't blocked.\n"
type DeliverySetting {
  """
  Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned.
  """
  legacyModeBlocked: DeliveryLegacyModeBlocked!

  """
  Enables legacy compatability mode for the multi-location delivery profiles feature.
  """
  legacyModeProfiles: Boolean!
}

"""The input fields for shop-level delivery settings."""
input DeliverySettingInput {
  """
  Whether legacy compatability mode is enabled for the multi-location delivery profiles feature.
  """
  legacyModeProfiles: Boolean
}

"""Return type for `deliverySettingUpdate` mutation."""
type DeliverySettingUpdatePayload {
  """The updated delivery shop level settings."""
  setting: DeliverySetting

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `deliveryShippingOriginAssign` mutation."""
type DeliveryShippingOriginAssignPayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""
The input fields for updating the condition of a delivery method definition.
"""
input DeliveryUpdateConditionInput {
  """The value that will be used in comparison."""
  criteria: Float

  """The unit associated with the value that will be used in comparison."""
  criteriaUnit: String

  """The property of an order that will be used in comparison."""
  field: DeliveryConditionField

  """A globally-unique identifier of the condition."""
  id: ID!

  """The operator to use for comparison."""
  operator: DeliveryConditionOperator
}

"""
The input fields for a weight-based condition of a delivery method definition.
"""
input DeliveryWeightConditionInput {
  """The weight value to compare the weight of an order to."""
  criteria: WeightInput

  """The operator to use for comparison."""
  operator: DeliveryConditionOperator
}

"A zone is a group of countries that have the same shipping rates. Customers can order products from a store only if they choose a shipping destination that's included in one of the store's zones.\n"
type DeliveryZone implements Node {
  """The list of countries within the zone."""
  countries: [DeliveryCountry!]!

  """A globally-unique identifier."""
  id: ID!

  """The name of the zone."""
  name: String!
}

"""
Digital wallet, such as Apple Pay, which can be used for accelerated checkouts.
"""
enum DigitalWallet {
  """Android Pay."""
  ANDROID_PAY

  """Apple Pay."""
  APPLE_PAY

  """Google Pay."""
  GOOGLE_PAY

  """Shopify Pay."""
  SHOPIFY_PAY
}

"""A discount."""
union Discount = DiscountAutomaticApp | DiscountAutomaticBasic | DiscountAutomaticBxgy | DiscountCodeApp | DiscountCodeBasic | DiscountCodeBxgy | DiscountCodeFreeShipping

"""
An amount that's allocated to a line based on an associated discount application.
"""
type DiscountAllocation {
  """
  The money amount that's allocated to a line based on the associated discount application.
  """
  allocatedAmount: MoneyV2! @deprecated(reason: "Use `allocatedAmountSet` instead")

  """
  The money amount that's allocated to a line based on the associated discount application in shop and presentment currencies.
  """
  allocatedAmountSet: MoneyBag!

  """The discount application that the allocated amount originated from."""
  discountApplication: DiscountApplication!
}

"""
The fixed amount value of a discount, and whether the amount is applied to each entitled item or spread evenly across the entitled items.
"""
type DiscountAmount {
  """The value of the discount."""
  amount: MoneyV2!

  """
  If true, then the discount is applied to each of the entitled items. If false, then the amount is split across all of the entitled items.
  """
  appliesOnEachItem: Boolean!
}

"""Specifies the value of the discount and how it is applied."""
input DiscountAmountInput {
  """The value of the discount."""
  amount: Decimal

  """
  If true, then the discount is applied to each of the entitled items. If false, then the amount is split across all of the entitled items.
  """
  appliesOnEachItem: Boolean
}

"Discount applications capture the intentions of a discount source at\nthe time of application on an order's line items or shipping lines.\n\nDiscount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.\n"
interface DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  "An ordered index that can be used to identify the discount application and indicate the precedence\nof the discount application for calculations.\n"
  index: Int!

  """How the discount amount is distributed on the discounted lines."""
  targetSelection: DiscountApplicationTargetSelection!

  """Whether the discount is applied on line items or shipping lines."""
  targetType: DiscountApplicationTargetType!

  """The value of the discount application."""
  value: PricingValue!
}

"""
The method by which the discount's value is allocated onto its entitled lines.
"""
enum DiscountApplicationAllocationMethod {
  """The value is spread across all entitled lines."""
  ACROSS

  """The value is applied onto every entitled line."""
  EACH

  """The value is specifically applied onto a particular line."""
  ONE @deprecated(reason: "Use ACROSS instead.")
}

"An auto-generated type for paginating through multiple DiscountApplications.\n"
type DiscountApplicationConnection {
  """A list of edges."""
  edges: [DiscountApplicationEdge!]!

  """A list of the nodes contained in DiscountApplicationEdge."""
  nodes: [DiscountApplication!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one DiscountApplication and a cursor during pagination.\n"
type DiscountApplicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DiscountApplicationEdge."""
  node: DiscountApplication!
}

"""The level at which the discount's value is applied."""
enum DiscountApplicationLevel {
  "The discount is applied at the line level.\nLine level discounts are factored into the discountedUnitPriceSet on line items.\n"
  LINE

  "The discount is applied at the order level.\nOrder level discounts are not factored into the discountedUnitPriceSet on line items.\n"
  ORDER
}

"The lines on the order to which the discount is applied, of the type defined by\nthe discount application's `targetType`. For example, the value `ENTITLED`, combined with a `targetType` of\n`LINE_ITEM`, applies the discount on all line items that are entitled to the discount.\nThe value `ALL`, combined with a `targetType` of `SHIPPING_LINE`, applies the discount on all shipping lines.\n"
enum DiscountApplicationTargetSelection {
  """The discount is allocated onto all the lines."""
  ALL

  """The discount is allocated onto only the lines that it's entitled for."""
  ENTITLED

  """The discount is allocated onto explicitly chosen lines."""
  EXPLICIT
}

"The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards.\n"
enum DiscountApplicationTargetType {
  """The discount applies onto line items."""
  LINE_ITEM

  """The discount applies onto shipping lines."""
  SHIPPING_LINE
}

"""
The type of discount associated to the automatic discount. For example, the automatic discount might offer a basic discount using a fixed percentage, or a fixed amount, on specific products from the order. The automatic discount may also be a BXGY discount, which offers customer discounts on select products if they add a specific product to their order.
"""
union DiscountAutomatic = DiscountAutomaticApp | DiscountAutomaticBasic | DiscountAutomaticBxgy

"""Return type for `discountAutomaticActivate` mutation."""
type DiscountAutomaticActivatePayload {
  """The activated automatic discount."""
  automaticDiscountNode: DiscountAutomaticNode

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""An automatic app discount."""
type DiscountAutomaticApp {
  """The app discount type providing the discount type."""
  appDiscountType: AppDiscountType!

  """Determines which discount classes the discount can combine with."""
  combinesWith: DiscountCombinesWith!

  """The class of the discount for combining purposes."""
  discountClass: DiscountClass!

  """The ID for the discount."""
  discountId: ID!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """The error history on the most recent version of the app discount."""
  errorHistory: FunctionsErrorHistory

  """The date and time when the discount starts."""
  startsAt: DateTime!

  """The status of the discount."""
  status: DiscountStatus!

  """The title of the discount."""
  title: String!
}

"""Return type for `discountAutomaticAppCreate` mutation."""
type DiscountAutomaticAppCreatePayload {
  """The created app discount."""
  automaticAppDiscount: DiscountAutomaticApp

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""The input fields to create an app discount."""
input DiscountAutomaticAppInput {
  """Determines which discount classes the discount can combine with."""
  combinesWith: DiscountCombinesWithInput

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """The ID of the function providing the app discount type."""
  functionId: String

  """Additional metafields to associate to the discount."""
  metafields: [MetafieldInput!] = []

  """The date and time when the discount starts."""
  startsAt: DateTime

  """The title of the discount."""
  title: String
}

"""Return type for `discountAutomaticAppUpdate` mutation."""
type DiscountAutomaticAppUpdatePayload {
  """The updated automatic app discount."""
  automaticAppDiscount: DiscountAutomaticApp

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""
An automatic discount that offers customers a percentage discount, or fixed amount discount, on specific products, collections, or the entire order.
"""
type DiscountAutomaticBasic {
  """
  The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
  """
  asyncUsageCount: Int!

  """Determines which discount classes the discount can combine with."""
  combinesWith: DiscountCombinesWith!

  """The date and time when the discount was created."""
  createdAt: DateTime!

  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: DiscountCustomerGets!

  """The class of the discount for combining purposes."""
  discountClass: MerchandiseDiscountClass!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: DiscountMinimumRequirement!

  """A short summary of the discount."""
  shortSummary: String!

  """The date and time when the discount starts."""
  startsAt: DateTime!

  """The status of the discount."""
  status: DiscountStatus!

  """A detailed summary of the discount."""
  summary: String!

  """The title of the discount."""
  title: String!

  """The number of times that the discount has been used."""
  usageCount: Int! @deprecated(reason: "Use `asyncUsageCount` instead")
}

"""Return type for `discountAutomaticBasicCreate` mutation."""
type DiscountAutomaticBasicCreatePayload {
  """The created automatic discount."""
  automaticDiscountNode: DiscountAutomaticNode

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""The input that's used to create or update an automatic basic discount."""
input DiscountAutomaticBasicInput {
  """Determines which discount classes the discount can combine with."""
  combinesWith: DiscountCombinesWithInput

  """Information about the qualifying items and their discount."""
  customerGets: DiscountCustomerGetsInput

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: DiscountMinimumRequirementInput

  """The date and time when the discount starts."""
  startsAt: DateTime

  """The title of the discount."""
  title: String
}

"""Return type for `discountAutomaticBasicUpdate` mutation."""
type DiscountAutomaticBasicUpdatePayload {
  """The updated automatic discount."""
  automaticDiscountNode: DiscountAutomaticNode

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""Return type for `discountAutomaticBulkDelete` mutation."""
type DiscountAutomaticBulkDeletePayload {
  """The asynchronous job removing the automatic discounts."""
  job: Job

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""
An automatic discount that offers customers a Buy X, Get Y (BXGY) discount.
"""
type DiscountAutomaticBxgy implements HasEvents & Node {
  """
  The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
  """
  asyncUsageCount: Int!

  """Determines which discount classes the discount can combine with."""
  combinesWith: DiscountCombinesWith!

  """The date and time when the discount was created."""
  createdAt: DateTime!

  """
  The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
  """
  customerBuys: DiscountCustomerBuys!

  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: DiscountCustomerGets!

  """The class of the discount for combining purposes."""
  discountClass: MerchandiseDiscountClass!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """The paginated list of events associated with the host subject."""
  events(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `comments`\n - `created_at`\n - `subject_type`\n - `verb`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """A legacy unique identifier for the discount."""
  id: ID! @deprecated(reason: "Use DiscountAutomaticNode.id instead.")

  """The date and time when the discount starts."""
  startsAt: DateTime!

  """The status of the discount."""
  status: DiscountStatus!

  """A detailed summary of the discount."""
  summary: String!

  """The title of the discount."""
  title: String!

  """The number of times that the discount has been used."""
  usageCount: Int! @deprecated(reason: "Use `asyncUsageCount` instead")

  """
  The maximum number of times that the discount can be applied to an order.
  """
  usesPerOrderLimit: Int
}

"""Return type for `discountAutomaticBxgyCreate` mutation."""
type DiscountAutomaticBxgyCreatePayload {
  """The created automatic discount."""
  automaticDiscountNode: DiscountAutomaticNode

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""
Specifies input field to create or update an automatic Buy X, Get Y (BXGY) discount.
"""
input DiscountAutomaticBxgyInput {
  """Determines which discount classes the discount can combine with."""
  combinesWith: DiscountCombinesWithInput

  """
  The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
  """
  customerBuys: DiscountCustomerBuysInput

  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: DiscountCustomerGetsInput

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """The date and time when the discount starts."""
  startsAt: DateTime

  """The title of the discount."""
  title: String

  """
  The maximum number of times that the discount can be applied to an order.
  """
  usesPerOrderLimit: UnsignedInt64
}

"""Return type for `discountAutomaticBxgyUpdate` mutation."""
type DiscountAutomaticBxgyUpdatePayload {
  """The updated automatic discount."""
  automaticDiscountNode: DiscountAutomaticNode

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"An auto-generated type for paginating through multiple DiscountAutomatics.\n"
type DiscountAutomaticConnection {
  """A list of edges."""
  edges: [DiscountAutomaticEdge!]!

  """A list of the nodes contained in DiscountAutomaticEdge."""
  nodes: [DiscountAutomatic!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `discountAutomaticDeactivate` mutation."""
type DiscountAutomaticDeactivatePayload {
  """The deactivated automatic discount."""
  automaticDiscountNode: DiscountAutomaticNode

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""Return type for `discountAutomaticDelete` mutation."""
type DiscountAutomaticDeletePayload {
  """The deleted automatic discount ID."""
  deletedAutomaticDiscountId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"An auto-generated type which holds one DiscountAutomatic and a cursor during pagination.\n"
type DiscountAutomaticEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DiscountAutomaticEdge."""
  node: DiscountAutomatic!
}

"""A node containing an automatic discount and its related events."""
type DiscountAutomaticNode implements HasEvents & HasMetafieldDefinitions & HasMetafields & Node {
  """The automatic discount object."""
  automaticDiscount: DiscountAutomatic!

  """The paginated list of events associated with the host subject."""
  events(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `comments`\n - `created_at`\n - `subject_type`\n - `verb`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """A globally-unique identifier."""
  id: ID!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The key for the metafield."""
    key: String!

    """The namespace for the metafield."""
    namespace: String!
  ): Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    "Supported filter parameters:\n - `created_at`\n - `key`\n - `namespace`\n - `owner_type`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The metafield namespace to filter by."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The key for the private metafield."""
    key: String!

    """The namespace for the private metafield."""
    namespace: String!
  ): PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter the private metafields by namespace."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PrivateMetafieldConnection!
}

"An auto-generated type for paginating through multiple DiscountAutomaticNodes.\n"
type DiscountAutomaticNodeConnection {
  """A list of edges."""
  edges: [DiscountAutomaticNodeEdge!]!

  """A list of the nodes contained in DiscountAutomaticNodeEdge."""
  nodes: [DiscountAutomaticNode!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one DiscountAutomaticNode and a cursor during pagination.\n"
type DiscountAutomaticNodeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DiscountAutomaticNodeEdge."""
  node: DiscountAutomaticNode!
}

"""The class of the discount for combining purposes."""
enum DiscountClass {
  """Combined as an order discount."""
  ORDER

  """Combined as a product discount."""
  PRODUCT

  """Combined as a shipping discount."""
  SHIPPING
}

"""
The type of discount associated with the discount code. For example, the discount code might offer a basic discount of a fixed percentage, or a fixed amount, on specific products or the order. Alternatively, the discount might offer the customer free shipping on their order. A third option is a Buy X, Get Y (BXGY) discount, which offers a customer discounts on select products if they add a specific product to their order.
"""
union DiscountCode = DiscountCodeApp | DiscountCodeBasic | DiscountCodeBxgy | DiscountCodeFreeShipping

"""Return type for `discountCodeActivate` mutation."""
type DiscountCodeActivatePayload {
  """The activated code discount."""
  codeDiscountNode: DiscountCodeNode

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""A code app discount."""
type DiscountCodeApp {
  """The app discount type providing the discount type."""
  appDiscountType: AppDiscountType!

  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean!

  """The number of times that the discount has been used."""
  asyncUsageCount: Int!

  """The number of redeem codes for the discount."""
  codeCount: Int!

  """A list of redeem codes for the discount."""
  codes(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `times_used`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: DiscountCodeSortKeys = ID
  ): DiscountRedeemCodeConnection!

  """Determines which discount classes the discount can combine with."""
  combinesWith: DiscountCombinesWith!

  """The date and time when the discount was created."""
  createdAt: DateTime!

  """The customers that can use the discount."""
  customerSelection: DiscountCustomerSelection!

  """The class of the discount for combining purposes."""
  discountClass: DiscountClass!

  """The ID for the discount."""
  discountId: ID!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """The error history on the most recent version of the discount."""
  errorHistory: FunctionsErrorHistory

  """Indicates whether there are any timeline comments on the discount."""
  hasTimelineComment: Boolean!

  """
  The number of times a discount applies on recurring purchases (subscriptions).
  """
  recurringCycleLimit: Int

  """URLs that can be used to share the discount."""
  shareableUrls: [DiscountShareableUrl!]!

  """The date and time when the discount starts."""
  startsAt: DateTime!

  """The status of the discount."""
  status: DiscountStatus!

  """The title of the discount."""
  title: String!

  """The total sales from orders where the discount was used."""
  totalSales: MoneyV2

  """The maximum number of times that the discount can be used."""
  usageLimit: Int
}

"""Return type for `discountCodeAppCreate` mutation."""
type DiscountCodeAppCreatePayload {
  """The created code app discount."""
  codeAppDiscount: DiscountCodeApp

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""The input fields to create a code app discount."""
input DiscountCodeAppInput {
  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean

  """The code to use the discount."""
  code: String

  """Determines which discount classes the discount can combine with."""
  combinesWith: DiscountCombinesWithInput

  """The customers that can use the discount."""
  customerSelection: DiscountCustomerSelectionInput

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """The ID of the function providing the app discount type."""
  functionId: String

  """Additional metafields to associate to the discount."""
  metafields: [MetafieldInput!] = []

  """The date and time when the discount starts."""
  startsAt: DateTime

  """The title of the discount."""
  title: String

  """
  The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
  """
  usageLimit: Int
}

"""Return type for `discountCodeAppUpdate` mutation."""
type DiscountCodeAppUpdatePayload {
  """The updated code app discount."""
  codeAppDiscount: DiscountCodeApp

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"Discount code applications capture the intentions of a discount code at\nthe time that it is applied onto an order.\n\nDiscount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.\n"
type DiscountCodeApplication implements DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The string identifying the discount code that was used at the time of application.
  """
  code: String!

  "An ordered index that can be used to identify the discount application and indicate the precedence\nof the discount application for calculations.\n"
  index: Int!

  """How the discount amount is distributed on the discounted lines."""
  targetSelection: DiscountApplicationTargetSelection!

  """Whether the discount is applied on line items or shipping lines."""
  targetType: DiscountApplicationTargetType!

  """The value of the discount application."""
  value: PricingValue!
}

"""
A code discount that offers customers a percentage or fixed amount discount on specific products, collections, or the entire order.
"""
type DiscountCodeBasic {
  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean!

  """The number of times that the discount has been used."""
  asyncUsageCount: Int!

  """The number of redeem codes for the discount."""
  codeCount: Int!

  """A list of redeem codes for the discount."""
  codes(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `times_used`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: DiscountCodeSortKeys = ID
  ): DiscountRedeemCodeConnection!

  """Determines which discount classes the discount can combine with."""
  combinesWith: DiscountCombinesWith!

  """The date and time when the discount was created."""
  createdAt: DateTime!

  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: DiscountCustomerGets!

  """The customers that can use the discount."""
  customerSelection: DiscountCustomerSelection!

  """The class of the discount for combining purposes."""
  discountClass: MerchandiseDiscountClass!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """Indicates whether there are any timeline comments on the discount."""
  hasTimelineComment: Boolean!

  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: DiscountMinimumRequirement

  """
  The number of times a discount applies on recurring purchases (subscriptions).
  """
  recurringCycleLimit: Int

  """URLs that can be used to share the discount."""
  shareableUrls: [DiscountShareableUrl!]!

  """A short summary of the discount."""
  shortSummary: String!

  """The date and time when the discount starts."""
  startsAt: DateTime!

  """The status of the discount."""
  status: DiscountStatus!

  """A detailed summary of the discount."""
  summary: String!

  """The title of the discount."""
  title: String!

  """The total sales from orders where the discount was used."""
  totalSales: MoneyV2

  """The maximum number of times that the discount can be used."""
  usageLimit: Int
}

"""Return type for `discountCodeBasicCreate` mutation."""
type DiscountCodeBasicCreatePayload {
  """The created code discount."""
  codeDiscountNode: DiscountCodeNode

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""The input field to create or update a basic code discount."""
input DiscountCodeBasicInput {
  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean

  """The code to use the discount."""
  code: String

  """Determines which discount classes the discount can combine with."""
  combinesWith: DiscountCombinesWithInput

  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: DiscountCustomerGetsInput

  """The customers that can use the discount."""
  customerSelection: DiscountCustomerSelectionInput

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: DiscountMinimumRequirementInput

  """
  The number of times a discount applies on recurring purchases (subscriptions).
  """
  recurringCycleLimit: Int

  """The date and time when the discount starts."""
  startsAt: DateTime

  """The title of the discount."""
  title: String

  """
  The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
  """
  usageLimit: Int
}

"""Return type for `discountCodeBasicUpdate` mutation."""
type DiscountCodeBasicUpdatePayload {
  """The updated code discount."""
  codeDiscountNode: DiscountCodeNode

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""Return type for `discountCodeBulkActivate` mutation."""
type DiscountCodeBulkActivatePayload {
  """The asynchronous job that activates the code discounts."""
  job: Job

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""Return type for `discountCodeBulkDeactivate` mutation."""
type DiscountCodeBulkDeactivatePayload {
  """The asynchronous job that deactivates the code discounts."""
  job: Job

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""Return type for `discountCodeBulkDelete` mutation."""
type DiscountCodeBulkDeletePayload {
  """The asynchronous job that deletes the code discounts."""
  job: Job

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""A code discount that offers customers a Buy X, Get Y (BXGY) discount."""
type DiscountCodeBxgy {
  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean!

  """The number of times that the discount has been used."""
  asyncUsageCount: Int!

  """The number of redeem codes for the discount."""
  codeCount: Int!

  """A list of redeem codes for the discount."""
  codes(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `times_used`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: DiscountCodeSortKeys = ID
  ): DiscountRedeemCodeConnection!

  """Determines which discount classes the discount can combine with."""
  combinesWith: DiscountCombinesWith!

  """The date and time when the discount was created."""
  createdAt: DateTime!

  """
  The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
  """
  customerBuys: DiscountCustomerBuys!

  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: DiscountCustomerGets!

  """The customers that can use the discount."""
  customerSelection: DiscountCustomerSelection!

  """The class of the discount for combining purposes."""
  discountClass: MerchandiseDiscountClass!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """Indicates whether there are any timeline comments on the discount."""
  hasTimelineComment: Boolean!

  """URLs that can be used to share the discount."""
  shareableUrls: [DiscountShareableUrl!]!

  """The date and time when the discount starts."""
  startsAt: DateTime!

  """The status of the discount."""
  status: DiscountStatus!

  """A detailed summary of the discount."""
  summary: String!

  """The title of the discount."""
  title: String!

  """The total sales from orders where the discount was used."""
  totalSales: MoneyV2

  """The maximum number of times that the discount can be used."""
  usageLimit: Int

  """
  The maximum number of times that the discount can be applied to an order.
  """
  usesPerOrderLimit: Int
}

"""Return type for `discountCodeBxgyCreate` mutation."""
type DiscountCodeBxgyCreatePayload {
  """The created code discount."""
  codeDiscountNode: DiscountCodeNode

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""Specifies input field to create or update a BXGY code discount."""
input DiscountCodeBxgyInput {
  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean

  """The code to use the discount."""
  code: String

  """Determines which discount classes the discount can combine with."""
  combinesWith: DiscountCombinesWithInput

  """
  The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
  """
  customerBuys: DiscountCustomerBuysInput

  """
  The qualifying items that will be discounted, the quantity of each one, and the total value of the discount.
  """
  customerGets: DiscountCustomerGetsInput

  """The customers that are eligible to use the discount."""
  customerSelection: DiscountCustomerSelectionInput

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """The date and time when the discount starts."""
  startsAt: DateTime

  """The title of the discount."""
  title: String

  """
  The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
  """
  usageLimit: Int

  """
  The maximum number of times that the discount can be applied to an order.
  """
  usesPerOrderLimit: Int
}

"""Return type for `discountCodeBxgyUpdate` mutation."""
type DiscountCodeBxgyUpdatePayload {
  """The updated code discount."""
  codeDiscountNode: DiscountCodeNode

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""Return type for `discountCodeDeactivate` mutation."""
type DiscountCodeDeactivatePayload {
  """The deactivated code discount."""
  codeDiscountNode: DiscountCodeNode

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""Return type for `discountCodeDelete` mutation."""
type DiscountCodeDeletePayload {
  """The deleted code discount ID."""
  deletedCodeDiscountId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""A code discount that offers customers free shipping on their order."""
type DiscountCodeFreeShipping {
  """
  Whether the discount applies on regular one-time-purchase shipping lines.
  """
  appliesOnOneTimePurchase: Boolean!

  """Whether the discount applies on subscription shipping lines."""
  appliesOnSubscription: Boolean!

  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean!

  """The number of times that the discount has been used."""
  asyncUsageCount: Int!

  """The number of redeem codes for the discount."""
  codeCount: Int!

  """A list of redeem codes for the discount."""
  codes(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `times_used`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: DiscountCodeSortKeys = ID
  ): DiscountRedeemCodeConnection!

  """Determines which discount classes the discount can combine with."""
  combinesWith: DiscountCombinesWith!

  """The date and time when the discount was created."""
  createdAt: DateTime!

  """The customers that can use the discount."""
  customerSelection: DiscountCustomerSelection!

  """A shipping destination that qualifies for the discount."""
  destinationSelection: DiscountShippingDestinationSelection!

  """The class of the discount for combining purposes."""
  discountClass: ShippingDiscountClass!

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """Indicates whether there are any timeline comments on the discount."""
  hasTimelineComment: Boolean!

  """
  The maximum shipping price amount accepted to qualify for the discount.
  """
  maximumShippingPrice: MoneyV2

  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: DiscountMinimumRequirement

  """
  The number of times a discount applies on recurring purchases (subscriptions).
  """
  recurringCycleLimit: Int

  """URLs that can be used to share the discount."""
  shareableUrls: [DiscountShareableUrl!]!

  """A short summary of the discount."""
  shortSummary: String!

  """The date and time when the discount starts."""
  startsAt: DateTime!

  """The status of the discount."""
  status: DiscountStatus!

  """A detailed summary of the discount."""
  summary: String!

  """The title of the discount."""
  title: String!

  """The total sales from orders where the discount was used."""
  totalSales: MoneyV2

  """The maximum number of times that the discount can be used."""
  usageLimit: Int
}

"""Return type for `discountCodeFreeShippingCreate` mutation."""
type DiscountCodeFreeShippingCreatePayload {
  """The created code discount."""
  codeDiscountNode: DiscountCodeNode

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""Specifies input field to create or update free shipping code discount."""
input DiscountCodeFreeShippingInput {
  """Whether the discount applies on regular one-time-purchase items."""
  appliesOnOneTimePurchase: Boolean

  """Whether the discount applies on subscription items."""
  appliesOnSubscription: Boolean

  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean

  """The code to use the discount."""
  code: String

  """
  Determines which discount classes the shipping discount can combine with.
  """
  combinesWith: DiscountCombinesWithInput

  """The customers that are eligible to use the discount."""
  customerSelection: DiscountCustomerSelectionInput

  """A list of destinations where the discount will apply."""
  destination: DiscountShippingDestinationSelectionInput

  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime

  """The maximum shipping price that qualifies for the discount."""
  maximumShippingPrice: Decimal

  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: DiscountMinimumRequirementInput

  """
  The number of times a discount applies on recurring purchases (subscriptions).
  """
  recurringCycleLimit: Int

  """The date and time when the discount starts."""
  startsAt: DateTime

  """The title of the discount."""
  title: String

  """
  The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
  """
  usageLimit: Int
}

"""Return type for `discountCodeFreeShippingUpdate` mutation."""
type DiscountCodeFreeShippingUpdatePayload {
  """The updated code discount."""
  codeDiscountNode: DiscountCodeNode

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""A node containing a code discount and its related events."""
type DiscountCodeNode implements HasEvents & HasMetafieldDefinitions & HasMetafields & Node {
  """The underlying code discount object."""
  codeDiscount: DiscountCode!

  """The paginated list of events associated with the host subject."""
  events(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `comments`\n - `created_at`\n - `subject_type`\n - `verb`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """A globally-unique identifier."""
  id: ID!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The key for the metafield."""
    key: String!

    """The namespace for the metafield."""
    namespace: String!
  ): Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    "Supported filter parameters:\n - `created_at`\n - `key`\n - `namespace`\n - `owner_type`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The metafield namespace to filter by."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The key for the private metafield."""
    key: String!

    """The namespace for the private metafield."""
    namespace: String!
  ): PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter the private metafields by namespace."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PrivateMetafieldConnection!
}

"An auto-generated type for paginating through multiple DiscountCodeNodes.\n"
type DiscountCodeNodeConnection {
  """A list of edges."""
  edges: [DiscountCodeNodeEdge!]!

  """A list of the nodes contained in DiscountCodeNodeEdge."""
  nodes: [DiscountCodeNode!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one DiscountCodeNode and a cursor during pagination.\n"
type DiscountCodeNodeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DiscountCodeNodeEdge."""
  node: DiscountCodeNode!
}

"""Return type for `discountCodeRedeemCodeBulkDelete` mutation."""
type DiscountCodeRedeemCodeBulkDeletePayload {
  """The asynchronous job that deletes the discount redeem codes."""
  job: Job

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""The set of valid sort keys for the DiscountCode query."""
enum DiscountCodeSortKeys {
  """Sort by the `code` value."""
  CODE

  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"""
A list of collections that the discount can have as a prerequisite or a list of collections to which the discount can be applied.
"""
type DiscountCollections {
  """
  The list of collections that the discount can have as a prerequisite or the list of collections to which the discount can be applied.
  """
  collections(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CollectionConnection!
}

"""Specifies the collections attached to a discount."""
input DiscountCollectionsInput {
  """Specifies list of collection ids to add."""
  add: [ID!]

  """Specifies list of collection ids to remove."""
  remove: [ID!]
}

"""Determines which discount classes the discount can combine with."""
type DiscountCombinesWith {
  """Combines with order discounts."""
  orderDiscounts: Boolean!

  """Combines with product discounts."""
  productDiscounts: Boolean!

  """Combines with shipping discounts."""
  shippingDiscounts: Boolean!
}

"""Determines which discount classes the discount can combine with."""
input DiscountCombinesWithInput {
  """Combines with order discounts."""
  orderDiscounts: Boolean = false

  """Combines with product discounts."""
  productDiscounts: Boolean = false

  """Combines with shipping discounts."""
  shippingDiscounts: Boolean = false
}

"""The shipping destinations where the discount can be applied."""
type DiscountCountries {
  """The codes for the countries where the discount can be applied."""
  countries: [CountryCode!]!

  """
  Whether the discount is applicable to countries that have not been defined in the shop's shipping zones.
  """
  includeRestOfWorld: Boolean!
}

"""
Specifies a list of countries to add or remove from the free shipping discount.
"""
input DiscountCountriesInput {
  """
  The country codes to add to the list of countries where the discount applies.
  """
  add: [CountryCode!]

  """
  Whether the discount code is applicable to countries that have not been defined in the shop's shipping zones.
  """
  includeRestOfWorld: Boolean = false

  """
  The country codes to remove from the list of countries where the discount applies.
  """
  remove: [CountryCode!]
}

"""
The `DiscountCountryAll` object lets you target all countries as shipping destination for discount eligibility.
"""
type DiscountCountryAll {
  """
  Whether the discount can be applied to all countries as shipping destination. This value is always `true`.
  """
  allCountries: Boolean!
}

"""
The `DiscountCustomerAll` object lets you target all customers for discount eligibility.
"""
type DiscountCustomerAll {
  """
  Whether the discount can be applied by all customers. This value is always `true`.
  """
  allCustomers: Boolean!
}

"""
The prerequisite items and prerequisite value that a customer must have on the order for the discount to be applicable.
"""
type DiscountCustomerBuys {
  """The items required for the discount to be applicable."""
  items: DiscountItems!

  """The prerequisite value."""
  value: DiscountCustomerBuysValue!
}

"""Specifies the prerequisite items and prerequisite quantity."""
input DiscountCustomerBuysInput {
  """
  The IDs of items that the customer buys. The items can be either collections or products.
  """
  items: DiscountItemsInput

  """The quantity of prerequisite items."""
  value: DiscountCustomerBuysValueInput
}

"""
The prerequisite for the discount to be applicable. For example, the discount might require a customer to buy a minimum quantity of select items. Alternatively, the discount might require a customer to spend a minimum amount on select items.
"""
union DiscountCustomerBuysValue = DiscountPurchaseAmount | DiscountQuantity

"""Specifies the prerequisite quantity for the discount."""
input DiscountCustomerBuysValueInput {
  """
  The prerequisite purchase amount required for the discount to be applicable.
  """
  amount: Decimal

  """The quantity of prerequisite items."""
  quantity: UnsignedInt64
}

"""
The qualifying items in an order, the quantity of each one, and the total value of the discount.
"""
type DiscountCustomerGets {
  """Whether the discount applies on regular one-time-purchase items."""
  appliesOnOneTimePurchase: Boolean!

  """Whether the discount applies on subscription items."""
  appliesOnSubscription: Boolean!

  """The items to which the discount applies."""
  items: DiscountItems!

  """Entitled quantity and the discount value."""
  value: DiscountCustomerGetsValue!
}

"""
Specifies the items that will be discounted, the quantity of items that will be discounted, and the value of discount.
"""
input DiscountCustomerGetsInput {
  """Whether the discount applies on regular one-time-purchase items."""
  appliesOnOneTimePurchase: Boolean

  """Whether the discount applies on subscription items."""
  appliesOnSubscription: Boolean

  """
  The IDs of the items that the customer gets. The items can be either collections or products.
  """
  items: DiscountItemsInput

  """The quantity of items discounted and the discount value."""
  value: DiscountCustomerGetsValueInput
}

"""
The type of the discount value and how it will be applied. For example, it might be a percentage discount on a fixed number of items. Alternatively, it might be a fixed amount evenly distributed across all items or on each individual item. A third example is a percentage discount on all items.
"""
union DiscountCustomerGetsValue = DiscountAmount | DiscountOnQuantity | DiscountPercentage

"""Specifies the quantity of items discounted and the discount value."""
input DiscountCustomerGetsValueInput {
  """The value of the discount."""
  discountAmount: DiscountAmountInput

  """The quantity of the items that are discounted and the discount value."""
  discountOnQuantity: DiscountOnQuantityInput

  """
  The percentage value of the discount. Value must be between 0.00 - 1.00.
  """
  percentage: Float
}

"""
A list of customer segments that contain the customers that the discount applies to.
"""
type DiscountCustomerSegments {
  """
  A list of customer segments that contain the customers who can use the discount.
  """
  segments: [Segment!]!
}

"""
Specifies which customer segments to add to or remove from the discount.
"""
input DiscountCustomerSegmentsInput {
  """
  A list of customer segments to add to the current list of customer segments.
  """
  add: [ID!]

  """
  A list of customer segments to remove from the current list of customer segments.
  """
  remove: [ID!]
}

"""
The type used for targeting a set of customers who are eligible for the discount. For example, the discount might be available to all customers or it might only be available to a specific set of customers. You can define the set of customers by targeting a list of customer segments, or by targeting a list of specific customers.
"""
union DiscountCustomerSelection = DiscountCustomerAll | DiscountCustomerSegments | DiscountCustomers

"""Specifies the customers who can use this discount."""
input DiscountCustomerSelectionInput {
  """Whether all customers can use this discount."""
  all: Boolean

  """
  The list of customer segment IDs to add or remove from the list of customer segments.
  """
  customerSegments: DiscountCustomerSegmentsInput

  """The list of customer IDs to add or remove from the list of customers."""
  customers: DiscountCustomersInput
}

"""A list of customers eligible for the discount."""
type DiscountCustomers {
  """The list of customers eligible for the discount."""
  customers: [Customer!]!
}

"""Specifies which customers to add to or remove from the discount."""
input DiscountCustomersInput {
  """
  A list of customers to add to the current list of customers who can use the discount.
  """
  add: [ID!]

  """
  A list of customers to remove from the current list of customers who can use the discount.
  """
  remove: [ID!]
}

"""
The type of discount that will be applied. Currently, only a percentage discount is supported.
"""
union DiscountEffect = DiscountPercentage

"""
Specifies how the discount will be applied. Currently, only percentage off is supported.
"""
input DiscountEffectInput {
  """
  The percentage value of the discount. Value must be between 0.00 - 1.00.
  """
  percentage: Float
}

"""Possible error codes that can be returned by `DiscountUserError`."""
enum DiscountErrorCode {
  """
  The active period overlaps with other automatic discounts. At any given time, only one automatic discount can be active.
  """
  ACTIVE_PERIOD_OVERLAP

  """The input value is blank."""
  BLANK

  """The attribute selection contains conflicting settings."""
  CONFLICT

  """The input value is already present."""
  DUPLICATE

  """The input value should be equal to the value allowed."""
  EQUAL_TO

  """The value exceeded the maximum allowed value."""
  EXCEEDED_MAX

  """The input value should be greater than the minimum allowed value."""
  GREATER_THAN

  """
  The input value should be greater than or equal to the minimum value allowed.
  """
  GREATER_THAN_OR_EQUAL_TO

  """The value is already present through another selection."""
  IMPLICIT_DUPLICATE

  """The input value isn't included in the list."""
  INCLUSION

  """Unexpected internal error happened."""
  INTERNAL_ERROR

  """The input value is invalid."""
  INVALID

  """The combinesWith settings are invalid for the discount class."""
  INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS

  """The input value should be less than the maximum value allowed."""
  LESS_THAN

  """
  The input value should be less than or equal to the maximum value allowed.
  """
  LESS_THAN_OR_EQUAL_TO

  """
  The active period overlaps with too many other app provided discounts. There is a limit on the number of app discounts that may be active at any given time.
  """
  MAX_APP_DISCOUNTS

  """Specify a minimum subtotal or a quantity, but not both."""
  MINIMUM_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT

  """Missing a required argument."""
  MISSING_ARGUMENT

  """The input value needs to be blank."""
  PRESENT

  """The input value is already taken."""
  TAKEN

  """The input value is too long."""
  TOO_LONG

  """Too many arguments provided."""
  TOO_MANY_ARGUMENTS

  """The input value is too short."""
  TOO_SHORT

  """The value is outside of the allowed range."""
  VALUE_OUTSIDE_RANGE
}

"""
The type used to target the items required for discount eligibility, or the items to which the application of a discount might apply. For example, for a customer to be eligible for a discount, they're required to add an item from a specified collection to their order. Alternatively, a customer might be required to add a specific product or product variant. When using this type to target which items the discount will apply to, the discount might apply to all items on the order, or to specific products and product variants, or items in a given collection.
"""
union DiscountItems = AllDiscountItems | DiscountCollections | DiscountProducts

"""Specifies the items attached to a discount."""
input DiscountItemsInput {
  """Whether all items should be selected."""
  all: Boolean

  """The collections that are attached to a discount."""
  collections: DiscountCollectionsInput

  """The products and product variants that are attached to a discount."""
  products: DiscountProductsInput
}

"""The minimum quantity of items required for the discount to apply."""
type DiscountMinimumQuantity {
  """
  The minimum quantity of items that's required for the discount to be applied.
  """
  greaterThanOrEqualToQuantity: UnsignedInt64!
}

"""Specifies the quantity minimum requirements for a discount."""
input DiscountMinimumQuantityInput {
  """
  The minimum quantity of items that's required for the discount to be applied.
  """
  greaterThanOrEqualToQuantity: UnsignedInt64
}

"""
The type of mimumum requirement that must be met for the discount to be applied. For example, a customer must spend a minimum subtotal to be eligible for the discount. Alternatively, a customer must purchase a minimum quantity of items to be eligible for the discount.
"""
union DiscountMinimumRequirement = DiscountMinimumQuantity | DiscountMinimumSubtotal

"""
Specifies the quantity or subtotal minimum requirements for a discount.
"""
input DiscountMinimumRequirementInput {
  """The minimum required quantity."""
  quantity: DiscountMinimumQuantityInput

  """The minimum required subtotal."""
  subtotal: DiscountMinimumSubtotalInput
}

"""The minimum subtotal required for the discount to apply."""
type DiscountMinimumSubtotal {
  """The minimum subtotal that's required for the discount to be applied."""
  greaterThanOrEqualToSubtotal: MoneyV2!
}

"""Specifies the subtotal minimum requirements for a discount."""
input DiscountMinimumSubtotalInput {
  """The minimum subtotal that's required for the discount to be applied."""
  greaterThanOrEqualToSubtotal: Decimal
}

"""A discount wrapper node."""
type DiscountNode implements HasEvents & HasMetafieldDefinitions & HasMetafields & Node {
  """A discount."""
  discount: Discount!

  """The paginated list of events associated with the host subject."""
  events(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `comments`\n - `created_at`\n - `subject_type`\n - `verb`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """A globally-unique identifier."""
  id: ID!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The key for the metafield."""
    key: String!

    """The namespace for the metafield."""
    namespace: String!
  ): Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    "Supported filter parameters:\n - `created_at`\n - `key`\n - `namespace`\n - `owner_type`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The metafield namespace to filter by."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The key for the private metafield."""
    key: String!

    """The namespace for the private metafield."""
    namespace: String!
  ): PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter the private metafields by namespace."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PrivateMetafieldConnection!
}

"An auto-generated type for paginating through multiple DiscountNodes.\n"
type DiscountNodeConnection {
  """A list of edges."""
  edges: [DiscountNodeEdge!]!

  """A list of the nodes contained in DiscountNodeEdge."""
  nodes: [DiscountNode!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one DiscountNode and a cursor during pagination.\n"
type DiscountNodeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DiscountNodeEdge."""
  node: DiscountNode!
}

"""
The quantity of items discounted, the discount value, and how the discount will be applied.
"""
type DiscountOnQuantity {
  """The discount's effect on qualifying items."""
  effect: DiscountEffect!

  """
  The number of items being discounted. The customer must have at least this many items of specified products or product variants in their order to be eligible for the discount.
  """
  quantity: DiscountQuantity!
}

"""Specifies the quantity of items discounted and the discount value."""
input DiscountOnQuantityInput {
  """The percentage value of the discount."""
  effect: DiscountEffectInput

  """The quantity of items that are discounted."""
  quantity: UnsignedInt64
}

"""
A discount effect that gives customers a percentage off of specified items on their order.
"""
type DiscountPercentage {
  """The percentage value of the discount."""
  percentage: Float!
}

"""
A list of products and product variants that the discount can have as a prerequisite or a list of products and product variants to which the discount can be applied.
"""
type DiscountProducts {
  """
  The list of product variants that the discount can have as a prerequisite or the list of product variants to which the discount can be applied.
  """
  productVariants(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductVariantConnection!

  """
  The list of products that the discount can have as a prerequisite or the list of products to which the discount can be applied.
  """
  products(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductConnection!
}

"""Specifies the products and product variants attached to a discount."""
input DiscountProductsInput {
  """Specifies list of product variant ids to add."""
  productVariantsToAdd: [ID!]

  """Specifies list of product variant ids to remove."""
  productVariantsToRemove: [ID!]

  """Specifies list of product ids to add."""
  productsToAdd: [ID!]

  """Specifies list of product ids to remove."""
  productsToRemove: [ID!]
}

"""
A purchase amount in the context of a discount. This object can be used to define the minimum purchase amount required for a discount to be applicable.
"""
type DiscountPurchaseAmount {
  """The purchase amount in decimal format."""
  amount: Decimal!
}

"""
A quantity of items in the context of a discount. This object can be used to define the minimum quantity of items required to apply a discount. Alternatively, it can be used to define the quantity of items that can be discounted.
"""
type DiscountQuantity {
  """The quantity of items."""
  quantity: UnsignedInt64!
}

"""
A code that a customer can use at checkout to receive a discount. For example, a customer can use the redeem code 'SUMMER20' at checkout to receive a 20% discount on their entire order.
"""
type DiscountRedeemCode {
  """
  The number of times that the discount redeem code has been used. This value is updated asynchronously and can be different than the actual usage count.
  """
  asyncUsageCount: Int!

  """The code that a customer can use at checkout to receive a discount."""
  code: String!

  """The application that created the discount redeem code."""
  createdBy: App

  """A globally-unique identifier of the discount redeem code."""
  id: ID!
}

"""Return type for `discountRedeemCodeBulkAdd` mutation."""
type DiscountRedeemCodeBulkAddPayload {
  """
  The ID of the discount redeem code bulk creation operation. The properties and status of the operation can be tracked using the [`DiscountRedeemCodeBulkCreation` query](https://shopify.dev/api/admin-graphql/2022-04/queries/discountRedeemCodeBulkCreation).
  """
  bulkCreation: DiscountRedeemCodeBulkCreation

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DiscountUserError!]!
}

"""
The properties and status of a bulk discount redeem code creation operation.
"""
type DiscountRedeemCodeBulkCreation implements Node {
  """
  The result of each code creation operation associated with the bulk creation operation including any errors that might have occurred during the operation.
  """
  codes(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): DiscountRedeemCodeBulkCreationCodeConnection!

  """The number of codes to create."""
  codesCount: Int!

  """The date and time when the bulk creation was created."""
  createdAt: DateTime!

  """The code discount associated with the created codes."""
  discountCode: DiscountCodeNode

  """
  Whether the bulk creation is still queued (`false`) or has been run (`true`).
  """
  done: Boolean!

  """The number of codes that weren't created successfully."""
  failedCount: Int!

  """A globally-unique identifier."""
  id: ID!

  """The number of codes created successfully."""
  importedCount: Int!
}

"""
A result of a discount redeem code creation operation created by a bulk creation.
"""
type DiscountRedeemCodeBulkCreationCode {
  """The code to use in the discount redeem code creation operation."""
  code: String!

  "The successfully created discount redeem code.\n\nIf the discount redeem code couldn't be created, then this field is `null``.\n"
  discountRedeemCode: DiscountRedeemCode

  """
  A list of errors that occurred during the creation operation of the discount redeem code.
  """
  errors: [DiscountUserError!]!
}

"An auto-generated type for paginating through multiple DiscountRedeemCodeBulkCreationCodes.\n"
type DiscountRedeemCodeBulkCreationCodeConnection {
  """A list of edges."""
  edges: [DiscountRedeemCodeBulkCreationCodeEdge!]!

  """
  A list of the nodes contained in DiscountRedeemCodeBulkCreationCodeEdge.
  """
  nodes: [DiscountRedeemCodeBulkCreationCode!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one DiscountRedeemCodeBulkCreationCode and a cursor during pagination.\n"
type DiscountRedeemCodeBulkCreationCodeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DiscountRedeemCodeBulkCreationCodeEdge."""
  node: DiscountRedeemCodeBulkCreationCode!
}

"An auto-generated type for paginating through multiple DiscountRedeemCodes.\n"
type DiscountRedeemCodeConnection {
  """A list of edges."""
  edges: [DiscountRedeemCodeEdge!]!

  """A list of the nodes contained in DiscountRedeemCodeEdge."""
  nodes: [DiscountRedeemCode!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one DiscountRedeemCode and a cursor during pagination.\n"
type DiscountRedeemCodeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DiscountRedeemCodeEdge."""
  node: DiscountRedeemCode!
}

"""The redeem code to attach to a discount."""
input DiscountRedeemCodeInput {
  """
  The code that a customer can use at checkout to receive the associated discount.
  """
  code: String!
}

"""A shareable URL for a discount code."""
type DiscountShareableUrl {
  """
  The image URL of the item (product or collection) to which the discount applies.
  """
  targetItemImage: Image

  """The type of page that's associated with the URL."""
  targetType: DiscountShareableUrlTargetType!

  """The title of the page that's associated with the URL."""
  title: String!

  """The URL for the discount code."""
  url: URL!
}

"""The type of page where a shareable discount URL lands."""
enum DiscountShareableUrlTargetType {
  """The URL lands on a collection page."""
  COLLECTION

  """The URL lands on a home page."""
  HOME

  """The URL lands on a product page."""
  PRODUCT
}

"""
The type used to target the eligible countries of an order's shipping destination for which the discount applies. For example, the discount might be applicable when shipping to all countries, or only to a set of countries.
"""
union DiscountShippingDestinationSelection = DiscountCountries | DiscountCountryAll

"""
Specifies the destinations where the free shipping discount will be applied.
"""
input DiscountShippingDestinationSelectionInput {
  """Whether the discount code applies to all countries."""
  all: Boolean = false

  """A list of countries where the discount code will apply."""
  countries: DiscountCountriesInput
}

"""The set of valid sort keys for the Discount query."""
enum DiscountSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `ends_at` value."""
  ENDS_AT

  """Sort by the `id` value."""
  ID

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE

  """Sort by the `starts_at` value."""
  STARTS_AT

  """Sort by the `title` value."""
  TITLE

  """Sort by the `updated_at` value."""
  UPDATED_AT
}

"""The status of the discount."""
enum DiscountStatus {
  """The discount is active."""
  ACTIVE

  """The discount is expired."""
  EXPIRED

  """The discount is scheduled."""
  SCHEDULED
}

"""
The type of line (line item or shipping line) on an order that the subscription discount is applicable towards.
"""
enum DiscountTargetType {
  """The discount applies onto line items."""
  LINE_ITEM

  """The discount applies onto shipping lines."""
  SHIPPING_LINE
}

"""The type of the subscription discount."""
enum DiscountType {
  """Code discount type."""
  CODE_DISCOUNT

  """Manual discount type."""
  MANUAL
}

"""An error that occurs during the execution of a discount mutation."""
type DiscountUserError implements DisplayableError {
  """The error code."""
  code: DiscountErrorCode

  """Extra information about this error."""
  extraInfo: String

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""Represents an error in the input of a mutation."""
interface DisplayableError {
  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""Return type for `disputeEvidenceUpdate` mutation."""
type DisputeEvidenceUpdatePayload {
  """The updated dispute evidence."""
  disputeEvidence: ShopifyPaymentsDisputeEvidence

  """The list of errors that occurred from executing the mutation."""
  userErrors: [DisputeEvidenceUpdateUserError!]!
}

"""An error that occurs during the execution of `DisputeEvidenceUpdate`."""
type DisputeEvidenceUpdateUserError implements DisplayableError {
  """The error code."""
  code: DisputeEvidenceUpdateUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `DisputeEvidenceUpdateUserError`.
"""
enum DisputeEvidenceUpdateUserErrorCode {
  """Dispute evidence could not be found."""
  DISPUTE_EVIDENCE_NOT_FOUND

  """Evidence already accepted."""
  EVIDENCE_ALREADY_ACCEPTED

  """Evidence past due date."""
  EVIDENCE_PAST_DUE_DATE

  """Combined files size is too large."""
  FILES_SIZE_EXCEEDED_LIMIT

  """The input value is invalid."""
  INVALID

  """Individual file size is too large."""
  TOO_LARGE
}

"""The possible statuses of a dispute."""
enum DisputeStatus {
  ACCEPTED
  CHARGE_REFUNDED
  LOST
  NEEDS_RESPONSE
  UNDER_REVIEW
  WON
}

"""The possible types for a dispute."""
enum DisputeType {
  """The dispute has turned into a chargeback."""
  CHARGEBACK

  """The dispute is in the inquiry phase."""
  INQUIRY
}

"""
A unique string that represents the address of a Shopify store on the Internet.
"""
type Domain implements Node {
  """The host name of the domain (for example, `example.com`)."""
  host: String!

  """A globally-unique identifier."""
  id: ID!

  """The localization of the domain, if the domain doesn't redirect."""
  localization: DomainLocalization

  """The web presence of the domain."""
  marketWebPresence: MarketWebPresence

  """Whether SSL is enabled."""
  sslEnabled: Boolean!

  """The URL of the domain (for example, `example.com`)."""
  url: URL!
}

"""The country and language settings assigned to a domain."""
type DomainLocalization {
  """The ISO codes for the domain’s alternate locales."""
  alternateLocales: [String!]!

  """
  The ISO code for the country assigned to the domain, or "*" for a domain set to "Rest of world".
  """
  country: String

  """The ISO code for the domain’s default locale."""
  defaultLocale: String!
}

"Represents a draft order. Merchants can use draft orders to create orders on behalf of their customers. This is useful for Shopify merchants who receive orders through outside channels and enables a wide range of use cases including the following:\n\n- Create new orders for sales made by phone, in person, via chat, or by other means. Credit card payments for these orders can subsequently be entered in the Shopify admin.\n- Send invoices to customers to pay with a secure checkout link.\n- Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.\n- Re-create mistaken orders.\n- Sell products at discount or wholesale rates.\n- Take pre-orders.\n\n***Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.\n"
type DraftOrder implements CommentEventSubject & HasEvents & HasLocalizationExtensions & HasMetafields & LegacyInteroperability & Node {
  """Order-level discount applied to the draft order."""
  appliedDiscount: DraftOrderAppliedDiscount

  "The billing address of the customer.\n"
  billingAddress: MailingAddress

  "Date and time when the draft order converted to a new order,\nand the draft order's status changed to **Completed**.\n"
  completedAt: DateTime

  """Date and time when the draft order was created in Shopify."""
  createdAt: DateTime!

  "Three letter code for the currency of the store at the time that the invoice is sent.\n"
  currencyCode: CurrencyCode!

  "Custom information added to the draft order on behalf of your customer.\n"
  customAttributes: [Attribute!]!

  """
  Customer who will be sent an invoice for the draft order, if there is one.
  """
  customer: Customer

  """Email address of the customer, which is used to send notifications to."""
  email: String

  """List of events associated with the draft order."""
  events(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `comments`\n - `created_at`\n - `subject_type`\n - `verb`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """Whether the merchant has added timeline comments to the draft order."""
  hasTimelineComment: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """Date and time when the invoice was last emailed to the customer."""
  invoiceSentAt: DateTime

  """
  Link to the checkout, which is sent to your customer in the invoice email.
  """
  invoiceUrl: URL

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """List of the line items in the draft order."""
  lineItems(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): DraftOrderLineItemConnection!

  """List of localization extensions for the resource."""
  localizationExtensions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """The country codes of the extensions."""
    countryCodes: [CountryCode!]

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The purpose of the extensions."""
    purposes: [LocalizationExtensionPurpose!]

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): LocalizationExtensionConnection!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The key for the metafield."""
    key: String!

    """The namespace for the metafield."""
    namespace: String!
  ): Metafield

  """List of metafields that belong to the resource."""
  metafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The metafield namespace to filter by."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  "Unique identifier for the draft order, which is unique within the store. For example, _#D1223_.\n"
  name: String!

  """Text from an optional note attached to the draft order."""
  note2: String

  """Order that was created from this draft order."""
  order: Order

  """The associated payment term for this draft order."""
  paymentTerms: PaymentTerms

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The key for the private metafield."""
    key: String!

    """The namespace for the private metafield."""
    namespace: String!
  ): PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter the private metafields by namespace."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PrivateMetafieldConnection!

  """
  Whether the Draft Order is ready and can be completed. Draft Orders
          may have asynchronous operations that can take time to finish.
  """
  ready: Boolean!

  """The shipping address of the customer."""
  shippingAddress: MailingAddress

  """Line item that contains the shipping costs."""
  shippingLine: ShippingLine

  """Status of the draft order."""
  status: DraftOrderStatus!

  "Subtotal of the line items and their discounts (does not contain shipping charges or shipping discounts, or taxes).\n"
  subtotalPrice: Money!

  "A comma separated list of tags associated with the draft order. Updating `tags` overwrites\nany existing tags that were previously added to the draft order. To add new tags without overwriting\nexisting tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)\nmutation.\n"
  tags: [String!]!

  """Whether the draft order is tax exempt."""
  taxExempt: Boolean!

  """Total amount of taxes charged for each line item and shipping line."""
  taxLines: [TaxLine!]!

  """Whether the line item prices include taxes."""
  taxesIncluded: Boolean!

  """
  Total amount of the draft order (includes taxes, shipping charges, and discounts).
  """
  totalPrice: Money!

  """Total shipping charge for the draft order."""
  totalShippingPrice: Money!

  """Total amount of taxes for the draft order."""
  totalTax: Money!

  """Total weight (grams) of the draft order."""
  totalWeight: UnsignedInt64!

  "Date and time when the draft order was last changed.\nThe format is YYYY-MM-DD HH:mm:ss (for example, 2016-02-05 17:04:01).\n"
  updatedAt: DateTime!
}

"""The order-level discount applied to a draft order."""
type DraftOrderAppliedDiscount {
  """Amount of the order-level discount that is applied to the draft order."""
  amount: Money! @deprecated(reason: "Use `amountV2` instead")

  """Amount of money discounted."""
  amountV2: MoneyV2!

  """Description of the order-level discount."""
  description: String!

  """Name of the order-level discount."""
  title: String

  "Amount of the order level discount (when value_type is percentage,\nthe value in this field is the percentage discount).\n"
  value: Float!

  """Type of the order-level discount."""
  valueType: DraftOrderAppliedDiscountType!
}

"""
The input fields for applying an order-level discount to a draft order.
"""
input DraftOrderAppliedDiscountInput {
  "The applied amount of the discount.\n"
  amount: Money

  "Reason for the discount.\n"
  description: String

  "Title of the discount.\n"
  title: String

  "The value of the discount.\nIf the type of the discount is fixed amount, then this is a fixed dollar amount.\nIf the type is percentage, then this is the percentage.\n"
  value: Float!

  "The type of discount.\n"
  valueType: DraftOrderAppliedDiscountType!
}

"""The valid discount types that can be applied to a draft order."""
enum DraftOrderAppliedDiscountType {
  """A fixed amount in the store's currency."""
  FIXED_AMOUNT

  """A percentage of the order subtotal."""
  PERCENTAGE
}

"""Return type for `draftOrderCalculate` mutation."""
type DraftOrderCalculatePayload {
  """The calculated properties for a draft order."""
  calculatedDraftOrder: CalculatedDraftOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `draftOrderComplete` mutation."""
type DraftOrderCompletePayload {
  """The completed draft order."""
  draftOrder: DraftOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type for paginating through multiple DraftOrders.\n"
type DraftOrderConnection {
  """A list of edges."""
  edges: [DraftOrderEdge!]!

  """A list of the nodes contained in DraftOrderEdge."""
  nodes: [DraftOrder!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `draftOrderCreate` mutation."""
type DraftOrderCreatePayload {
  "The created draft order.\n"
  draftOrder: DraftOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the draft order to delete by its ID."""
input DraftOrderDeleteInput {
  "The ID of the draft order to delete.\n"
  id: ID!
}

"""Return type for `draftOrderDelete` mutation."""
type DraftOrderDeletePayload {
  "The ID of the deleted draft order.\n"
  deletedId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type which holds one DraftOrder and a cursor during pagination.\n"
type DraftOrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DraftOrderEdge."""
  node: DraftOrder!
}

"""The input fields used to create or update a draft order."""
input DraftOrderInput {
  "The discount that will be applied to the draft order.\nA draft order line item can have one discount. A draft order can also have one order-level discount.\n"
  appliedDiscount: DraftOrderAppliedDiscountInput

  "The mailing address associated with the payment method.\n"
  billingAddress: MailingAddressInput

  "Extra information added to the customer.\n"
  customAttributes: [AttributeInput!]

  "Customer associated with the draft order.\n"
  customerId: ID

  "The customer's email address.\n"
  email: String

  "Product variant line item or custom line item associated to the draft order.\nEach draft order must include at least one line item.\n"
  lineItems: [DraftOrderLineItemInput!]

  """
  The localization extensions attached to the draft order. For example, Tax IDs.
  """
  localizationExtensions: [LocalizationExtensionInput!]

  "Metafields attached to the draft order.\n"
  metafields: [MetafieldInput!]

  "The text of an optional note that a shop owner can attach to the draft order.\n"
  note: String

  """The fields used to create payment terms."""
  paymentTerms: PaymentTermsInput

  """The private metafields attached to the draft order."""
  privateMetafields: [PrivateMetafieldInput!]

  "The mailing address to where the order will be shipped.\n"
  shippingAddress: MailingAddressInput

  "A shipping line object, which details the shipping method used.\n"
  shippingLine: ShippingLineInput

  """
  The source of the checkout.
            To use this field for sales attribution, you must register the channels that your app is managing.
            You can register the channels that your app is managing by completing
            [this Google Form](https://docs.google.com/forms/d/e/1FAIpQLScmVTZRQNjOJ7RD738mL1lGeFjqKVe_FM2tO9xsm21QEo5Ozg/viewform?usp=sf_link).
            After you've submitted your request, you need to wait for your request to be processed by Shopify.
            You can find a list of your channels in the Partner Dashboard, in your app's Marketplace extension.
            You need to specify the handle as the `source_name` value in your request.
            The handle is the channel that the order was placed from.
  """
  sourceName: String

  "A comma separated list of tags that have been added to the draft order.\n"
  tags: [String!]

  "Whether or not taxes are exempt for the draft order.\nIf false, then Shopify will refer to the taxable field for each line item.\nIf a customer is applied to the draft order, then Shopify will use the customer's tax exempt field instead.\n"
  taxExempt: Boolean

  "Sent as part of a draft order object to load customer shipping information.\n"
  useCustomerDefaultAddress: Boolean
}

"""Return type for `draftOrderInvoicePreview` mutation."""
type DraftOrderInvoicePreviewPayload {
  """Draft order invoice email rendered as HTML to allow previewing."""
  previewHtml: HTML

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `draftOrderInvoiceSend` mutation."""
type DraftOrderInvoiceSendPayload {
  """The draft order an invoice email is sent for."""
  draftOrder: DraftOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""A line item included in a draft order."""
type DraftOrderLineItem implements Node {
  "The discount that will be applied to the line item or the overall order.\n"
  appliedDiscount: DraftOrderAppliedDiscount

  "Whether the line item is a custom line item (`true`) or a product variant line item (`false`).\n"
  custom: Boolean!

  """
  List of additional information, often representing custom features or special requests.
  """
  customAttributes: [Attribute!]!

  "The line item price after discounts are applied.\n"
  discountedTotal: Money!

  "The `discountedTotal` divided by `quantity`, resulting in the value of the discount per unit.\n"
  discountedUnitPrice: Money!

  "Name of the service provider who fulfilled the order.\n\nValid values are either **manual** or the name of the provider.\nFor example, **amazon**, **shipwire**.\n\nDeleted fulfillment services will return null.\n"
  fulfillmentService: FulfillmentService

  "The weight of the line item in grams. The weight can only be specified if the line item is a custom\nline item.\n"
  grams: Int @deprecated(reason: "Use `weight` instead")

  """A globally-unique identifier."""
  id: ID!

  """The image associated with the draft order line item."""
  image: Image

  """Whether the line item is a gift card."""
  isGiftCard: Boolean!

  """Name of the product."""
  name: String!

  "The total price (without discounts) of the line item, based on the original unit price of the variant x quantity.\n"
  originalTotal: Money!

  """The variant price without any discounts applied."""
  originalUnitPrice: Money!

  "The product corresponding to the line item’s product variant.\n"
  product: Product

  """The number of product variants that are requested in the draft order."""
  quantity: Int!

  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!

  """Variant SKU number."""
  sku: String

  "A list of tax line objects, each of which details the total taxes applicable to the order.\n"
  taxLines: [TaxLine!]!

  """Whether the variant is taxable."""
  taxable: Boolean!

  """
  Title of the product or variant (this field only applies to custom line items).
  """
  title: String!

  "The total value of the discount that is applied to the line item.\n"
  totalDiscount: Money!

  "The associated variant for the line item.\n"
  variant: ProductVariant

  """Name of the variant."""
  variantTitle: String

  """Name of the vendor who made the variant."""
  vendor: String

  """The weight unit and value for a draft order line item."""
  weight: Weight
}

"An auto-generated type for paginating through multiple DraftOrderLineItems.\n"
type DraftOrderLineItemConnection {
  """A list of edges."""
  edges: [DraftOrderLineItemEdge!]!

  """A list of the nodes contained in DraftOrderLineItemEdge."""
  nodes: [DraftOrderLineItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one DraftOrderLineItem and a cursor during pagination.\n"
type DraftOrderLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DraftOrderLineItemEdge."""
  node: DraftOrderLineItem!
}

"""The input fields used to create a line item for a draft order."""
input DraftOrderLineItemInput {
  "Discount which will be applied to the line item.\n"
  appliedDiscount: DraftOrderAppliedDiscountInput

  "Represents a generic custom attribute using a key value pair.\n"
  customAttributes: [AttributeInput!]

  """
  The price without any discounts applied. This value is ignored when `variantId` is provided.
  """
  originalUnitPrice: Money

  "The number of products that were purchased.\n"
  quantity: Int!

  "Whether physical shipping is required. This value is ignored when `variantId` is provided.\n"
  requiresShipping: Boolean

  """
  The SKU number of the item. This value is ignored when `variantId` is provided.
  """
  sku: String

  """
  Whether the item is taxable. This value is ignored when `variantId` is provided.
  """
  taxable: Boolean

  """Title of the item. Ignored when `variantId` is provided."""
  title: String

  "The ID of the product variant corresponding to the line item.\nNull if custom line item. Required if product variant line item.\n"
  variantId: ID

  "Specifies the weight unit and value inputs.\nThis value is ignored when `variantId` is provided.\n"
  weight: WeightInput
}

"""The set of valid sort keys for the DraftOrder query."""
enum DraftOrderSortKeys {
  """Sort by the `customer_name` value."""
  CUSTOMER_NAME

  """Sort by the `id` value."""
  ID

  """Sort by the `number` value."""
  NUMBER

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE

  """Sort by the `status` value."""
  STATUS

  """Sort by the `total_price` value."""
  TOTAL_PRICE

  """Sort by the `updated_at` value."""
  UPDATED_AT
}

"""The valid statuses for a draft order."""
enum DraftOrderStatus {
  """The draft order has been paid."""
  COMPLETED

  """An invoice for the draft order has been sent to the customer."""
  INVOICE_SENT

  """
  The draft order is open. It has not been paid, and an invoice hasn't been sent.
  """
  OPEN
}

"""Return type for `draftOrderUpdate` mutation."""
type DraftOrderUpdatePayload {
  """The updated draft order."""
  draftOrder: DraftOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""The duty details for a line item."""
type Duty implements Node {
  """
  The ISO 3166-1 alpha-2 country code of the country of origin used in calculating the duty.
  """
  countryCodeOfOrigin: CountryCode

  """The harmonized system code of the item used in calculating the duty."""
  harmonizedSystemCode: String

  """A globally-unique identifier."""
  id: ID!

  """The amount of the duty."""
  price: MoneyBag!

  """A list of taxes charged on the duty."""
  taxLines: [TaxLine!]!
}

"""A sale associated with a duty charge."""
type DutySale implements Sale {
  """The type of order action that the sale represents."""
  actionType: SaleActionType!

  """The duty for the associated sale."""
  duty: Duty!

  """The unique identifier for the sale."""
  id: ID!

  """The line type assocated with the sale."""
  lineType: SaleLineType!

  """The number of units either ordered or intended to be returned."""
  quantity: Int

  """All individual taxes associated with the sale."""
  taxes: [SaleTax!]!

  """The total sale amount after taxes and discounts."""
  totalAmount: MoneyBag!

  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: MoneyBag!

  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """The total amount of taxes for the sale."""
  totalTaxAmount: MoneyBag!
}

"""The attribute editable information."""
type EditableProperty {
  """Whether the attribute is locked for editing."""
  locked: Boolean!

  """The reason the attribute is locked for editing."""
  reason: FormattedString
}

"""Specifies the fields for an email."""
input EmailInput {
  """Specifies any bcc recipients for the email."""
  bcc: [String!]

  """Specifies the email body."""
  body: String

  """Specifies a custom message to include in the email."""
  customMessage: String

  """Specifies the email sender."""
  from: String

  """Specifies the email subject."""
  subject: String

  """Specifies the email recipient."""
  to: String
}

"Events chronicle resource activities such as the creation of an article, the fulfillment of an order, or the\naddition of a product.\n"
interface Event {
  """The name of the app that created the event."""
  appTitle: String

  """Whether the event was created by an app."""
  attributeToApp: Boolean!

  """Whether the event was caused by an admin user."""
  attributeToUser: Boolean!

  """The date and time when the event was created."""
  createdAt: DateTime!

  """Whether the event is critical."""
  criticalAlert: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """Human readable text that describes the event."""
  message: FormattedString!
}

"""Return type for `eventBridgeWebhookSubscriptionCreate` mutation."""
type EventBridgeWebhookSubscriptionCreatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!

  """The webhook subscription that was created."""
  webhookSubscription: WebhookSubscription
}

"Specifies the input fields for an EventBridge webhook subscription.\n"
input EventBridgeWebhookSubscriptionInput {
  """The ARN of the EventBridge partner event source."""
  arn: ARN

  """The format in which the webhook subscription should send the data."""
  format: WebhookSubscriptionFormat

  """The list of fields to be included in the webhook subscription."""
  includeFields: [String!]

  """
  The list of namespaces for any metafields that should be included in the webhook subscription.
  """
  metafieldNamespaces: [String!]
}

"""Return type for `eventBridgeWebhookSubscriptionUpdate` mutation."""
type EventBridgeWebhookSubscriptionUpdatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!

  """The webhook subscription that was updated."""
  webhookSubscription: WebhookSubscription
}

"An auto-generated type for paginating through multiple Events.\n"
type EventConnection {
  """A list of edges."""
  edges: [EventEdge!]!

  """A list of the nodes contained in EventEdge."""
  nodes: [Event!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one Event and a cursor during pagination.\n"
type EventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of EventEdge."""
  node: Event!
}

"""The set of valid sort keys for the Event query."""
enum EventSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"Represents a video hosted outside of Shopify.\n"
type ExternalVideo implements Media & Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """The embed URL of the video for the respective host."""
  embedUrl: URL!

  """The URL."""
  embeddedUrl: URL! @deprecated(reason: "Use `originUrl` instead")

  """The host of the external video."""
  host: MediaHost!

  """A globally-unique identifier."""
  id: ID!

  """The media content type."""
  mediaContentType: MediaContentType!

  """Any errors which have occurred on the media."""
  mediaErrors: [MediaError!]!

  """The warnings attached to the media."""
  mediaWarnings: [MediaWarning!]!

  """The origin URL of the video on the respective host."""
  originUrl: URL!

  """The preview image for the media."""
  preview: MediaPreviewImage

  """Current status of the media."""
  status: MediaStatus!
}

"""Requirements that must be met before an app can be installed."""
type FailedRequirement {
  """
  Action to be taken to resolve a failed requirement, including URL link.
  """
  action: NavigationItem

  "A concise set of copy strings to be displayed to merchants, to guide them in resolving problems your app\nencounters when trying to make use of their Shop and its resources.\n"
  message: String!
}

"""A file interface."""
interface File {
  """A word or phrase to describe the contents or the function of a file."""
  alt: String

  "The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.\n"
  createdAt: DateTime!

  """Any errors that have occurred on the file."""
  fileErrors: [FileError!]!

  """The status of the file."""
  fileStatus: FileStatus!

  """The preview image for the media."""
  preview: MediaPreviewImage
}

"An auto-generated type for paginating through multiple Files.\n"
type FileConnection {
  """A list of edges."""
  edges: [FileEdge!]!

  """A list of the nodes contained in FileEdge."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""The possible content types for a file object."""
enum FileContentType {
  """A Shopify-hosted generic file."""
  FILE

  """A Shopify hosted image."""
  IMAGE

  """
  A Shopify-hosted video file. It's recommended to use this type for all video files.
  """
  VIDEO
}

"""The input fields that are required to create a file object."""
input FileCreateInput {
  """The alternative text description of the file."""
  alt: String

  """
  The file content type. If omitted, Shopify will attempt to determine the content type during file processing.
  """
  contentType: FileContentType

  "An external URL (for images only) or a\n[staged upload URL](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).\n"
  originalSource: String!
}

"""Return type for `fileCreate` mutation."""
type FileCreatePayload {
  """The newly created files."""
  files: [File!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [FilesUserError!]!
}

"""Return type for `fileDelete` mutation."""
type FileDeletePayload {
  """The IDs of the deleted files."""
  deletedFileIds: [ID!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [FilesUserError!]!
}

"An auto-generated type which holds one File and a cursor during pagination.\n"
type FileEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FileEdge."""
  node: File!
}

"A file error.\n"
type FileError {
  """Code representing the type of error."""
  code: FileErrorCode!

  """Additional details regarding the error."""
  details: String

  """Translated error message."""
  message: String!
}

"""The error types for a file."""
enum FileErrorCode {
  """
  File could not be created because embed permissions are disabled for this video.
  """
  EXTERNAL_VIDEO_EMBED_DISABLED

  """
  File could not be created because video is either not found or still transcoding.
  """
  EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING

  """
  File could not be created because the external video has an invalid aspect ratio.
  """
  EXTERNAL_VIDEO_INVALID_ASPECT_RATIO

  """
  File could not be created because the external video could not be found.
  """
  EXTERNAL_VIDEO_NOT_FOUND

  """
  File could not be created because the external video is not listed or is private.
  """
  EXTERNAL_VIDEO_UNLISTED

  """
  File could not be created because the cumulative file storage limit would be exceeded.
  """
  FILE_STORAGE_LIMIT_EXCEEDED

  """
  File could not be processed because the source could not be downloaded.
  """
  GENERIC_FILE_DOWNLOAD_FAILURE

  """File could not be created because the size is too large."""
  GENERIC_FILE_INVALID_SIZE

  """File could not be processed because the image could not be downloaded."""
  IMAGE_DOWNLOAD_FAILURE

  """File could not be processed because the image could not be processed."""
  IMAGE_PROCESSING_FAILURE

  """
  File could not be created because the image has an invalid aspect ratio.
  """
  INVALID_IMAGE_ASPECT_RATIO

  """File could not be created because the image size is too large."""
  INVALID_IMAGE_FILE_SIZE

  """
  File could not be created because the image's resolution exceeds the max limit.
  """
  INVALID_IMAGE_RESOLUTION

  """File could not be processed because the signed URL was invalid."""
  INVALID_SIGNED_URL

  """
  File timed out because it is currently being modified by another operation.
  """
  MEDIA_TIMEOUT_ERROR

  """File could not be created because the model file failed processing."""
  MODEL3D_GLB_OUTPUT_CREATION_ERROR

  """
  File could not be created because the model can't be converted to USDZ format.
  """
  MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR

  """File could not be created because the model file failed processing."""
  MODEL3D_PROCESSING_FAILURE

  """
  File could not be created because the model's thumbnail generation failed.
  """
  MODEL3D_THUMBNAIL_GENERATION_ERROR

  """Model failed validation."""
  MODEL3D_VALIDATION_ERROR

  """File error has occurred for an unknown reason."""
  UNKNOWN

  """
  File could not be created because the image is an unsupported file type.
  """
  UNSUPPORTED_IMAGE_FILE_TYPE

  """File could not be created because it has an invalid file type."""
  VIDEO_INVALID_FILETYPE_ERROR

  """
  File could not be created because it does not meet the maximum duration requirement.
  """
  VIDEO_MAX_DURATION_ERROR

  """
  File could not be created because it does not meet the maximum height requirement.
  """
  VIDEO_MAX_HEIGHT_ERROR

  """
  File could not be created because it does not meet the maximum width requirement.
  """
  VIDEO_MAX_WIDTH_ERROR

  """File could not be created because the metadata could not be read."""
  VIDEO_METADATA_READ_ERROR

  """
  File could not be created because it does not meet the minimum duration requirement.
  """
  VIDEO_MIN_DURATION_ERROR

  """
  File could not be created because it does not meet the minimum height requirement.
  """
  VIDEO_MIN_HEIGHT_ERROR

  """
  File could not be created because it does not meet the minimum width requirement.
  """
  VIDEO_MIN_WIDTH_ERROR

  """Video failed validation."""
  VIDEO_VALIDATION_ERROR
}

"""The set of valid sort keys for the File query."""
enum FileSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `filename` value."""
  FILENAME

  """Sort by the `id` value."""
  ID

  """Sort by the `original_upload_size` value."""
  ORIGINAL_UPLOAD_SIZE

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"""The possible statuses for a file object."""
enum FileStatus {
  """File processing has failed."""
  FAILED

  """File is being processed."""
  PROCESSING

  """File is ready to be displayed."""
  READY

  """File has been uploaded but hasn't been processed."""
  UPLOADED
}

"""The input fields that are required to update a file object."""
input FileUpdateInput {
  """The alternative text description of the file."""
  alt: String

  """The ID of the file to be updated."""
  id: ID!

  "The source from which to update the media preview image.\nMay be an external URL or a\n[staged upload URL](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).\n"
  previewImageSource: String
}

"""Return type for `fileUpdate` mutation."""
type FileUpdatePayload {
  """The list of updated files."""
  files: [File!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [FilesUserError!]!
}

"""Possible error codes that can be returned by `FilesUserError`."""
enum FilesErrorCode {
  """The alt value exceeds the maximum limit of 512 characters."""
  ALT_VALUE_LIMIT_EXCEEDED

  """The search term must not be blank."""
  BLANK_SEARCH

  """File does not exist."""
  FILE_DOES_NOT_EXIST

  """File has a pending operation."""
  FILE_LOCKED

  """The input value is invalid."""
  INVALID

  """Search query isn't supported."""
  INVALID_QUERY

  """At least one argument is required."""
  MISSING_ARGUMENTS

  """Exceeded the limit of non-image media per shop."""
  NON_IMAGE_MEDIA_PER_SHOP_LIMIT_EXCEEDED

  """Specify one argument: search, IDs, or deleteAll."""
  TOO_MANY_ARGUMENTS

  """The file type is not supported."""
  UNACCEPTABLE_ASSET

  """
  The file is not supported on trial accounts. Select a plan to upload this file.
  """
  UNACCEPTABLE_TRIAL_ASSET

  """
  The file is not supported on trial accounts that have not validated their email. Either select a plan or verify the shop owner email to upload this file.
  """
  UNACCEPTABLE_UNVERIFIED_TRIAL_ASSET
}

"""
An error that happens during the execution of a Files API query or mutation.
"""
type FilesUserError implements DisplayableError {
  """The error code."""
  code: FilesErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""A filter option is one possible value in a search filter."""
type FilterOption {
  """The filter option's label for display purposes."""
  label: String!

  """The filter option's value."""
  value: String!
}

"""Return type for `flowTriggerReceive` mutation."""
type FlowTriggerReceivePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"A string containing a strict subset of HTML code. Non-allowed tags will be stripped out.\nAllowed tags:\n* `a` (allowed attributes: `href`)\n* `b`\n* `br`\n* `em`\n* `i`\n* `strong`\n* `u`\nUse [HTML](https://shopify.dev/api/admin-graphql/latest/scalars/HTML) instead if you need to\ninclude other HTML tags.\n\nExample value: `\"Your current domain is <strong>johns-apparel.myshopify.com</strong>.\"`\n"
scalar FormattedString

"Represents a fulfillment. In Shopify, a fulfillment represents a shipment of one or more items in an order. When an order has been completely fulfilled, it means that all the items that are included in the order have been sent to the customer. There can be more than one fulfillment for an order.\n"
type Fulfillment implements LegacyInteroperability & Node {
  """The date and time when the fulfillment was created."""
  createdAt: DateTime!

  """The date that this fulfillment was delivered."""
  deliveredAt: DateTime

  """Human readable display status for this fulfillment."""
  displayStatus: FulfillmentDisplayStatus

  """The estimated date that this fulfillment will arrive."""
  estimatedDeliveryAt: DateTime

  """The history of events associated with this fulfillment."""
  events(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: FulfillmentEventSortKeys = HAPPENED_AT
  ): FulfillmentEventConnection!

  """List of the fulfillment's line items."""
  fulfillmentLineItems(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): FulfillmentLineItemConnection!

  """A paginated list of fulfillment orders for the fulfillment."""
  fulfillmentOrders(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): FulfillmentOrderConnection!

  """A globally-unique identifier."""
  id: ID!

  """The date and time when the fulfillment went into transit."""
  inTransitAt: DateTime

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The location that the fulfillment was processed at."""
  location: Location

  """Human readable reference identifier for this fulfillment."""
  name: String!

  """The order for which the fulfillment was created."""
  order: Order!

  """
  The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center.
  """
  originAddress: FulfillmentOriginAddress

  """Whether any of the line items in the fulfillment require shipping."""
  requiresShipping: Boolean!

  """Fulfillment service associated with the fulfillment."""
  service: FulfillmentService

  """The status of the fulfillment."""
  status: FulfillmentStatus!

  """Sum of all line item quantities for the fulfillment."""
  totalQuantity: Int!

  "Tracking information associated with the fulfillment,\nsuch as the tracking company, tracking number, and tracking URL.\n"
  trackingInfo(
    """Truncate the array result to this size."""
    first: Int
  ): [FulfillmentTrackingInfo!]!

  "The date and time when the fulfillment was last modified.\n"
  updatedAt: DateTime!
}

"""Return type for `fulfillmentCancel` mutation."""
type FulfillmentCancelPayload {
  """The canceled fulfillment."""
  fulfillment: Fulfillment

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type for paginating through multiple Fulfillments.\n"
type FulfillmentConnection {
  """A list of edges."""
  edges: [FulfillmentEdge!]!

  """A list of the nodes contained in FulfillmentEdge."""
  nodes: [Fulfillment!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `fulfillmentCreateV2` mutation."""
type FulfillmentCreateV2Payload {
  """The created fulfillment."""
  fulfillment: Fulfillment

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""The display status of a fulfillment."""
enum FulfillmentDisplayStatus {
  """Displayed as **Attempted delivery**."""
  ATTEMPTED_DELIVERY

  """Displayed as **Canceled**."""
  CANCELED

  """Displayed as **Confirmed**."""
  CONFIRMED

  """Displayed as **Delivered**."""
  DELIVERED

  """Displayed as **Failure**."""
  FAILURE

  """Displayed as **Fulfilled**."""
  FULFILLED

  """Displayed as **In transit**."""
  IN_TRANSIT

  """Displayed as **Label printed**."""
  LABEL_PRINTED

  """Displayed as **Label purchased**."""
  LABEL_PURCHASED

  """Displayed as **Label voided**."""
  LABEL_VOIDED

  """Displayed as **Marked as fulfilled**."""
  MARKED_AS_FULFILLED

  """Displayed as **Not delivered**."""
  NOT_DELIVERED

  """Displayed as **Out for delivery**."""
  OUT_FOR_DELIVERY

  """Displayed as **Picked up**."""
  PICKED_UP

  """Displayed as **Ready for pickup**."""
  READY_FOR_PICKUP

  """Displayed as **Submitted**."""
  SUBMITTED
}

"An auto-generated type which holds one Fulfillment and a cursor during pagination.\n"
type FulfillmentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentEdge."""
  node: Fulfillment!
}

"""
The fulfillment event that describes the fulfilllment status at a particular time.
"""
type FulfillmentEvent implements Node {
  """The time at which this fulfillment event happened."""
  happenedAt: DateTime!

  """A globally-unique identifier."""
  id: ID!

  """The status of this fulfillment event."""
  status: FulfillmentEventStatus!
}

"An auto-generated type for paginating through multiple FulfillmentEvents.\n"
type FulfillmentEventConnection {
  """A list of edges."""
  edges: [FulfillmentEventEdge!]!

  """A list of the nodes contained in FulfillmentEventEdge."""
  nodes: [FulfillmentEvent!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one FulfillmentEvent and a cursor during pagination.\n"
type FulfillmentEventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentEventEdge."""
  node: FulfillmentEvent!
}

"""The set of valid sort keys for the FulfillmentEvent query."""
enum FulfillmentEventSortKeys {
  """Sort by the `happened_at` value."""
  HAPPENED_AT

  """Sort by the `id` value."""
  ID

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"""The status that describes a fulfillment or delivery event."""
enum FulfillmentEventStatus {
  """A delivery was attempted."""
  ATTEMPTED_DELIVERY

  """
  The fulfillment is confirmed. This is the default value when no other information is available.
  """
  CONFIRMED

  """The fulfillment was successfully delivered."""
  DELIVERED

  """The fulfillment request failed."""
  FAILURE

  """The fulfillment is in transit."""
  IN_TRANSIT

  """A purchased shipping label has been printed."""
  LABEL_PRINTED

  """A shipping label has been purchased."""
  LABEL_PURCHASED

  """The fulfillment is out for delivery."""
  OUT_FOR_DELIVERY

  """The fulfillment is ready to be picked up."""
  READY_FOR_PICKUP
}

"A fulfillment hold currently applied on a fulfillment order.\n"
type FulfillmentHold {
  """The reason for the fulfillment hold."""
  reason: FulfillmentHoldReason!

  """Additional information about the fulfillment hold reason."""
  reasonNotes: String
}

"""The reason for a fulfillment hold."""
enum FulfillmentHoldReason {
  """The fulfillment hold is applied because payment is pending."""
  AWAITING_PAYMENT

  """The fulfillment hold is applied because of a high risk of fraud."""
  HIGH_RISK_OF_FRAUD

  """The fulfillment hold is applied because of an incorrect address."""
  INCORRECT_ADDRESS

  """The fulfillment hold is applied because inventory is out of stock."""
  INVENTORY_OUT_OF_STOCK

  """The fulfillment hold is applied for another reason."""
  OTHER

  """The fulfillment hold is applied because of an unknown delivery date."""
  UNKNOWN_DELIVERY_DATE
}

"""Represents a line item from an order that's included in a fulfillment."""
type FulfillmentLineItem implements Node {
  """The total price after discounts are applied."""
  discountedTotal: Money! @deprecated(reason: "Use `discountedTotalSet` instead")

  """
  The total price after discounts are applied in shop and presentment currencies.
  """
  discountedTotalSet: MoneyBag!

  """A globally-unique identifier."""
  id: ID!

  """The associated order's line item."""
  lineItem: LineItem!

  """The total price before discounts are applied."""
  originalTotal: Money! @deprecated(reason: "Use `originalTotalSet` instead")

  """
  The total price before discounts are applied in shop and presentment currencies.
  """
  originalTotalSet: MoneyBag!

  """Number of line items in the fulfillment."""
  quantity: Int
}

"An auto-generated type for paginating through multiple FulfillmentLineItems.\n"
type FulfillmentLineItemConnection {
  """A list of edges."""
  edges: [FulfillmentLineItemEdge!]!

  """A list of the nodes contained in FulfillmentLineItemEdge."""
  nodes: [FulfillmentLineItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.\n"
type FulfillmentLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentLineItemEdge."""
  node: FulfillmentLineItem!
}

"Represents a fulfillment order. In Shopify, a fulfillment order represents a group of one or more items\nin an order that are to be fulfilled from the same location. There can be more than one fulfillment order\nfor an order at a given location.\n"
type FulfillmentOrder implements Node {
  """
  The fulfillment order's assigned location. This is the location expected to perform fulfillment.
  """
  assignedLocation: FulfillmentOrderAssignedLocation!

  """Delivery method of this fulfillment order."""
  deliveryMethod: DeliveryMethod

  """The destination where the items should be sent."""
  destination: FulfillmentOrderDestination

  """The date and time at which the fulfillment order will be fulfillable."""
  fulfillAt: DateTime

  """
  The latest date and time by which all items in the fulfillment order need to be fulfilled.
  """
  fulfillBy: DateTime

  """The fulfillment holds applied on the fulfillment order."""
  fulfillmentHolds: [FulfillmentHold!]!

  """A list of fulfillments for the fulfillment order."""
  fulfillments(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): FulfillmentConnection!

  """A globally-unique identifier."""
  id: ID!

  """The duties delivery method of this fulfillment order."""
  internationalDuties: FulfillmentOrderInternationalDuties

  """A list of the fulfillment order's line items."""
  lineItems(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): FulfillmentOrderLineItemConnection!

  """
  A list of locations that the fulfillment order can potentially move to.
  """
  locationsForMove(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): FulfillmentOrderLocationForMoveConnection!

  """
  A list of requests sent by the merchant to the fulfillment service for this fulfillment order.
  """
  merchantRequests(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """The kind of request the merchant sent."""
    kind: FulfillmentOrderMerchantRequestKind

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): FulfillmentOrderMerchantRequestConnection!

  """The order that's associated with the fulfillment order."""
  order: Order!

  """The request status of the fulfillment order."""
  requestStatus: FulfillmentOrderRequestStatus!

  """The status of the fulfillment order."""
  status: FulfillmentOrderStatus!

  """The actions that can be performed on this fulfillment order."""
  supportedActions: [FulfillmentOrderSupportedAction!]!
}

"""Return type for `fulfillmentOrderAcceptCancellationRequest` mutation."""
type FulfillmentOrderAcceptCancellationRequestPayload {
  """The fulfillment order whose cancellation request was accepted."""
  fulfillmentOrder: FulfillmentOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `fulfillmentOrderAcceptFulfillmentRequest` mutation."""
type FulfillmentOrderAcceptFulfillmentRequestPayload {
  """The fulfillment order whose fulfillment request was accepted."""
  fulfillmentOrder: FulfillmentOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""The actions that can be taken on a fulfillment order."""
enum FulfillmentOrderAction {
  """
  Cancels a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderCancel`.
  """
  CANCEL_FULFILLMENT_ORDER

  """
  Creates a fulfillment for selected line items in the fulfillment order. The corresponding mutation for this action is `fulfillmentCreateV2`.
  """
  CREATE_FULFILLMENT

  """
  Opens an external URL to initiate the fulfillment process outside Shopify. This action should be paired with `FulfillmentOrderSupportedAction.externalUrl`.
  """
  EXTERNAL

  """
  Applies a fulfillment hold on an open fulfillment order. The corresponding mutation for this action is `fulfillmentOrderHold`.
  """
  HOLD

  """
  Marks the fulfillment order as open. The corresponding mutation for this action is `fulfillmentOrderOpen`.
  """
  MARK_AS_OPEN

  """
  Moves a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderMove`.
  """
  MOVE

  """
  Releases the fulfillment hold on the fulfillment order. The corresponding mutation for this action is `fulfillmentOrderReleaseHold`.
  """
  RELEASE_HOLD

  """
  Sends a cancellation request to the fulfillment service of a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderSubmitCancellationRequest`.
  """
  REQUEST_CANCELLATION

  """
  Sends a request for fulfilling selected line items in a fulfillment order to a fulfillment service. The corresponding mutation for this action is `fulfillmentOrderSubmitFulfillmentRequest`.
  """
  REQUEST_FULFILLMENT
}

"Represents the assigned location of a fulfillment order, which is a snapshot of the location\nat which the fulfillment order was created. The assigned location is expected to perform fulfillment.\n"
type FulfillmentOrderAssignedLocation {
  """The first line of the address for the location."""
  address1: String

  """The second line of the address for the location."""
  address2: String

  """The city of the location."""
  city: String

  """The two-letter country code of the location."""
  countryCode: CountryCode!

  "The location where the fulfillment order was created. This can differ from the\n`FulfillmentOrderAssignedLocation` if the location was updated since the fulfillment order\nwas closed.\n"
  location: Location

  """The name of the location."""
  name: String!

  """The phone number of the location."""
  phone: String

  """The province of the location."""
  province: String

  """The ZIP code of the location."""
  zip: String
}

"""The assigment status to be used to filter fulfillment orders."""
enum FulfillmentOrderAssignmentStatus {
  "Fulfillment orders for which the merchant has requested cancellation of\nthe previously accepted fulfillment request.\n"
  CANCELLATION_REQUESTED

  "Fulfillment orders for which the merchant's fulfillment request has been accepted.\nAny number of fulfillments can be created on these fulfillment orders\nto completely fulfill the requested items.\n"
  FULFILLMENT_ACCEPTED

  "Fulfillment orders for which the merchant has requested fulfillment.\n"
  FULFILLMENT_REQUESTED
}

"""Return type for `fulfillmentOrderCancel` mutation."""
type FulfillmentOrderCancelPayload {
  """The fulfillment order that was marked as canceled."""
  fulfillmentOrder: FulfillmentOrder

  """
  The fulfillment order that was created to replace the canceled fulfillment order.
  """
  replacementFulfillmentOrder: FulfillmentOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `fulfillmentOrderClose` mutation."""
type FulfillmentOrderClosePayload {
  """The fulfillment order that was marked as incomplete."""
  fulfillmentOrder: FulfillmentOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type for paginating through multiple FulfillmentOrders.\n"
type FulfillmentOrderConnection {
  """A list of edges."""
  edges: [FulfillmentOrderEdge!]!

  """A list of the nodes contained in FulfillmentOrderEdge."""
  nodes: [FulfillmentOrder!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"Represents the destination where the items should be sent upon fulfillment.\n"
type FulfillmentOrderDestination implements Node {
  """The first line of the address of the destination."""
  address1: String

  """The second line of the address of the destination."""
  address2: String

  """The city of the destination."""
  city: String

  """The company of the destination."""
  company: String

  """The two-letter country code of the destination."""
  countryCode: CountryCode

  """The email of the customer at the destination."""
  email: String

  """The first name of the customer at the destination."""
  firstName: String

  """A globally-unique identifier."""
  id: ID!

  """The last name of the customer at the destination."""
  lastName: String

  """The phone number of the customer at the destination."""
  phone: String

  """The province of the destination."""
  province: String

  """The ZIP code of the destination."""
  zip: String
}

"An auto-generated type which holds one FulfillmentOrder and a cursor during pagination.\n"
type FulfillmentOrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentOrderEdge."""
  node: FulfillmentOrder!
}

"""
Input arguments for the fulfillment hold applied on the fulfillment order.
"""
input FulfillmentOrderHoldInput {
  """
  Whether the merchant receives a notification about the fulfillment hold. The default value is `false`.
  """
  notifyMerchant: Boolean = false

  """The reason for the fulfillment hold."""
  reason: FulfillmentHoldReason!

  """Additional information about the fulfillment hold reason."""
  reasonNotes: String
}

"""Return type for `fulfillmentOrderHold` mutation."""
type FulfillmentOrderHoldPayload {
  """The fulfillment order on which a fulfillment hold was applied."""
  fulfillmentOrder: FulfillmentOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [FulfillmentOrderHoldUserError!]!
}

"""An error that occurs during the execution of `FulfillmentOrderHold`."""
type FulfillmentOrderHoldUserError implements DisplayableError {
  """The error code."""
  code: FulfillmentOrderHoldUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `FulfillmentOrderHoldUserError`.
"""
enum FulfillmentOrderHoldUserErrorCode {
  """The fulfillment order could not be found."""
  FULFILLMENT_ORDER_NOT_FOUND
}

"The international duties relevant to a fulfillment order.\n"
type FulfillmentOrderInternationalDuties {
  """The method of duties payment. Example values: `DDP`, `DAP`."""
  incoterm: String!
}

"A line item that belongs to a fulfillment order.\n"
type FulfillmentOrderLineItem implements Node {
  """A globally-unique identifier."""
  id: ID!

  """The associated order line item."""
  lineItem: LineItem!

  """The number of units remaining to be fulfilled."""
  remainingQuantity: Int!

  """The total number of units to be fulfilled."""
  totalQuantity: Int!

  """Warning messages for a fulfillment order line item."""
  warnings: [FulfillmentOrderLineItemWarning!]!
}

"An auto-generated type for paginating through multiple FulfillmentOrderLineItems.\n"
type FulfillmentOrderLineItemConnection {
  """A list of edges."""
  edges: [FulfillmentOrderLineItemEdge!]!

  """A list of the nodes contained in FulfillmentOrderLineItemEdge."""
  nodes: [FulfillmentOrderLineItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one FulfillmentOrderLineItem and a cursor during pagination.\n"
type FulfillmentOrderLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentOrderLineItemEdge."""
  node: FulfillmentOrderLineItem!
}

"The input fields used to include the quantity of the fulfillment order line item that should be fulfilled.\n"
input FulfillmentOrderLineItemInput {
  """The ID of the fulfillment order line item."""
  id: ID!

  """The quantity of the fulfillment order line item."""
  quantity: Int!
}

"A fulfillment order line item warning. For example, a warning about why a fulfillment request was rejected.\n"
type FulfillmentOrderLineItemWarning {
  """The description of warning."""
  description: String

  """The title of warning."""
  title: String
}

"The input fields used to include the line items of a specified fulfillment order that should be fulfilled.\n"
input FulfillmentOrderLineItemsInput {
  """The ID of the fulfillment order."""
  fulfillmentOrderId: ID!

  "The fulfillment order line items to be fulfilled.\nIf left blank, all line items of the fulfillment order will be fulfilled.\n"
  fulfillmentOrderLineItems: [FulfillmentOrderLineItemInput!]
}

"A location that a fulfillment order can potentially move to.\n"
type FulfillmentOrderLocationForMove {
  """
  The location being considered as the fulfillment order's new assigned location.
  """
  location: Location!

  "A human-readable string with the reason why the fulfillment order, or some of its line items, can't be\nmoved to the location.\n"
  message: String

  """Whether the fulfillment order can be moved to the location."""
  movable: Boolean!
}

"An auto-generated type for paginating through multiple FulfillmentOrderLocationForMoves.\n"
type FulfillmentOrderLocationForMoveConnection {
  """A list of edges."""
  edges: [FulfillmentOrderLocationForMoveEdge!]!

  """A list of the nodes contained in FulfillmentOrderLocationForMoveEdge."""
  nodes: [FulfillmentOrderLocationForMove!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one FulfillmentOrderLocationForMove and a cursor during pagination.\n"
type FulfillmentOrderLocationForMoveEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentOrderLocationForMoveEdge."""
  node: FulfillmentOrderLocationForMove!
}

"Represents a request made by the merchant to a fulfillment service for a fulfillment order.\n"
type FulfillmentOrderMerchantRequest implements Node {
  """A globally-unique identifier."""
  id: ID!

  """The kind of request made."""
  kind: FulfillmentOrderMerchantRequestKind!

  """The optional message that the merchant included in the request."""
  message: String

  "Additional options requested by the merchant. These depend on the `kind` of the request.\nFor example, for a `FULFILLMENT_REQUEST`, one option is `notify_customer`, which indicates whether the\nmerchant intends to notify the customer upon fulfillment. The fulfillment service can then set\n`notifyCustomer` when making calls to `FulfillmentCreateV2`.\n"
  requestOptions: JSON

  """The response from the fulfillment service."""
  responseData: JSON

  """The timestamp when the request was made."""
  sentAt: DateTime!
}

"An auto-generated type for paginating through multiple FulfillmentOrderMerchantRequests.\n"
type FulfillmentOrderMerchantRequestConnection {
  """A list of edges."""
  edges: [FulfillmentOrderMerchantRequestEdge!]!

  """A list of the nodes contained in FulfillmentOrderMerchantRequestEdge."""
  nodes: [FulfillmentOrderMerchantRequest!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one FulfillmentOrderMerchantRequest and a cursor during pagination.\n"
type FulfillmentOrderMerchantRequestEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentOrderMerchantRequestEdge."""
  node: FulfillmentOrderMerchantRequest!
}

"""The kinds of request merchants can make to a fulfillment service."""
enum FulfillmentOrderMerchantRequestKind {
  "The merchant requests cancellation of an `IN_PROGRESS` fulfillment order.\n"
  CANCELLATION_REQUEST

  "The merchant requests fulfillment for an `OPEN` fulfillment order.\n"
  FULFILLMENT_REQUEST
}

"""Return type for `fulfillmentOrderMove` mutation."""
type FulfillmentOrderMovePayload {
  """
  A new fulfillment order representing of the all line items that were moved to the new location.
  """
  movedFulfillmentOrder: FulfillmentOrder

  """
  The fulfillment order that was moved. On success, this fulfillment order will be closed.
  """
  originalFulfillmentOrder: FulfillmentOrder

  "A new fulfillment order representing the remaining line items that are still assigned to the original\nlocation. This field is returned when any line items on the original fulfillment order can't be moved\nbecause they are are not stocked at the new location.\n"
  remainingFulfillmentOrder: FulfillmentOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `fulfillmentOrderOpen` mutation."""
type FulfillmentOrderOpenPayload {
  """
  The fulfillment order that was transitioned to open and is fulfillable.
  """
  fulfillmentOrder: FulfillmentOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `fulfillmentOrderRejectCancellationRequest` mutation."""
type FulfillmentOrderRejectCancellationRequestPayload {
  """The fulfillment order whose cancellation request was rejected."""
  fulfillmentOrder: FulfillmentOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `fulfillmentOrderRejectFulfillmentRequest` mutation."""
type FulfillmentOrderRejectFulfillmentRequestPayload {
  """The fulfillment order whose fulfillment request was rejected."""
  fulfillmentOrder: FulfillmentOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""The reason for a fulfillment order rejection."""
enum FulfillmentOrderRejectionReason {
  """The fulfillment order was rejected because of an incorrect address."""
  INCORRECT_ADDRESS

  """The fulfillment order was rejected because of an ineligible product."""
  INELIGIBLE_PRODUCT

  """The fulfillment order was rejected because inventory is out of stock."""
  INVENTORY_OUT_OF_STOCK

  """The fulfillment order was rejected for another reason."""
  OTHER

  """
  The fulfillment order was rejected because of an undeliverable destination.
  """
  UNDELIVERABLE_DESTINATION
}

"""Return type for `fulfillmentOrderReleaseHold` mutation."""
type FulfillmentOrderReleaseHoldPayload {
  """The fulfillment order on which the hold was released."""
  fulfillmentOrder: FulfillmentOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [FulfillmentOrderReleaseHoldUserError!]!
}

"""
An error that occurs during the execution of `FulfillmentOrderReleaseHold`.
"""
type FulfillmentOrderReleaseHoldUserError implements DisplayableError {
  """The error code."""
  code: FulfillmentOrderReleaseHoldUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `FulfillmentOrderReleaseHoldUserError`.
"""
enum FulfillmentOrderReleaseHoldUserErrorCode {
  """The fulfillment order wasn't found."""
  FULFILLMENT_ORDER_NOT_FOUND
}

"""The request status of a fulfillment order."""
enum FulfillmentOrderRequestStatus {
  """The fulfillment service accepted the merchant's fulfillment request."""
  ACCEPTED

  "The fulfillment service accepted the merchant's fulfillment cancellation request.\n"
  CANCELLATION_ACCEPTED

  "The fulfillment service rejected the merchant's fulfillment cancellation request.\n"
  CANCELLATION_REJECTED

  "The merchant requested a cancellation of the fulfillment request for this fulfillment order.\n"
  CANCELLATION_REQUESTED

  """
  The fulfillment service closed the fulfillment order without completing it.
  """
  CLOSED

  """The fulfillment service rejected the merchant's fulfillment request."""
  REJECTED

  """The merchant requested fulfillment for this fulfillment order."""
  SUBMITTED

  "The initial request status for the newly-created fulfillment orders. This is the only valid\nrequest status for fulfillment orders that aren't assigned to a fulfillment service.\n"
  UNSUBMITTED
}

"""Return type for `fulfillmentOrderReschedule` mutation."""
type FulfillmentOrderReschedulePayload {
  """The fulfillment order that was rescheduled."""
  fulfillmentOrder: FulfillmentOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [FulfillmentOrderRescheduleUserError!]!
}

"""
An error that occurs during the execution of `FulfillmentOrderReschedule`.
"""
type FulfillmentOrderRescheduleUserError implements DisplayableError {
  """The error code."""
  code: FulfillmentOrderRescheduleUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `FulfillmentOrderRescheduleUserError`.
"""
enum FulfillmentOrderRescheduleUserErrorCode {
  """Fulfillment order could not be found."""
  FULFILLMENT_ORDER_NOT_FOUND
}

"""The set of valid sort keys for the FulfillmentOrder query."""
enum FulfillmentOrderSortKeys {
  """Sort by the `id` value."""
  ID

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"""The status of a fulfillment order."""
enum FulfillmentOrderStatus {
  """The fulfillment order has been cancelled by the merchant."""
  CANCELLED

  """The fulfillment order has been completed and closed."""
  CLOSED

  """The fulfillment order cannot be completed as requested."""
  INCOMPLETE

  """The fulfillment order is being processed."""
  IN_PROGRESS

  """
  The fulfillment order is on hold. The fulfillment process can't be initiated until the hold on the fulfillment order is released.
  """
  ON_HOLD

  """The fulfillment order is ready for fulfillment."""
  OPEN

  """
  The fulfillment order is deferred and will be ready for fulfillment after the date and time specified in `fulfill_at`.
  """
  SCHEDULED
}

"""Return type for `fulfillmentOrderSubmitCancellationRequest` mutation."""
type FulfillmentOrderSubmitCancellationRequestPayload {
  """The fulfillment order specified in the cancelation request."""
  fulfillmentOrder: FulfillmentOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `fulfillmentOrderSubmitFulfillmentRequest` mutation."""
type FulfillmentOrderSubmitFulfillmentRequestPayload {
  "The original fulfillment order intended to request fulfillment for.\n"
  originalFulfillmentOrder: FulfillmentOrder

  "The fulfillment order that was submitted to the fulfillment service. This will be the same as\nthe original fulfillment order field. The exception to this is partial fulfillment requests or\nfulfillment request for cancelled or incomplete fulfillment orders.\n"
  submittedFulfillmentOrder: FulfillmentOrder

  "This field will only be present for partial fulfillment requests. This will represent the new\nfulfillment order with the remaining line items not submitted to the fulfillment service.\n"
  unsubmittedFulfillmentOrder: FulfillmentOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"One of the actions that the fulfillment order supports in its current state.\n"
type FulfillmentOrderSupportedAction {
  """The action value."""
  action: FulfillmentOrderAction!

  "The external URL to be used to initiate the fulfillment process outside Shopify.\nApplicable only when the `action` value is `EXTERNAL`.\n"
  externalUrl: URL
}

"""Return type for `fulfillmentOrdersSetFulfillmentDeadline` mutation."""
type FulfillmentOrdersSetFulfillmentDeadlinePayload {
  """Whether the fulfillment deadline was successfully set."""
  success: Boolean

  """The list of errors that occurred from executing the mutation."""
  userErrors: [FulfillmentOrdersSetFulfillmentDeadlineUserError!]!
}

"""
An error that occurs during the execution of `FulfillmentOrdersSetFulfillmentDeadline`.
"""
type FulfillmentOrdersSetFulfillmentDeadlineUserError implements DisplayableError {
  """The error code."""
  code: FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `FulfillmentOrdersSetFulfillmentDeadlineUserError`.
"""
enum FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode {
  """The fulfillment orders could not be found."""
  FULFILLMENT_ORDERS_NOT_FOUND
}

"""
The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center.
"""
type FulfillmentOriginAddress {
  """The street address of the fulfillment location."""
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """The city in which the fulfillment location is located."""
  city: String

  """The country code of the fulfillment location."""
  countryCode: String!

  """The province code of the fulfillment location."""
  provinceCode: String

  """The zip code of the fulfillment location."""
  zip: String
}

"""
The input fields used to include the address at which the fulfillment occurred. Typically the address of a warehouse or a fulfillment center.
"""
input FulfillmentOriginAddressInput {
  """The street address of the fulfillment location."""
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """The city in which the fulfillment location is located."""
  city: String

  """The country of the fulfillment location."""
  countryCode: String!

  """The province of the fulfillment location."""
  provinceCode: String

  """The zip code of the fulfillment location."""
  zip: String
}

"Represents a fulfillment service. A fulfillment service is a third-party service that prepares and ships orders on behalf of the store owner.\n"
type FulfillmentService {
  """The callback URL the fulfillment service has registered for requests."""
  callbackUrl: URL

  """
  Whether the fulfillment service has opted into fulfillment order based requests.
  """
  fulfillmentOrdersOptIn: Boolean!

  """Human-readable unique identifier for this fulfillment service."""
  handle: String!

  """The ID of the fulfillment service."""
  id: ID!

  """
  Whether the fulfillment service tracks product inventory and provides updates to Shopify.
  """
  inventoryManagement: Boolean!

  """Location associated with the fulfillment service."""
  location: Location

  """
  Whether the fulfillment service can stock inventory alongside other locations.
  """
  permitsSkuSharing: Boolean!

  """Whether the fulfillment service supports local deliveries."""
  productBased: Boolean!

  """The name of the fulfillment service as seen by merchants."""
  serviceName: String!

  """Shipping methods associated with the fulfillment service provider."""
  shippingMethods: [ShippingMethod!]!

  """Type associated with the fulfillment service."""
  type: FulfillmentServiceType!
}

"""Return type for `fulfillmentServiceCreate` mutation."""
type FulfillmentServiceCreatePayload {
  """The created fulfillment service."""
  fulfillmentService: FulfillmentService

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `fulfillmentServiceDelete` mutation."""
type FulfillmentServiceDeletePayload {
  """The ID of the deleted fulfillment service."""
  deletedId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""The type of a fulfillment service."""
enum FulfillmentServiceType {
  """Fulfillment by gift card."""
  GIFT_CARD

  """Manual fulfillment by the merchant."""
  MANUAL

  """Fullfillment by a third-party fulfillment service."""
  THIRD_PARTY
}

"""Return type for `fulfillmentServiceUpdate` mutation."""
type FulfillmentServiceUpdatePayload {
  """The updated fulfillment service."""
  fulfillmentService: FulfillmentService

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""The status of a fulfillment."""
enum FulfillmentStatus {
  """The fulfillment was canceled."""
  CANCELLED

  """There was an error with the fulfillment request."""
  ERROR

  """The fulfillment request failed."""
  FAILURE

  "The third-party fulfillment service has acknowledged the fulfillment and is processing it.\n"
  OPEN @deprecated(reason: "This is a legacy status and is due to be deprecated.")

  "Shopify has created the fulfillment and is waiting for the third-party fulfillment service to transition it to `open` or `success`.\n"
  PENDING @deprecated(reason: "This is a legacy status and is due to be deprecated.")

  """The fulfillment was completed successfully."""
  SUCCESS
}

"""Represents the tracking information for a fulfillment."""
type FulfillmentTrackingInfo {
  """The name of the tracking company."""
  company: String

  """The tracking number of the fulfillment."""
  number: String

  """The URLs to track the fulfillment."""
  url: URL
}

"""Return type for `fulfillmentTrackingInfoUpdateV2` mutation."""
type FulfillmentTrackingInfoUpdateV2Payload {
  """The updated fulfillment with tracking information."""
  fulfillment: Fulfillment

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""
The input fields that specify all possible fields for tracking information.
"""
input FulfillmentTrackingInput {
  """The name of the tracking company."""
  company: String

  """The tracking number of the fulfillment."""
  number: String

  """The tracking numbers of the fulfillment, if there are multiple."""
  numbers: [String!]

  """The URL to track the fulfillment."""
  url: URL

  """The URLs to track the fulfillment, if there are multiple."""
  urls: [URL!]
}

"""The input fields used to create a fulfillment from fulfillment orders."""
input FulfillmentV2Input {
  "Pairs of `fulfillment_order_id` and `fulfillment_order_line_items` that represent the fulfillment\norder line items that have to be fulfilled for each fulfillment order.  For any given pair, if the\nfulfillment order line items are left blank then all the fulfillment order line items of the\nassociated fulfillment order ID will be fulfilled.\n"
  lineItemsByFulfillmentOrder: [FulfillmentOrderLineItemsInput!]!

  "Whether the customer is notified.\nIf `true`, then a notification is sent when the fulfillment is created.\n"
  notifyCustomer: Boolean = false

  "Address information about the location from which the order was fulfilled.\n"
  originAddress: FulfillmentOriginAddressInput

  "The fulfillment's tracking information, including a tracking URL, a tracking number,\nand the company associated with the fulfillment.\n"
  trackingInfo: FulfillmentTrackingInput
}

"""The App Bridge information for a Shopify Function."""
type FunctionsAppBridge {
  """The relative path for creating a customization."""
  createPath: String!

  """The relative path for viewing a customization."""
  detailsPath: String!
}

"""The error history from running a Shopify Function."""
type FunctionsErrorHistory {
  """The date and time that the first error occurred."""
  errorsFirstOccurredAt: DateTime!

  """The date and time that the first error occurred."""
  firstOccurredAt: DateTime!

  """
  Whether the merchant has shared all the recent errors with the developer.
  """
  hasBeenSharedSinceLastError: Boolean!

  """
  Whether the merchant has shared all the recent errors with the developer.
  """
  hasSharedRecentErrors: Boolean!
}

"Represents any file other than HTML.\n"
type GenericFile implements File & Node {
  """A word or phrase to describe the contents or the function of a file."""
  alt: String

  "The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.\n"
  createdAt: DateTime!

  """Any errors that have occurred on the file."""
  fileErrors: [FileError!]!

  """The status of the file."""
  fileStatus: FileStatus!

  """A globally-unique identifier."""
  id: ID!

  """The generic file's MIME type."""
  mimeType: String

  """The generic file's size in bytes."""
  originalFileSize: Int

  """The preview image for the media."""
  preview: MediaPreviewImage

  """The generic file's URL."""
  url: URL
}

"""Represents an issued gift card."""
type GiftCard implements Node {
  """The gift card's remaining balance."""
  balance: MoneyV2!

  """The date and time at which the gift card was created."""
  createdAt: DateTime!

  """The customer who will receive the gift card."""
  customer: Customer

  """The date and time at which the gift card was disabled."""
  disabledAt: DateTime

  """Whether the gift card is enabled."""
  enabled: Boolean!

  """The date at which the gift card will expire."""
  expiresOn: Date

  """A globally-unique identifier."""
  id: ID!

  """The initial value of the gift card."""
  initialValue: MoneyV2!

  """The final four characters of the gift card code."""
  lastCharacters: String!

  """
  The gift card code. Everything but the final four characters is masked.
  """
  maskedCode: String!

  """
  The note associated with the gift card, which is not visible to the customer.
  """
  note: String

  "The order associated with the gift card. This value is `null` if the gift card was issued manually.\n"
  order: Order
}

"An auto-generated type for paginating through multiple GiftCards.\n"
type GiftCardConnection {
  """A list of edges."""
  edges: [GiftCardEdge!]!

  """A list of the nodes contained in GiftCardEdge."""
  nodes: [GiftCard!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Specifies the input fields to issue a gift card."""
input GiftCardCreateInput {
  "The gift card's code. It must be 8-20 characters long and contain only letters(a-z) and numbers(0-9).\nIt is not case sensitive. If not provided, then a random code will be generated.\n"
  code: String

  """
  The ID of the customer who will receive the gift card. Requires `write_customers` access_scope.
  """
  customerId: ID

  "The date at which the gift card will expire. If not provided, then the gift card will never expire.\n"
  expiresOn: Date

  """The initial value of the gift card."""
  initialValue: Decimal!

  """
  The note associated with the gift card, which is not visible to the customer.
  """
  note: String

  "The suffix of the Liquid template that is used to render the gift card online.\nFor example, if the value is `birthday`, then the gift card is rendered using the template `gift_card.birthday.liquid`.\nIf not provided, then the default `gift_card.liquid` template is used.\n"
  templateSuffix: String
}

"""Return type for `giftCardCreate` mutation."""
type GiftCardCreatePayload {
  """The created gift card."""
  giftCard: GiftCard

  """The created gift card's code."""
  giftCardCode: String

  """The list of errors that occurred from executing the mutation."""
  userErrors: [GiftCardUserError!]!
}

"""Return type for `giftCardDisable` mutation."""
type GiftCardDisablePayload {
  """The disabled gift card."""
  giftCard: GiftCard

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type which holds one GiftCard and a cursor during pagination.\n"
type GiftCardEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of GiftCardEdge."""
  node: GiftCard!
}

"""Possible error codes that can be returned by `GiftCardUserError`."""
enum GiftCardErrorCode {
  """The input value should be greater than the minimum allowed value."""
  GREATER_THAN

  """Unexpected internal error happened."""
  INTERNAL_ERROR

  """The input value is invalid."""
  INVALID

  """Missing a required argument."""
  MISSING_ARGUMENT

  """The input value is already taken."""
  TAKEN

  """The input value is too long."""
  TOO_LONG

  """The input value is too short."""
  TOO_SHORT
}

"""A sale associated with a gift card."""
type GiftCardSale implements Sale {
  """The type of order action that the sale represents."""
  actionType: SaleActionType!

  """The unique identifier for the sale."""
  id: ID!

  """The line item for the associated sale."""
  lineItem: LineItem!

  """The line type assocated with the sale."""
  lineType: SaleLineType!

  """The number of units either ordered or intended to be returned."""
  quantity: Int

  """All individual taxes associated with the sale."""
  taxes: [SaleTax!]!

  """The total sale amount after taxes and discounts."""
  totalAmount: MoneyBag!

  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: MoneyBag!

  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """The total amount of taxes for the sale."""
  totalTaxAmount: MoneyBag!
}

"""The set of valid sort keys for the GiftCard query."""
enum GiftCardSortKeys {
  """Sort by the `amount_spent` value."""
  AMOUNT_SPENT

  """Sort by the `balance` value."""
  BALANCE

  """Sort by the `code` value."""
  CODE

  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `customer_name` value."""
  CUSTOMER_NAME

  """Sort by the `disabled_at` value."""
  DISABLED_AT

  """Sort by the `expires_on` value."""
  EXPIRES_ON

  """Sort by the `id` value."""
  ID

  """Sort by the `initial_value` value."""
  INITIAL_VALUE

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE

  """Sort by the `updated_at` value."""
  UPDATED_AT
}

"""Specifies the input fields to update a gift card."""
input GiftCardUpdateInput {
  "The ID of the customer who will receive the gift card. The ID cannot be changed if the gift card already has an assigned customer ID.\n"
  customerId: ID

  "The date at which the gift card will expire. If set to `null`, then the gift card will never expire.\n"
  expiresOn: Date

  """
  The note associated with the gift card, which is not visible to the customer.
  """
  note: String

  "The suffix of the Liquid template that is used to render the gift card online.\nFor example, if the value is `birthday`, then the gift card is rendered using the template `gift_card.birthday.liquid`.\n"
  templateSuffix: String
}

"""Return type for `giftCardUpdate` mutation."""
type GiftCardUpdatePayload {
  """The updated gift card."""
  giftCard: GiftCard

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""
Represents an error that happens during the execution of a gift card mutation.
"""
type GiftCardUserError implements DisplayableError {
  """The error code."""
  code: GiftCardErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"A string containing HTML code. Refer to the [HTML spec](https://html.spec.whatwg.org/#elements-3) for a\ncomplete list of HTML elements.\n\nExample value: `\"<p>Grey cotton knit sweater.</p>\"`.\n"
scalar HTML

"""Represents an object that has a list of events."""
interface HasEvents {
  """The paginated list of events associated with the host subject."""
  events(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `comments`\n - `created_at`\n - `subject_type`\n - `verb`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: EventSortKeys = ID
  ): EventConnection!
}

"Localization extensions associated with the specified resource. For example, the tax id for government invoice.\n"
interface HasLocalizationExtensions {
  """List of localization extensions for the resource."""
  localizationExtensions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """The country codes of the extensions."""
    countryCodes: [CountryCode!]

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The purpose of the extensions."""
    purposes: [LocalizationExtensionPurpose!]

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): LocalizationExtensionConnection!
}

"""Resources that metafield definitions can be applied to."""
interface HasMetafieldDefinitions {
  """List of metafield definitions."""
  metafieldDefinitions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    "Supported filter parameters:\n - `created_at`\n - `key`\n - `namespace`\n - `owner_type`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection!
}

"""
Represents information about the metafields associated to the specified resource.
"""
interface HasMetafields {
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The key for the metafield."""
    key: String!

    """The namespace for the metafield."""
    namespace: String!
  ): Metafield

  """List of metafields that belong to the resource."""
  metafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The metafield namespace to filter by."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The key for the private metafield."""
    key: String!

    """The namespace for the private metafield."""
    namespace: String!
  ): PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter the private metafields by namespace."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PrivateMetafieldConnection!
}

"""Published translations associated with the resource."""
interface HasPublishedTranslations {
  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [PublishedTranslation!]!
}

"""Represents an image resource."""
type Image implements HasMetafields {
  """A word or phrase to share the nature or contents of an image."""
  altText: String

  """
  The original height of the image in pixels. Returns `null` if the image is not hosted by Shopify.
  """
  height: Int

  """A unique identifier for the image."""
  id: ID

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The key for the metafield."""
    key: String!

    """The namespace for the metafield."""
    namespace: String!
  ): Metafield

  """List of metafields that belong to the resource."""
  metafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The metafield namespace to filter by."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  "The location of the original image as a URL.\n\nIf there are any existing transformations in the original source URL, they will remain and not be stripped.\n"
  originalSrc: URL! @deprecated(reason: "Use `url` instead")

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The key for the private metafield."""
    key: String!

    """The namespace for the private metafield."""
    namespace: String!
  ): PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter the private metafields by namespace."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PrivateMetafieldConnection!

  """The location of the image as a URL."""
  src: URL! @deprecated(reason: "Use `url` instead")

  "The location of the transformed image as a URL.\n\nAll transformation arguments are considered \"best-effort\". If they can be applied to an image, they will be.\nOtherwise any transformations which an image type does not support will be ignored.\n"
  transformedSrc(
    """Crops the image according to the specified region."""
    crop: CropRegion

    """Image height in pixels between 1 and 5760."""
    maxHeight: Int

    """Image width in pixels between 1 and 5760."""
    maxWidth: Int

    """
    Best effort conversion of image into content type (SVG -> PNG, Anything -> JPG, Anything -> WEBP are supported).
    """
    preferredContentType: ImageContentType

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int = 1
  ): URL! @deprecated(reason: "Use `url(transform:)` instead")

  "The location of the image as a URL.\n\nIf no transform options are specified, then the original image will be preserved including any pre-applied transforms.\n\nAll transformation options are considered \"best-effort\". Any transformation that the original image type doesn't support will be ignored.\n\nIf you need multiple variations of the same image, then you can use [GraphQL aliases](https://graphql.org/learn/queries/#aliases).\n"
  url(
    """A set of options to transform the original image."""
    transform: ImageTransformInput
  ): URL!

  """
  The original width of the image in pixels. Returns `null` if the image is not hosted by Shopify.
  """
  width: Int
}

"An auto-generated type for paginating through multiple Images.\n"
type ImageConnection {
  """A list of edges."""
  edges: [ImageEdge!]!

  """A list of the nodes contained in ImageEdge."""
  nodes: [Image!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""List of supported image content types."""
enum ImageContentType {
  """A JPG image."""
  JPG

  """A PNG image."""
  PNG

  """A WEBP image."""
  WEBP
}

"An auto-generated type which holds one Image and a cursor during pagination.\n"
type ImageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ImageEdge."""
  node: Image!
}

"""Specifies the input fields for an image."""
input ImageInput {
  """A word or phrase to share the nature or contents of an image."""
  altText: String

  """A globally-unique identifier."""
  id: ID

  """The URL of the image. May be a staged upload URL."""
  src: String
}

"The available options for transforming an image.\n\nAll transformation options are considered \"best-effort\". Any transformation that the original image type doesn't support will be ignored.\n"
input ImageTransformInput {
  "Region of the image to remain after cropping.\nMust be used in conjunction with maxWidth and/or maxHeight fields where the maxWidth / maxHeight are not equal.\nThe crop parameter should coincide with the smaller value (i.e. smaller maxWidth indicates a LEFT / RIGHT crop, while\nsmaller maxHeight indicates a TOP / BOTTOM crop). For example, { maxWidth: 5, maxHeight: 10, crop: LEFT } will result\nin an image with width 5 and height 10, where the right side of the image is removed.\n"
  crop: CropRegion

  "Image height in pixels between 1 and 5760.\n"
  maxHeight: Int

  "Image width in pixels between 1 and 5760.\n"
  maxWidth: Int

  "Convert the source image into the preferred content type.\nSupported conversions: `.svg` to `.png`, any file type to `.jpg`, and any file type to `.webp`.\n"
  preferredContentType: ImageContentType

  "Image size multiplier for high-resolution retina displays. Must be within 1..3.\n"
  scale: Int = 1
}

"Upload parameter of an image.\n\nDeprecated in favor of\n[StagedUploadParameter](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadParameter),\nwhich is used in\n[StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget)\nand returned by the\n[stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).\n"
type ImageUploadParameter {
  """Parameter name."""
  name: String!

  """Parameter value."""
  value: String!
}

"""The incoming line item."""
input IncomingRequestLineItemInput {
  """The ID of the rejected line item."""
  fulfillmentOrderLineItemId: ID!

  """The rejection message of the line item."""
  message: String
}

"""Return type for `inventoryActivate` mutation."""
type InventoryActivatePayload {
  """The inventory level that was activated."""
  inventoryLevel: InventoryLevel

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the items and their adjustments."""
input InventoryAdjustItemInput {
  """
  The change applied to the `available` quantity of the item at the location.
  """
  availableDelta: Int!

  """ID of the inventory item to adjust."""
  inventoryItemId: ID!
}

"""Specifies the fields required to adjust the inventory quantity."""
input InventoryAdjustQuantityInput {
  """
  The change applied to the `available` quantity of the item at the location.
  """
  availableDelta: Int!

  """ID of the inventory level to adjust."""
  inventoryLevelId: ID!
}

"""Return type for `inventoryAdjustQuantity` mutation."""
type InventoryAdjustQuantityPayload {
  """
  Represents the updated inventory quantity of an inventory item at a specific location.
  """
  inventoryLevel: InventoryLevel

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `inventoryBulkAdjustQuantityAtLocation` mutation."""
type InventoryBulkAdjustQuantityAtLocationPayload {
  """
  Represents the updated inventory quantities of an inventory item at the location.
  """
  inventoryLevels: [InventoryLevel!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `inventoryDeactivate` mutation."""
type InventoryDeactivatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"Represents the goods available to be shipped to a customer.\nIt holds essential information about the goods, including SKU and whether it is tracked.\n"
type InventoryItem implements LegacyInteroperability & Node {
  """The ISO 3166-1 alpha-2 country code of where the item originated from."""
  countryCodeOfOrigin: CountryCode

  """A list of country specific harmonized system codes."""
  countryHarmonizedSystemCodes(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CountryHarmonizedSystemCodeConnection!

  """The date and time when the inventory item was created."""
  createdAt: DateTime!

  """The number of inventory items that share the same SKU with this item."""
  duplicateSkuCount: Int!

  """The harmonized system code of the item."""
  harmonizedSystemCode: String

  """A globally-unique identifier."""
  id: ID!

  """The URL that points to the inventory history for the item."""
  inventoryHistoryUrl: URL

  """The inventory item's quantities at the specified location."""
  inventoryLevel(
    """ID of the location for which the inventory level is requested."""
    locationId: ID!
  ): InventoryLevel

  """
  A list of the inventory item's quantities for each location that the inventory item can be stocked at.
  """
  inventoryLevels(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `created_at`\n - `inventory_group_id`\n - `inventory_item_id`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): InventoryLevelConnection!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The number of locations where this inventory item is stocked."""
  locationsCount: Int!

  """
  The ISO 3166-2 alpha-2 province code of where the item originated from.
  """
  provinceCodeOfOrigin: String

  """Whether the inventory item requires shipping."""
  requiresShipping: Boolean!

  """Inventory item SKU."""
  sku: String

  """Whether inventory levels are tracked for the item."""
  tracked: Boolean!

  """
  Whether the value of the `tracked` field for the inventory item can be changed.
  """
  trackedEditable: EditableProperty!

  """Unit cost associated with the inventory item."""
  unitCost: MoneyV2

  """The date and time when the inventory item was updated."""
  updatedAt: DateTime!

  """The variant that owns this inventory item."""
  variant: ProductVariant!
}

"An auto-generated type for paginating through multiple InventoryItems.\n"
type InventoryItemConnection {
  """A list of edges."""
  edges: [InventoryItemEdge!]!

  """A list of the nodes contained in InventoryItemEdge."""
  nodes: [InventoryItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one InventoryItem and a cursor during pagination.\n"
type InventoryItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of InventoryItemEdge."""
  node: InventoryItem!
}

"""Specifies the input fields for an inventory item."""
input InventoryItemInput {
  """
  Unit cost associated with the inventory item, the currency is the shop's default currency.
  """
  cost: Decimal

  """Whether the inventory item is tracked."""
  tracked: Boolean
}

"""Inventory item."""
input InventoryItemUpdateInput {
  """
  Unit cost associated with the inventory item, the currency is the shop's default currency.
  """
  cost: Decimal

  """The ISO 3166-1 alpha-2 country code of where the item originated from."""
  countryCodeOfOrigin: CountryCode

  """List of country-specific harmonized system codes."""
  countryHarmonizedSystemCodes: [CountryHarmonizedSystemCodeInput!]

  """
  The harmonized system code of the inventory item. This must be a number between 6 and 13 digits.
  """
  harmonizedSystemCode: String

  """
  The ISO 3166-2 alpha-2 province/state code of where the item originated from.
  """
  provinceCodeOfOrigin: String

  """
  Whether the inventory item is tracked. The value must be true to adjust the item's inventory levels.
  """
  tracked: Boolean
}

"""Return type for `inventoryItemUpdate` mutation."""
type InventoryItemUpdatePayload {
  """The inventory item that was updated."""
  inventoryItem: InventoryItem

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"The quantities of an inventory item that are related to a specific location.\n"
type InventoryLevel implements Node {
  """
  The quantity of inventory items that are available at the inventory level's associated location.
  """
  available: Int!

  """
  Whether the inventory items associated with the inventory level can be deactivated.
  """
  canDeactivate: Boolean!

  """The date and time when the inventory level was created."""
  createdAt: DateTime!

  """
  Describes either the impact of deactivating the inventory level, or why the inventory level can't be deactivated.
  """
  deactivationAlert: String

  """
  Describes, in HTML with embedded URLs, either the impact of deactivating the inventory level or why the inventory level can't be deactivated.
  """
  deactivationAlertHtml: FormattedString

  """A globally-unique identifier."""
  id: ID!

  """
  The quantity of inventory items that are going to the inventory level's associated location.
  """
  incoming: Int!

  """Inventory item associated with the inventory level."""
  item: InventoryItem!

  """The location associated with the inventory level."""
  location: Location!

  """The date and time when the inventory level was updated."""
  updatedAt: DateTime!
}

"An auto-generated type for paginating through multiple InventoryLevels.\n"
type InventoryLevelConnection {
  """A list of edges."""
  edges: [InventoryLevelEdge!]!

  """A list of the nodes contained in InventoryLevelEdge."""
  nodes: [InventoryLevel!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one InventoryLevel and a cursor during pagination.\n"
type InventoryLevelEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of InventoryLevelEdge."""
  node: InventoryLevel!
}

"""Specifies the input fields for an inventory level."""
input InventoryLevelInput {
  """The available quantity of an inventory item at a location."""
  availableQuantity: Int!

  """The ID of a location."""
  locationId: ID!
}

"A [JSON](https://www.json.org/json-en.html) object.\n\nExample value:\n`{\n  \"product\": {\n    \"id\": \"gid://shopify/Product/1346443542550\",\n    \"title\": \"White T-shirt\",\n    \"options\": [{\n      \"name\": \"Size\",\n      \"values\": [\"M\", \"L\"]\n    }]\n  }\n}`\n"
scalar JSON

"""
A job corresponds to some long running task that the client should poll for status.
"""
type Job {
  """This indicates if the job is still queued or has been run."""
  done: Boolean!

  """
  A globally-unique identifier that's returned when running an asynchronous mutation.
  """
  id: ID!

  """
  This field will only resolve once the job is done. Can be used to ask for object(s) that have been changed by the job.
  """
  query: QueryRoot
}

"Interoperability metadata for types that directly correspond to a REST Admin API resource.\nFor example, on the Product type, LegacyInteroperability returns metadata for the corresponding [Product object](https://shopify.dev/api/admin-graphql/latest/objects/product) in the REST Admin API.\n"
interface LegacyInteroperability {
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!
}

"The total number of pending orders on a shop if less then a maximum, or that maximum.\nThe atMax field indicates when this maximum has been reached.\n"
type LimitedPendingOrderCount {
  """This is set when the number of pending orders has reached the maximum."""
  atMax: Boolean!

  "The number of pendings orders on the shop.\nLimited to a maximum of 10000.\n"
  count: Int!
}

"""Represents a single line item on an order."""
type LineItem implements Node {
  """Whether the line item can be restocked."""
  canRestock: Boolean! @deprecated(reason: "Use `restockable` instead")

  """The subscription contract associated with this line item."""
  contract: SubscriptionContract

  """The line item's quantity, minus the removed quantity."""
  currentQuantity: Int!

  """
  List of additional information, often representing custom features or special requests.
  """
  customAttributes: [Attribute!]!

  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  discountAllocations: [DiscountAllocation!]!

  """The total line price after discounts are applied, in shop currency."""
  discountedTotal: Money! @deprecated(reason: "Use `discountedTotalSet` instead")

  """
  The total line price after discounts are applied, in shop and presentment currencies.
  """
  discountedTotalSet: MoneyBag!

  """
  The approximate split price of a line item unit, in shop currency. This value doesn't include discounts applied to the entire order.
  """
  discountedUnitPrice: Money! @deprecated(reason: "Use `discountedUnitPriceSet` instead")

  """
  The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.
  """
  discountedUnitPriceSet: MoneyBag!

  """The duties associated with the line item."""
  duties: [Duty!]!

  """The total number of units to fulfill."""
  fulfillableQuantity: Int! @deprecated(reason: "Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead.")

  "The service provider that fulfills the line item.\n\nDeleted fulfillment services will return null.\n"
  fulfillmentService: FulfillmentService @deprecated(reason: "Use [FulfillmentOrder#assignedLocation](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder#field-fulfillmentorder-assignedlocation) instead.")

  "The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,\n'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.\n"
  fulfillmentStatus: String! @deprecated(reason: "Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead")

  """A globally-unique identifier."""
  id: ID!

  """The image associated to the line item's variant."""
  image: Image

  """Whether the line item can be edited or not."""
  merchantEditable: Boolean!

  """The name of the product."""
  name: String!

  """
  The total number of units that can't be fulfilled.
          For example, if items have been refunded, or the item is not something that can be fulfilled,
          like a tip.Please see the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object for more fulfillment details.
  """
  nonFulfillableQuantity: Int!

  "The total price without discounts applied, in shop currency.\nThis value is based on the unit price of the variant x quantity.\n"
  originalTotal: Money! @deprecated(reason: "Use `originalTotalSet` instead")

  """
  The total price in shop and presentment currencies, without discounts applied. This value is based on the unit price of the variant x quantity.
  """
  originalTotalSet: MoneyBag!

  """The variant unit price without discounts applied, in shop currency."""
  originalUnitPrice: Money! @deprecated(reason: "Use `originalUnitPriceSet` instead")

  """
  The variant unit price without discounts applied, in shop and presentment currencies.
  """
  originalUnitPriceSet: MoneyBag!

  """The Product object associated with this line item's variant."""
  product: Product

  """The number of variant units ordered."""
  quantity: Int!

  """The line item's quantity, minus the removed quantity."""
  refundableQuantity: Int!

  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!

  """Whether the line item can be restocked."""
  restockable: Boolean!

  """The selling plan details associated with the line item."""
  sellingPlan: LineItemSellingPlan

  """The variant SKU number."""
  sku: String

  """Staff attributed to the initial sale of the line item."""
  staffMember: StaffMember

  """The taxes charged for this line item."""
  taxLines(
    """Truncate the array result to this size."""
    first: Int
  ): [TaxLine!]!

  """Whether the variant is taxable."""
  taxable: Boolean!

  """The title of the product."""
  title: String!

  """The sum of all AppliedDiscounts on this line item, in shop currency."""
  totalDiscount: Money! @deprecated(reason: "Use `totalDiscountSet` instead")

  """
  The sum of all AppliedDiscounts on this line item, in shop and presentment currencies.
  """
  totalDiscountSet: MoneyBag!

  """The total discounted value of unfulfilled units, in shop currency."""
  unfulfilledDiscountedTotal: Money! @deprecated(reason: "Use `unfulfilledDiscountedTotalSet` instead")

  """
  The total discounted value of unfulfilled units, in shop and presentment currencies.
  """
  unfulfilledDiscountedTotalSet: MoneyBag!

  """
  The total price, without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop currency.
  """
  unfulfilledOriginalTotal: Money! @deprecated(reason: "Use `unfulfilledOriginalTotalSet` instead")

  """
  The total price, without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop and presentment currencies.
  """
  unfulfilledOriginalTotalSet: MoneyBag!

  """The number of units not yet fulfilled."""
  unfulfilledQuantity: Int!

  """The Variant object associated with this line item."""
  variant: ProductVariant

  """The name of the variant."""
  variantTitle: String

  """The name of the vendor who made the variant."""
  vendor: String
}

"An auto-generated type for paginating through multiple LineItems.\n"
type LineItemConnection {
  """A list of edges."""
  edges: [LineItemEdge!]!

  """A list of the nodes contained in LineItemEdge."""
  nodes: [LineItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one LineItem and a cursor during pagination.\n"
type LineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LineItemEdge."""
  node: LineItem!
}

"""Represents a single line item on an order."""
type LineItemMutable implements Node {
  """Whether the line item can be restocked."""
  canRestock: Boolean! @deprecated(reason: "Use `restockable` instead")

  """
  List of additional information, often representing custom features or special requests.
  """
  customAttributes: [Attribute!]!

  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  discountAllocations: [DiscountAllocation!]!

  """The total line price after discounts are applied, in shop currency."""
  discountedTotal: Money! @deprecated(reason: "Use `discountedTotalSet` instead")

  """
  The total line price after discounts are applied, in shop and presentment currencies.
  """
  discountedTotalSet: MoneyBag!

  """
  The approximate split price of a line item unit, in shop currency. This value doesn't include discounts applied to the entire order.
  """
  discountedUnitPrice: Money! @deprecated(reason: "Use `discountedUnitPriceSet` instead")

  """
  The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.
  """
  discountedUnitPriceSet: MoneyBag!

  """The total number of units to fulfill."""
  fulfillableQuantity: Int!

  "The service provider that fulfills the line item.\n\nDeleted fulfillment services will return null.\n"
  fulfillmentService: FulfillmentService

  "The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,\n'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.\n"
  fulfillmentStatus: String!

  """A globally-unique identifier."""
  id: ID!

  """The image associated to the line item's variant."""
  image: Image

  """Whether the line item can be edited or not."""
  merchantEditable: Boolean!

  """The name of the product."""
  name: String!

  """
  The total number of units that can't be fulfilled. For example, if items have been refunded, or the item is not something that can be fulfilled, like a tip.
  """
  nonFulfillableQuantity: Int!

  "The total price without any discounts applied, in shop currency. \"\"This value is based on the unit price of the variant x quantity.\n"
  originalTotal: Money! @deprecated(reason: "Use `originalTotalSet` instead")

  """
  The total price in shop and presentment currencies, without discounts applied. This value is based on the unit price of the variant x quantity.
  """
  originalTotalSet: MoneyBag!

  """The variant unit price without discounts applied, in shop currency."""
  originalUnitPrice: Money! @deprecated(reason: "Use `originalUnitPriceSet` instead")

  """
  The variant unit price without discounts applied, in shop and presentment currencies.
  """
  originalUnitPriceSet: MoneyBag!

  """The Product object associated with this line item's variant."""
  product: Product

  """The number of variant units ordered."""
  quantity: Int!

  """The line item's quantity, minus the removed quantity."""
  refundableQuantity: Int!

  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!

  """Whether the line item can be restocked."""
  restockable: Boolean!

  """The variant SKU number."""
  sku: String

  """Staff attributed to the initial sale of the line item."""
  staffMember: StaffMember

  """The TaxLine object connected to this line item."""
  taxLines(
    """Truncate the array result to this size."""
    first: Int
  ): [TaxLine!]!

  """Whether the variant is taxable."""
  taxable: Boolean!

  """The title of the product."""
  title: String!

  """The sum of all AppliedDiscounts on this line item, in shop currency."""
  totalDiscount: Money! @deprecated(reason: "Use `totalDiscountSet` instead")

  """
  The sum of all AppliedDiscounts on this line item in shop and presentment currencies.
  """
  totalDiscountSet: MoneyBag!

  """The total discounted value of unfulfilled units, in shop currency."""
  unfulfilledDiscountedTotal: Money! @deprecated(reason: "Use `unfulfilledDiscountedTotalSet` instead")

  """
  The total discounted value of unfulfilled units, in shop and presentment currencies.
  """
  unfulfilledDiscountedTotalSet: MoneyBag!

  """
  The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop currency.
  """
  unfulfilledOriginalTotal: Money! @deprecated(reason: "Use `unfulfilledOriginalTotalSet` instead")

  """
  The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop and presentment currencies.
  """
  unfulfilledOriginalTotalSet: MoneyBag!

  """The number of units not yet fulfilled."""
  unfulfilledQuantity: Int!

  """The Variant object associated with this line item."""
  variant: ProductVariant

  """The name of the variant."""
  variantTitle: String

  """The name of the vendor who made the variant."""
  vendor: String
}

"An auto-generated type for paginating through multiple LineItemMutables.\n"
type LineItemMutableConnection {
  """A list of edges."""
  edges: [LineItemMutableEdge!]!

  """A list of the nodes contained in LineItemMutableEdge."""
  nodes: [LineItemMutable!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one LineItemMutable and a cursor during pagination.\n"
type LineItemMutableEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LineItemMutableEdge."""
  node: LineItemMutable!
}

"""Represents the selling plan for a line item."""
type LineItemSellingPlan {
  """The name of the selling plan for display purposes."""
  name: String!

  """The ID of the selling plan associated with the line item."""
  sellingPlanId: ID
}

"""A link to direct users to."""
type Link implements HasPublishedTranslations {
  """A context-sensitive label for the link."""
  label: String!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [PublishedTranslation!]!

  """The URL that the link visits."""
  url: URL!
}

"""A locale."""
type Locale {
  """Locale ISO code."""
  isoCode: String!

  """Human-readable locale name."""
  name: String!
}

"""
Represents the value captured by a localization extension. Localization extensions are additional fields required by certain countries on international orders. For example, some countries require additional fields for customs information or tax identification numbers.
"""
type LocalizationExtension {
  """Country ISO 3166-1 alpha-2 code."""
  countryCode: CountryCode!

  """The localized extension keys that are allowed."""
  key: LocalizationExtensionKey!

  """The purpose of this localization extension."""
  purpose: LocalizationExtensionPurpose!

  """The localized extension title."""
  title: String!

  """The value of the field."""
  value: String!
}

"An auto-generated type for paginating through multiple LocalizationExtensions.\n"
type LocalizationExtensionConnection {
  """A list of edges."""
  edges: [LocalizationExtensionEdge!]!

  """A list of the nodes contained in LocalizationExtensionEdge."""
  nodes: [LocalizationExtension!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one LocalizationExtension and a cursor during pagination.\n"
type LocalizationExtensionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LocalizationExtensionEdge."""
  node: LocalizationExtension!
}

"Specifies the input fields for a LocalizationExtensionInput.\n"
input LocalizationExtensionInput {
  """The key for the localization extension."""
  key: LocalizationExtensionKey!

  """The localization extension value."""
  value: String!
}

"""The key of a localization extension."""
enum LocalizationExtensionKey {
  """Extension key 'shipping_credential_br' for country BR."""
  SHIPPING_CREDENTIAL_BR

  """Extension key 'shipping_credential_cn' for country CN."""
  SHIPPING_CREDENTIAL_CN

  """Extension key 'shipping_credential_kr' for country KR."""
  SHIPPING_CREDENTIAL_KR

  """Extension key 'tax_credential_br' for country BR."""
  TAX_CREDENTIAL_BR

  """Extension key 'tax_credential_it' for country IT."""
  TAX_CREDENTIAL_IT

  """Extension key 'tax_email_it' for country IT."""
  TAX_EMAIL_IT
}

"""The purpose of a localization extension."""
enum LocalizationExtensionPurpose {
  """
  Extensions that are used for shipping purposes, for example, customs clearance.
  """
  SHIPPING

  """Extensions that are used for taxes purposes, for example, invoicing."""
  TAX
}

"Represents the location where the physical good resides.\n"
type Location implements HasMetafieldDefinitions & LegacyInteroperability & Node {
  """Whether this location can be reactivated."""
  activatable: Boolean!

  """The address of this location."""
  address: LocationAddress!

  """Whether the location address has been verified."""
  addressVerified: Boolean!

  """Whether this location can be deactivated."""
  deactivatable: Boolean!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) that the location was deactivated at. For example, 3:30 pm on September 7, 2019 in the time zone of UTC (Universal Time Coordinated) is represented as `"2019-09-07T15:50:00Z`".
  """
  deactivatedAt: String

  """Whether this location can be deleted."""
  deletable: Boolean!

  """Name of the service provider that fulfills from this location."""
  fulfillmentService: FulfillmentService

  """Whether this location can fulfill online orders."""
  fulfillsOnlineOrders: Boolean!

  """Whether this location has active inventory."""
  hasActiveInventory: Boolean!

  """Whether this location has orders that need to be fulfilled."""
  hasUnfulfilledOrders: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The quantities of an inventory item at this location."""
  inventoryLevel(
    """The ID of the inventory item to obtain the inventory level for."""
    inventoryItemId: ID!
  ): InventoryLevel

  """
  A list of the quantities of the inventory items that can be stocked at this location.
  """
  inventoryLevels(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `created_at`\n - `inventory_group_id`\n - `inventory_item_id`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): InventoryLevelConnection!

  """Whether the location is active."""
  isActive: Boolean!

  """Whether the location is your primary location for shipping inventory."""
  isPrimary: Boolean! @deprecated(reason: "The concept of a primary location is deprecated, shipsInventory can be used to get a fallback location")

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """List of metafield definitions."""
  metafieldDefinitions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    "Supported filter parameters:\n - `created_at`\n - `key`\n - `namespace`\n - `owner_type`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection!

  """The name of the location."""
  name: String!

  """
  Whether this location is used for calculating shipping rates. In multi-origin shipping mode, this flag is ignored.
  """
  shipsInventory: Boolean!

  """List of suggested addresses for this location (empty if none)."""
  suggestedAddresses: [LocationSuggestedAddress!]!
}

"Represents the address of a location.\n"
type LocationAddress {
  """The first line of the address for the location."""
  address1: String

  """The second line of the address for the location."""
  address2: String

  """The city of the location."""
  city: String

  """The country of the location."""
  country: String

  """The country code of the location."""
  countryCode: String

  """A formatted version of the address for the location."""
  formatted: [String!]!

  """The latitude coordinates of the location."""
  latitude: Float

  """The longitude coordinates of the location."""
  longitude: Float

  """The phone number of the location."""
  phone: String

  """The province of the location."""
  province: String

  "The code for the province, state, or district of the address of the location.\n"
  provinceCode: String

  """The ZIP code of the location."""
  zip: String
}

"An auto-generated type for paginating through multiple Locations.\n"
type LocationConnection {
  """A list of edges."""
  edges: [LocationEdge!]!

  """A list of the nodes contained in LocationEdge."""
  nodes: [Location!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one Location and a cursor during pagination.\n"
type LocationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LocationEdge."""
  node: Location!
}

"""The set of valid sort keys for the Location query."""
enum LocationSortKeys {
  """Sort by the `id` value."""
  ID

  """Sort by the `name` value."""
  NAME

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"Represents a suggested address for a location.\n"
type LocationSuggestedAddress {
  """The first line of the suggested address."""
  address1: String

  """The second line of the suggested address."""
  address2: String

  """The city of the suggested address."""
  city: String

  """The country of the suggested address."""
  country: String

  """The country code of the suggested address."""
  countryCode: CountryCode

  """A formatted version of the suggested address."""
  formatted: [String!]!

  """The province of the suggested address."""
  province: String

  """
  The code for the province, state, or district of the suggested address.
  """
  provinceCode: String

  """The ZIP code of the suggested address."""
  zip: String
}

"Represents a customer mailing address.\n\nFor example, a customer's default address and an order's billing address are both mailling addresses.\n"
type MailingAddress implements Node {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  "The second line of the address. Typically the number of the apartment, suite, or unit.\n"
  address2: String

  "The name of the city, district, village, or town.\n"
  city: String

  "The name of the customer's company or organization.\n"
  company: String

  """Whether the address coordinates are valid."""
  coordinatesValidated: Boolean!

  "The name of the country.\n"
  country: String

  "The two-letter code for the country of the address.\n\nFor example, US.\n"
  countryCode: String @deprecated(reason: "Use `countryCodeV2` instead")

  "The two-letter code for the country of the address.\n\nFor example, US.\n"
  countryCodeV2: CountryCode

  """The first name of the customer."""
  firstName: String

  """
  A formatted version of the address, customized by the provided arguments.
  """
  formatted(
    """Whether to include the customer's company in the formatted address."""
    withCompany: Boolean = true

    """Whether to include the customer's name in the formatted address."""
    withName: Boolean = false
  ): [String!]!

  """A comma-separated list of the values for city, province, and country."""
  formattedArea: String

  """A globally-unique identifier."""
  id: ID!

  """The last name of the customer."""
  lastName: String

  """The latitude coordinate of the customer address."""
  latitude: Float

  """The longitude coordinate of the customer address."""
  longitude: Float

  "The full name of the customer, based on firstName and lastName.\n"
  name: String

  "A unique phone number for the customer.\n\nFormatted using E.164 standard. For example, _+16135551111_.\n"
  phone: String

  """The region of the address, such as the province, state, or district."""
  province: String

  "The two-letter code for the region.\n\nFor example, ON.\n"
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

"""The fields used to create or update a mailing address."""
input MailingAddressInput {
  "The first line of the address. Typically the street address or PO Box number.\n"
  address1: String

  "The second line of the address. Typically the number of the apartment, suite, or unit.\n"
  address2: String

  "The name of the city, district, village, or town.\n"
  city: String

  "The name of the customer's company or organization.\n"
  company: String

  """The two-letter code for the country of the address."""
  countryCode: CountryCode

  """The first name of the customer."""
  firstName: String

  """The last name of the customer."""
  lastName: String

  "A unique phone number for the customer.\n\nFormatted using E.164 standard. For example, _+16135551111_.\n"
  phone: String

  "The code for the region of the address, such as the province, state, or district.\nFor example QC for Quebec, Canada.\n"
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

"Manual discount applications capture the intentions of a discount that was manually created for an order.\n\nDiscount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.\n"
type ManualDiscountApplication implements DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """The description of the discount application."""
  description: String

  "An ordered index that can be used to identify the discount application and indicate the precedence\nof the discount application for calculations.\n"
  index: Int!

  """How the discount amount is distributed on the discounted lines."""
  targetSelection: DiscountApplicationTargetSelection!

  """Whether the discount is applied on line items or shipping lines."""
  targetType: DiscountApplicationTargetType!

  """The title of the discount application."""
  title: String!

  """The value of the discount application."""
  value: PricingValue!
}

"A market is a group of one or more regions that you want to target for international sales.\nBy creating a market, you can configure a distinct, localized shopping experience for\ncustomers from a specific area of the world. For example, you can\n[change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),\n[configure international pricing](https://shopify.dev/api/examples/product-price-lists),\nor [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).\n"
type Market implements Node {
  """The market’s currency settings."""
  currencySettings: MarketCurrencySettings!

  "Whether the market is enabled to receive visitors and sales. **Note**: Regions in inactive\nmarkets cannot be selected on the storefront or in checkout.\n"
  enabled: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The name of the market. Not shown to customers."""
  name: String!

  "The market’s price list, which specifies a percentage-based price adjustment as well as\nfixed price overrides for specific variants.\n"
  priceList: PriceList

  "Whether the market is the shop’s primary market.\n"
  primary: Boolean!

  """The regions that comprise the market."""
  regions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MarketRegionConnection!

  "The market’s web presence, which defines its SEO strategy. This can be a different domain,\nsubdomain, or subfolders of the primary domain. Each web presence comprises one or more\nlanguage variants. If a market doesn't have its own web presence, then the market is accessible on the\nshop’s primary domain using [country\nselectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).\n"
  webPresence: MarketWebPresence
}

"An auto-generated type for paginating through multiple Markets.\n"
type MarketConnection {
  """A list of edges."""
  edges: [MarketEdge!]!

  """A list of the nodes contained in MarketEdge."""
  nodes: [Market!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""The input fields required to create a market."""
input MarketCreateInput {
  "Whether the market is enabled to receive visitors and sales. If  a Boolean \nisn't provided, then the\nmarket is enabled by default if all included regions have shipping rates, and disabled if\nany regions don't have shipping rates.\n\n**Note**: Regions in inactive markets can't be selected on the storefront or in checkout.\n"
  enabled: Boolean

  "The name of the market. Not shown to customers.\n"
  name: String!

  "The regions to be included in the market. Each region can only be included in one market at\na time.\n"
  regions: [MarketRegionCreateInput!]!
}

"""Return type for `marketCreate` mutation."""
type MarketCreatePayload {
  """The market object."""
  market: Market

  """The list of errors that occurred from executing the mutation."""
  userErrors: [MarketUserError!]!
}

"""A market's currency settings."""
type MarketCurrencySettings {
  "The currency which this market's prices are defined in, and the\ncurrency which its customers must use if local currencies are disabled.\n"
  baseCurrency: CurrencySetting!

  "Whether or not local currencies are enabled. If enabled, then prices will\nbe converted to give each customer the best experience based on their\nregion. If disabled, then all customers in this market will see prices\nin the market's base currency.\n"
  localCurrencies: Boolean!
}

"""The input fields used to update the currency settings of a market."""
input MarketCurrencySettingsUpdateInput {
  "The currency which this market’s prices are defined in, and the\ncurrency which its customers must use if local currencies are disabled.\n"
  baseCurrency: CurrencyCode

  "Whether or not local currencies are enabled. If enabled, then prices will\nbe converted to give each customer the best experience based on their\nregion. If disabled, then all customers in this market will see prices\nin the market's base currency.\n"
  localCurrencies: Boolean
}

"""Return type for `marketCurrencySettingsUpdate` mutation."""
type MarketCurrencySettingsUpdatePayload {
  """The market object."""
  market: Market

  """The list of errors that occurred from executing the mutation."""
  userErrors: [MarketCurrencySettingsUserError!]!
}

"""Error codes for failed market multi-currency operations."""
type MarketCurrencySettingsUserError implements DisplayableError {
  """The error code."""
  code: MarketCurrencySettingsUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `MarketCurrencySettingsUserError`.
"""
enum MarketCurrencySettingsUserErrorCode {
  """
  The currency settings of the given market cannot be changed because the market manager has exclusive control of pricing.
  """
  MANAGED_MARKET

  """The specified market wasn't found."""
  MARKET_NOT_FOUND

  """
  The shop's payment gateway does not support enabling more than one currency.
  """
  MULTIPLE_CURRENCIES_NOT_SUPPORTED

  """Can't enable or disable local currencies on a single country market."""
  NO_LOCAL_CURRENCIES_ON_SINGLE_COUNTRY_MARKET

  """The primary market must use the shop currency."""
  PRIMARY_MARKET_USES_SHOP_CURRENCY

  """The specified currency is not supported."""
  UNSUPPORTED_CURRENCY
}

"""Return type for `marketDelete` mutation."""
type MarketDeletePayload {
  """The ID of the deleted market."""
  deletedId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [MarketUserError!]!
}

"An auto-generated type which holds one Market and a cursor during pagination.\n"
type MarketEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MarketEdge."""
  node: Market!
}

"""A geographic region which comprises a market."""
interface MarketRegion {
  """A globally-unique identifier."""
  id: ID!

  """The name of the region."""
  name: String!
}

"An auto-generated type for paginating through multiple MarketRegions.\n"
type MarketRegionConnection {
  """A list of edges."""
  edges: [MarketRegionEdge!]!

  """A list of the nodes contained in MarketRegionEdge."""
  nodes: [MarketRegion!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A country which comprises a market."""
type MarketRegionCountry implements MarketRegion & Node {
  """The ISO code identifying the country."""
  code: CountryCode!

  """A globally-unique identifier."""
  id: ID!

  """The name of the region."""
  name: String!
}

"""
Defines input options for creating a market region. Exactly one option is required.
"""
input MarketRegionCreateInput {
  """A country code for the region."""
  countryCode: CountryCode!
}

"""Return type for `marketRegionDelete` mutation."""
type MarketRegionDeletePayload {
  """The ID of the deleted market region."""
  deletedId: ID

  """The parent market object of the deleted region."""
  market: Market

  """The list of errors that occurred from executing the mutation."""
  userErrors: [MarketUserError!]!
}

"An auto-generated type which holds one MarketRegion and a cursor during pagination.\n"
type MarketRegionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MarketRegionEdge."""
  node: MarketRegion!
}

"""Return type for `marketRegionsCreate` mutation."""
type MarketRegionsCreatePayload {
  """The market object."""
  market: Market

  """The list of errors that occurred from executing the mutation."""
  userErrors: [MarketUserError!]!
}

"""The input fields used to update a market."""
input MarketUpdateInput {
  "Whether the market is enabled to receive visitors and sales. **Note**: Regions in\ninactive markets cannot be selected on the storefront or in checkout.\n"
  enabled: Boolean

  "The name of the market. Not shown to customers.\n"
  name: String
}

"""Return type for `marketUpdate` mutation."""
type MarketUpdatePayload {
  """The market object."""
  market: Market

  """The list of errors that occurred from executing the mutation."""
  userErrors: [MarketUserError!]!
}

"Defines errors encountered while managing a Market.\n"
type MarketUserError implements DisplayableError {
  """The error code."""
  code: MarketUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""Possible error codes that can be returned by `MarketUserError`."""
enum MarketUserErrorCode {
  """The input value is blank."""
  BLANK

  """Can't add regions to the primary market."""
  CANNOT_ADD_REGIONS_TO_PRIMARY_MARKET

  """Can't add the web presence to the primary market."""
  CANNOT_ADD_WEB_PRESENCE_TO_PRIMARY_MARKET

  """Can't delete the only region in a market."""
  CANNOT_DELETE_ONLY_REGION

  """Can't delete the primary market."""
  CANNOT_DELETE_PRIMARY_MARKET

  """Can't delete the primary market's web presence."""
  CANNOT_DELETE_PRIMARY_MARKET_WEB_PRESENCE

  """Can't disable the primary market."""
  CANNOT_DISABLE_PRIMARY_MARKET

  """Can't pass both `subfolderSuffix` and `domainId`."""
  CANNOT_HAVE_SUBFOLDER_AND_DOMAIN

  """Can't set default locale to null."""
  CANNOT_SET_DEFAULT_LOCALE_TO_NULL

  """Domain was not found."""
  DOMAIN_NOT_FOUND

  """Duplicates found in languages."""
  DUPLICATE_LANGUAGES

  """The input value is invalid."""
  INVALID

  """The market wasn't found."""
  MARKET_NOT_FOUND

  """No languages selected."""
  NO_LANGUAGES

  """The primary market must use the primary domain."""
  PRIMARY_MARKET_MUST_USE_PRIMARY_DOMAIN

  """The market region wasn't found."""
  REGION_NOT_FOUND

  """Cannot add region-specific language."""
  REGION_SPECIFIC_LANGUAGE

  """One of `subfolderSuffix` or `domainId` is required."""
  REQUIRES_DOMAIN_OR_SUBFOLDER

  """Exactly one input option is required."""
  REQUIRES_EXACTLY_ONE_OPTION

  """Can't have more than 50 markets."""
  SHOP_REACHED_MARKETS_LIMIT

  """
  Can't create subfolders if the primary domain is a country code top-level domain (ccTLDs).
  """
  SUBFOLDER_NOT_ALLOWED_FOR_CCTLD_DOMAINS

  """The subfolder suffix must contain only letters."""
  SUBFOLDER_SUFFIX_MUST_CONTAIN_ONLY_LETTERS

  """The input value is already taken."""
  TAKEN

  """The input value is too long."""
  TOO_LONG

  """The input value is too short."""
  TOO_SHORT

  """The language isn't published to the store."""
  UNPUBLISHED_LANGUAGE

  """Can't add unsupported country or region."""
  UNSUPPORTED_COUNTRY_REGION

  """The market web presence wasn't found."""
  WEB_PRESENCE_NOT_FOUND
}

"The market’s web presence, which defines its SEO strategy. This can be a different domain\n(e.g. `example.ca`), subdomain (e.g. `ca.example.com`), or subfolders of the primary\ndomain (e.g. `example.com/en-ca`). Each web presence comprises one or more language\nvariants. If a market does not have its own web presence, it is accessible on the shop’s\nprimary domain via [country\nselectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).\n\nNote: while the domain/subfolders defined by a market’s web presence are not applicable to\ncustom storefronts, which must manage their own domains and routing, the languages chosen\nhere do govern [the languages available on the Storefront\nAPI](https://shopify.dev/api/examples/multiple-languages) for the countries in\nthis market.\n"
type MarketWebPresence implements Node {
  "The ISO codes for the alternate locales. When a domain is used, these locales will be\navailable as language-specific subfolders. For example, if English is an\nalternate locale, and `example.ca` is the market’s domain, then\n`example.ca/en` will load in English.\n"
  alternateLocales: [String!]!

  "The ISO code for the default locale. When a domain is used, this is the locale that will\nbe used when the domain root is accessed. For example, if French is the default locale,\nand `example.ca` is the market’s domian, then `example.ca` will load in French.\n"
  defaultLocale: String!

  "The web presence’s domain.\nThis field will be null if `subfolderSuffix` isn't null.\n"
  domain: Domain

  """A globally-unique identifier."""
  id: ID!

  """The associated market."""
  market: Market!

  "The list of root URLs for each of the web presence’s locales.\n"
  rootUrls: [MarketWebPresenceRootUrl!]!

  """
  The market-specific suffix of the subfolders defined by the web presence. Example: in `/en-us` the subfolder suffix is `us`. This field will be null if `domain` isn't null.
  """
  subfolderSuffix: String
}

"""The input fields used to create a web presence for a market."""
input MarketWebPresenceCreateInput {
  "The alternate locales for the market’s web presence.\n"
  alternateLocales: [String!]

  "The default locale for the market’s web presence.\n"
  defaultLocale: String!

  "The web presence's domain ID. This field must be `null` if the `subfolderSuffix` isn't `null`.\n"
  domainId: ID

  "The market-specific suffix of the subfolders defined by the web presence.\nFor example: in `/en-us`, the subfolder suffix is `us`.\nOnly ASCII characters are allowed. This field must be `null` if the `domainId` isn't `null`.\n"
  subfolderSuffix: String
}

"""Return type for `marketWebPresenceCreate` mutation."""
type MarketWebPresenceCreatePayload {
  """The market object."""
  market: Market

  """The list of errors that occurred from executing the mutation."""
  userErrors: [MarketUserError!]!
}

"""Return type for `marketWebPresenceDelete` mutation."""
type MarketWebPresenceDeletePayload {
  """The ID of the deleted web presence."""
  deletedId: ID

  """The market for which the web presence was deleted."""
  market: Market

  """The list of errors that occurred from executing the mutation."""
  userErrors: [MarketUserError!]!
}

"The URL for the homepage of the online store in the context of a particular market and a\nparticular locale.\n"
type MarketWebPresenceRootUrl {
  """The locale that the storefront loads in."""
  locale: String!

  """The URL."""
  url: URL!
}

"""The input fields used to update a web presence for a market."""
input MarketWebPresenceUpdateInput {
  "The alternate locales for the market’s web presence.\n"
  alternateLocales: [String!]

  "The default locale for the market’s web presence.\n"
  defaultLocale: String

  "The web presence's domain ID. This field must be null if `subfolderSuffix` is not null.\n"
  domainId: ID

  "The market-specific suffix of the subfolders defined by the web presence.\nExample: in `/en-us` the subfolder suffix is `us`.\nOnly ASCII characters are allowed. This field must be null if `domainId` is not null.\n"
  subfolderSuffix: String
}

"""Return type for `marketWebPresenceUpdate` mutation."""
type MarketWebPresenceUpdatePayload {
  """The market object."""
  market: Market

  """The list of errors that occurred from executing the mutation."""
  userErrors: [MarketUserError!]!
}

"""
The marketing activity resource represents marketing that a
        merchant created through an app.
"""
type MarketingActivity implements Node {
  """
  The URL of the marketing activity listing page in the marketing section.
  """
  activityListUrl: URL

  """The amount spent on the marketing activity."""
  adSpend: MoneyV2

  """The app which created this marketing activity."""
  app: App!

  """The errors generated when an app publishes the marketing activity."""
  appErrors: MarketingActivityExtensionAppErrors

  """The allocated budget for the marketing activity."""
  budget: MarketingBudget

  """The date and time when the marketing activity was created."""
  createdAt: DateTime!

  """The completed content in the marketing activity creation form."""
  formData: String

  """A globally-unique identifier."""
  id: ID!

  """
  Whether the marketing activity is in the main workflow version of
            the marketing automation.
  """
  inMainWorkflowVersion: Boolean!

  """The available marketing channels for a marketing activity."""
  marketingChannel: MarketingChannel!

  """Associated marketing event of this marketing activity."""
  marketingEvent: MarketingEvent

  """
  A contextual description of the marketing activity based on the platform and tactic used.
  """
  sourceAndMedium: String!

  """The current state of the marketing activity."""
  status: MarketingActivityStatus!

  """The severity of the marketing activity's status."""
  statusBadgeType: MarketingActivityStatusBadgeType @deprecated(reason: "Use `statusBadgeTypeV2` instead")

  """The severity of the marketing activity's status."""
  statusBadgeTypeV2: BadgeType

  """The rendered status of the marketing activity."""
  statusLabel: String!

  """
  The [date and time](
            https://help.shopify.com/https://en.wikipedia.org/wiki/ISO_8601
            ) when the activity's status last changed.
  """
  statusTransitionedAt: DateTime

  """The method of marketing used for this marketing activity."""
  tactic: MarketingTactic!

  """The status to which the marketing activity is currently transitioning."""
  targetStatus: MarketingActivityStatus

  """
  The marketing activity's title, which is rendered on the marketing listing page.
  """
  title: String!

  """The date and time when the marketing activity was updated."""
  updatedAt: DateTime!

  """
  The set of [Urchin Tracking Module](
            https://help.shopify.com/https://en.wikipedia.org/wiki/UTM_parameters
            ) used in the URL for tracking this marketing activity.
  """
  utmParameters: UTMParameters
}

"""This type combines budget amount and its marketing budget type."""
input MarketingActivityBudgetInput {
  """Budget type for marketing activity."""
  budgetType: MarketingBudgetBudgetType

  """Amount of budget for the marketing activity."""
  total: MoneyInput
}

"An auto-generated type for paginating through multiple MarketingActivities.\n"
type MarketingActivityConnection {
  """A list of edges."""
  edges: [MarketingActivityEdge!]!

  """A list of the nodes contained in MarketingActivityEdge."""
  nodes: [MarketingActivity!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Specifies the input fields required to create a marketing activity."""
input MarketingActivityCreateInput {
  """The budget for this marketing activity."""
  budget: MarketingActivityBudgetInput

  """Encoded context containing marketing campaign id."""
  context: String

  """The form data in JSON serialized as a string."""
  formData: String

  """The ID of the marketing activity extension."""
  marketingActivityExtensionId: ID!

  """The title of the marketing activity."""
  marketingActivityTitle: String

  """The current state of the marketing activity."""
  status: MarketingActivityStatus!

  "Specifies the\n[Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)\nthat are associated with a related marketing campaign. UTMInput is required for all Marketing\ntactics except Storefront App.\n"
  utm: UTMInput
}

"""Return type for `marketingActivityCreate` mutation."""
type MarketingActivityCreatePayload {
  """The created marketing activity."""
  marketingActivity: MarketingActivity

  """The path to return back to shopify admin from embedded editor."""
  redirectPath: String

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type which holds one MarketingActivity and a cursor during pagination.\n"
type MarketingActivityEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MarketingActivityEdge."""
  node: MarketingActivity!
}

"""
The error code resulted from the marketing activity extension integration.
"""
enum MarketingActivityExtensionAppErrorCode {
  """The app is either not responding or returning unexpected data."""
  API_ERROR

  """The app needs to be installed."""
  INSTALL_REQUIRED_ERROR

  """The shop/user must be onboarded to use the app."""
  NOT_ONBOARDED_ERROR

  """The app has returned an error when invoking the platform."""
  PLATFORM_ERROR

  """The app has returned validation errors."""
  VALIDATION_ERROR
}

"""
Represents errors returned from apps when using the marketing activity extension.
"""
type MarketingActivityExtensionAppErrors {
  """The app error type."""
  code: MarketingActivityExtensionAppErrorCode!

  """The list of errors returned by the app."""
  userErrors: [UserError!]!
}

"""The set of valid sort keys for the MarketingActivity query."""
enum MarketingActivitySortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE

  """Sort by the `title` value."""
  TITLE
}

"""
Status helps to identify if this marketing activity has been completed, queued, failed etc.
"""
enum MarketingActivityStatus {
  """This marketing activity is currently running."""
  ACTIVE

  """This marketing activity is permanently unavailable."""
  DELETED

  """
  This marketing activity was deleted and it was triggered from outside of Shopify.
  """
  DELETED_EXTERNALLY

  """This marketing activity is disconnected and no longer editable."""
  DISCONNECTED

  """This marketing activity has been edited, but it is not yet created."""
  DRAFT

  """This marketing activity is unable to run."""
  FAILED

  """This marketing activity has completed running."""
  INACTIVE

  """This marketing activity is currently not running."""
  PAUSED

  """
  This marketing activity is pending creation on the app's marketing platform.
  """
  PENDING

  """This marketing activity is scheduled to run."""
  SCHEDULED

  """The marketing activity's status is unknown."""
  UNDEFINED
}

"""StatusBadgeType helps to identify the color of the status badge."""
enum MarketingActivityStatusBadgeType {
  """This status badge has type attention."""
  ATTENTION

  """This status badge has type default."""
  DEFAULT

  """This status badge has type info."""
  INFO

  """This status badge has type success."""
  SUCCESS

  """This status badge has type warning."""
  WARNING
}

"""Specifies the input fields required to update a marketing activity."""
input MarketingActivityUpdateInput {
  """The budget for the marketing activity."""
  budget: MarketingActivityBudgetInput

  "Error messages generated when the app was trying to complete this activity.\nLearn more about the\nJSON[format expected for the error messages](/apps/app-extensions/marketing-activities/reference\n/status#failed-status).\n"
  errors: JSON

  """
  The form data of the marketing activity. This is only used if the marketing activity is
                integrated with the external editor.
  """
  formData: String

  """The ID of the marketing activity."""
  id: ID!

  "A list of the item IDs that were marketed in this marketing activity. Valid types for these items are:\n* `Product`\n* `Shop`\n"
  marketedResources: [ID!]

  """
  The ID of the recommendation that the marketing activity was created from, if one exists.
  """
  marketingRecommendationId: ID

  "The current state of the marketing activity. Learn more about\n[marketing activity status](/apps/app-extensions/marketing-activities/reference/status).\n"
  status: MarketingActivityStatus

  """
  The target state that the marketing activity is transitioning to. Learn more about [marketing activity status](/apps/app-extensions/marketing-activities/reference/status).
  """
  targetStatus: MarketingActivityStatus

  """The title of the marketing activity."""
  title: String

  "Specifies the\n[Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)\nthat are associated with a related marketing campaign. UTMInput is required for all Marketing\ntactics except Storefront App. The utm field can only be set once and never modified.\n"
  utm: UTMInput
}

"""Return type for `marketingActivityUpdate` mutation."""
type MarketingActivityUpdatePayload {
  """The updated marketing activity."""
  marketingActivity: MarketingActivity

  """The redirect path from the embedded editor to the Shopify admin."""
  redirectPath: String

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"This type combines budget amount and its marketing budget type.\n"
type MarketingBudget {
  """The budget type for a marketing activity."""
  budgetType: MarketingBudgetBudgetType!

  """The amount of budget for marketing activity."""
  total: MoneyV2!
}

"""The budget type for a marketing activity."""
enum MarketingBudgetBudgetType {
  """A daily budget."""
  DAILY

  """A budget for the lifetime of a marketing activity."""
  LIFETIME
}

"The available marketing channels for a marketing activity or event. A marketing channel is broad category of marketing, used for reporting aggregation.\n"
enum MarketingChannel {
  """Displayed ads."""
  DISPLAY

  """Email."""
  EMAIL

  """Referral links."""
  REFERRAL

  """Paid search."""
  SEARCH

  """Social media."""
  SOCIAL
}

"""
Marketing engagement represents customer activity taken on a marketing event.
"""
type MarketingEngagement {
  """
  The total ad spend for the day, if the marketing event is a paid ad with a daily spend.
  """
  adSpend: MoneyV2

  """The total number of clicks on the marketing event for the day."""
  clicksCount: Int

  """The total number of comments for the day."""
  commentsCount: Int

  """The total number of complaints for the day."""
  complaintsCount: Int

  """The total number of fails for the day."""
  failsCount: Int

  """The total number of favorites for the day."""
  favoritesCount: Int

  """The date time at which the data was fetched."""
  fetchedAt: DateTime

  """The total number of impressions for the day."""
  impressionsCount: Int

  """
  Whether the engagements are reported as lifetime values rather than daily totals.
  """
  isCumulative: Boolean

  """The marketing activity related to this engagement."""
  marketingActivity: MarketingActivity!

  """The date that these engagements occurred on."""
  occurredOn: Date!

  """The total number of sends for the day."""
  sendsCount: Int

  """The total number of shares for the day."""
  sharesCount: Int

  """The total number of unique clicks for the day."""
  uniqueClicksCount: Int

  """The total number of unique views for the day."""
  uniqueViewsCount: Int

  """The total number of unsubscribes for the day."""
  unsubscribesCount: Int

  """
  The UTC Offset that the app is using to determine which date to allocate spend to.
  """
  utcOffset: UtcOffset

  """The total number of views for the day."""
  viewsCount: Int
}

"""Return type for `marketingEngagementCreate` mutation."""
type MarketingEngagementCreatePayload {
  """The marketing engagement that was created."""
  marketingEngagement: MarketingEngagement

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""
This object represents marketing engagement input fields for a marketing engagement.
"""
input MarketingEngagementInput {
  """
  The total ad spend for the day, if the marketing event is a paid ad with a daily spend.
  """
  adSpend: MoneyInput

  """The total number of clicks on the marketing event for the day."""
  clicksCount: Int

  """The total number of comments for the day."""
  commentsCount: Int

  """The total number of complaints for the day."""
  complaintsCount: Int

  """The total number of fails for the day."""
  failsCount: Int

  """The total number of favorites for the day."""
  favoritesCount: Int

  """The date time at which the data was fetched."""
  fetchedAt: DateTime

  """The total number of impressions for the day."""
  impressionsCount: Int

  """
  Whether the engagements are reported as lifetime values rather than daily totals.
  """
  isCumulative: Boolean

  """The date that these engagements occurred on."""
  occurredOn: Date!

  """The total number of sends for the day."""
  sendsCount: Int

  """The total number of shares for the day."""
  sharesCount: Int

  """The total number of unique clicks for the day."""
  uniqueClicksCount: Int

  """The total number of unique views for the day."""
  uniqueViewsCount: Int

  """The total number of unsubscribes for the day."""
  unsubscribesCount: Int

  """
  The UTC Offset that the app is using to determine which date to allocate spend to.
  """
  utcOffset: UtcOffset

  """The total number of views for the day."""
  viewsCount: Int
}

"""Represents actions that market a merchant's store or products."""
type MarketingEvent implements LegacyInteroperability & Node {
  """The app that the marketing event is attributed to."""
  app: App!

  """The marketing channel used by the marketing event."""
  channel: MarketingChannel

  """A human-readable description of the marketing event."""
  description: String

  """The date and time when the marketing event ended."""
  endedAt: DateTime

  """A globally-unique identifier."""
  id: ID!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The URL where the marketing event can be managed."""
  manageUrl: URL

  """The URL where the marketing event can be previewed."""
  previewUrl: URL

  """An optional ID that helps Shopify validate engagement data."""
  remoteId: String

  """The date and time when the marketing event is scheduled to end."""
  scheduledToEndAt: DateTime

  "Where the `MarketingEvent` occurred and what kind of content was used.\nBecause `utmSource` and `utmMedium` are often used interchangeably, this is\nbased on a combination of `marketingChannel`, `referringDomain`, and `type` to\nprovide a consistent representation for any given piece of marketing\nregardless of the app that created it.\n"
  sourceAndMedium: String!

  """The date and time when the marketing event started."""
  startedAt: DateTime!

  """The display text for the marketing event type."""
  targetTypeDisplayText: String! @deprecated(reason: "Use `sourceAndMedium` instead")

  """The marketing event type."""
  type: MarketingTactic!

  """The name of the marketing campaign."""
  utmCampaign: String

  """
  The medium that the marketing campaign is using. Example values: `cpc`, `banner`.
  """
  utmMedium: String

  """
  The referrer of the marketing event. Example values: `google`, `newsletter`.
  """
  utmSource: String
}

"An auto-generated type for paginating through multiple MarketingEvents.\n"
type MarketingEventConnection {
  """A list of edges."""
  edges: [MarketingEventEdge!]!

  """A list of the nodes contained in MarketingEventEdge."""
  nodes: [MarketingEvent!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one MarketingEvent and a cursor during pagination.\n"
type MarketingEventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MarketingEventEdge."""
  node: MarketingEvent!
}

"""The set of valid sort keys for the MarketingEvent query."""
enum MarketingEventSortKeys {
  """Sort by the `id` value."""
  ID

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE

  """Sort by the `started_at` value."""
  STARTED_AT
}

"""The available types of marketing event."""
enum MarketingTactic {
  """An abandoned cart recovery email."""
  ABANDONED_CART

  """An ad, such as a Facebook ad."""
  AD

  """An affiliate link."""
  AFFILIATE

  """A direct visit to the online store."""
  DIRECT

  """A display ad."""
  DISPLAY @deprecated(reason: "`DISPLAY` is deprecated. Use `AD` instead.")

  """A follow-up email."""
  FOLLOW_UP @deprecated(reason: "'FOLLOW_UP' is deprecated. Use 'TRANSACTIONAL' instead.")

  """A link."""
  LINK

  """A loyalty program."""
  LOYALTY

  """A messaging app, such as Facebook Messenger."""
  MESSAGE

  """A newsletter."""
  NEWSLETTER

  """A notification in the Shopify admin."""
  NOTIFICATION

  """A blog post."""
  POST

  """A promotional receipt."""
  RECEIPT @deprecated(reason: "'RECEIPT' is deprecated. Use 'TRANSACTIONAL' instead.")

  """A retargeting ad."""
  RETARGETING

  """Paid search."""
  SEARCH @deprecated(reason: "`SEARCH` is deprecated. Use `AD` instead.")

  """Search engine optimization."""
  SEO

  """A popup on the online store."""
  STOREFRONT_APP

  """A transactional email."""
  TRANSACTIONAL
}

"""Represents a media interface."""
interface Media {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """The media content type."""
  mediaContentType: MediaContentType!

  """Any errors which have occurred on the media."""
  mediaErrors: [MediaError!]!

  """The warnings attached to the media."""
  mediaWarnings: [MediaWarning!]!

  """The preview image for the media."""
  preview: MediaPreviewImage

  """Current status of the media."""
  status: MediaStatus!
}

"An auto-generated type for paginating through multiple Media.\n"
type MediaConnection {
  """A list of edges."""
  edges: [MediaEdge!]!

  """A list of the nodes contained in MediaEdge."""
  nodes: [Media!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""The possible content types for a media object."""
enum MediaContentType {
  """An externally hosted video."""
  EXTERNAL_VIDEO

  """A Shopify hosted image."""
  IMAGE

  """A 3d model."""
  MODEL_3D

  """A Shopify hosted video."""
  VIDEO
}

"An auto-generated type which holds one Media and a cursor during pagination.\n"
type MediaEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MediaEdge."""
  node: Media!
}

"Represents a media error.\n"
type MediaError {
  """Code representing the type of error."""
  code: MediaErrorCode!

  """Additional details regarding the error."""
  details: String

  """Translated error message."""
  message: String!
}

"""Error types for media."""
enum MediaErrorCode {
  """
  Media could not be created because embed permissions are disabled for this video.
  """
  EXTERNAL_VIDEO_EMBED_DISABLED

  """
  Media could not be created because video is either not found or still transcoding.
  """
  EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING

  """
  Media could not be created because the external video has an invalid aspect ratio.
  """
  EXTERNAL_VIDEO_INVALID_ASPECT_RATIO

  """
  Media could not be created because the external video could not be found.
  """
  EXTERNAL_VIDEO_NOT_FOUND

  """
  Media could not be created because the external video is not listed or is private.
  """
  EXTERNAL_VIDEO_UNLISTED

  """
  Media could not be created because the cumulative file storage limit would be exceeded.
  """
  FILE_STORAGE_LIMIT_EXCEEDED

  """
  File could not be processed because the source could not be downloaded.
  """
  GENERIC_FILE_DOWNLOAD_FAILURE

  """File could not be created because the size is too large."""
  GENERIC_FILE_INVALID_SIZE

  """
  Media could not be processed because the image could not be downloaded.
  """
  IMAGE_DOWNLOAD_FAILURE

  """Media could not be processed because the image could not be processed."""
  IMAGE_PROCESSING_FAILURE

  """
  Media could not be created because the image has an invalid aspect ratio.
  """
  INVALID_IMAGE_ASPECT_RATIO

  """Media could not be created because the image size is too large."""
  INVALID_IMAGE_FILE_SIZE

  """
  Media could not be created because the image's resolution exceeds the max limit.
  """
  INVALID_IMAGE_RESOLUTION

  """Media could not be processed because the signed URL was invalid."""
  INVALID_SIGNED_URL

  """
  Media timed out because it is currently being modified by another operation.
  """
  MEDIA_TIMEOUT_ERROR

  """Media could not be created because the model file failed processing."""
  MODEL3D_GLB_OUTPUT_CREATION_ERROR

  """
  Media could not be created because the model can't be converted to USDZ format.
  """
  MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR

  """Media could not be created because the model file failed processing."""
  MODEL3D_PROCESSING_FAILURE

  """
  Media could not be created because the model's thumbnail generation failed.
  """
  MODEL3D_THUMBNAIL_GENERATION_ERROR

  """Model failed validation."""
  MODEL3D_VALIDATION_ERROR

  """Media error has occured for unknown reason."""
  UNKNOWN

  """
  Media could not be created because the image is an unsupported file type.
  """
  UNSUPPORTED_IMAGE_FILE_TYPE

  """Media could not be created because it has an invalid file type."""
  VIDEO_INVALID_FILETYPE_ERROR

  """
  Media could not be created because it does not meet the maximum duration requirement.
  """
  VIDEO_MAX_DURATION_ERROR

  """
  Media could not be created because it does not meet the maximum height requirement.
  """
  VIDEO_MAX_HEIGHT_ERROR

  """
  Media could not be created because it does not meet the maximum width requirement.
  """
  VIDEO_MAX_WIDTH_ERROR

  """Media could not be created because the metadata could not be read."""
  VIDEO_METADATA_READ_ERROR

  """
  Media could not be created because it does not meet the minimum duration requirement.
  """
  VIDEO_MIN_DURATION_ERROR

  """
  Media could not be created because it does not meet the minimum height requirement.
  """
  VIDEO_MIN_HEIGHT_ERROR

  """
  Media could not be created because it does not meet the minimum width requirement.
  """
  VIDEO_MIN_WIDTH_ERROR

  """Video failed validation."""
  VIDEO_VALIDATION_ERROR
}

"""Host for a Media Resource."""
enum MediaHost {
  """Host for Vimeo embedded videos."""
  VIMEO

  """Host for YouTube embedded videos."""
  YOUTUBE
}

"An image hosted on Shopify.\n"
type MediaImage implements File & Media & Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  "The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.\n"
  createdAt: DateTime!

  """Any errors that have occurred on the file."""
  fileErrors: [FileError!]!

  """The status of the file."""
  fileStatus: FileStatus!

  """A globally-unique identifier."""
  id: ID!

  """The image for the media. Returns `null` until `status` is `READY`."""
  image: Image

  """The media content type."""
  mediaContentType: MediaContentType!

  """Any errors which have occurred on the media."""
  mediaErrors: [MediaError!]!

  """The warnings attached to the media."""
  mediaWarnings: [MediaWarning!]!

  """The MIME type of the image."""
  mimeType: String

  """The original source of the image."""
  originalSource: MediaImageOriginalSource

  """The preview image for the media."""
  preview: MediaPreviewImage

  """Current status of the media."""
  status: MediaStatus!
}

"The original source for an image.\n"
type MediaImageOriginalSource {
  """The size of the original file in bytes."""
  fileSize: Int
}

"""Represents the preview image for a media."""
type MediaPreviewImage {
  """
  The preview image for the media. Returns `null` until `status` is `READY`.
  """
  image: Image

  """Current status of the preview image."""
  status: MediaPreviewImageStatus!
}

"""The possible statuses for a media preview image."""
enum MediaPreviewImageStatus {
  """Preview image processing has failed."""
  FAILED

  """Preview image is being processed."""
  PROCESSING

  """Preview image is ready to be displayed."""
  READY

  """Preview image is uploaded but not yet processed."""
  UPLOADED
}

"""The possible statuses for a media object."""
enum MediaStatus {
  """Media processing has failed."""
  FAILED

  """Media is being processed."""
  PROCESSING

  """Media is ready to be displayed."""
  READY

  """Media has been uploaded but not yet processed."""
  UPLOADED
}

"""
Represents an error that happens during execution of a Media query or mutation.
"""
type MediaUserError implements DisplayableError {
  """The error code."""
  code: MediaUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""Possible error codes that can be returned by `MediaUserError`."""
enum MediaUserErrorCode {
  """The input value is blank."""
  BLANK

  """The input value is invalid."""
  INVALID

  """Invalid media type."""
  INVALID_MEDIA_TYPE

  """
  Exceeded the maximum number of 100 variant-media pairs per mutation call.
  """
  MAXIMUM_VARIANT_MEDIA_PAIRS_EXCEEDED

  """
  Media cannot be modified. It is currently being modified by another operation.
  """
  MEDIA_CANNOT_BE_MODIFIED

  """Media does not exist."""
  MEDIA_DOES_NOT_EXIST

  """Media does not exist on the given product."""
  MEDIA_DOES_NOT_EXIST_ON_PRODUCT

  """The specified media is not attached to the specified variant."""
  MEDIA_IS_NOT_ATTACHED_TO_VARIANT

  """Model3d creation throttle was exceeded."""
  MODEL3D_THROTTLE_EXCEEDED

  """Model validation failed."""
  MODEL3D_VALIDATION_ERROR

  """Non-ready media are not supported."""
  NON_READY_MEDIA

  """Product does not exist."""
  PRODUCT_DOES_NOT_EXIST

  """Exceeded the limit of media per product."""
  PRODUCT_MEDIA_LIMIT_EXCEEDED

  """Product variant already has attached media."""
  PRODUCT_VARIANT_ALREADY_HAS_MEDIA

  """Variant does not exist on the given product."""
  PRODUCT_VARIANT_DOES_NOT_EXIST_ON_PRODUCT

  """Variant specified in more than one pair."""
  PRODUCT_VARIANT_SPECIFIED_MULTIPLE_TIMES

  """Exceeded the limit of media per shop."""
  SHOP_MEDIA_LIMIT_EXCEEDED

  """Only one mediaId is allowed per variant-media input pair."""
  TOO_MANY_MEDIA_PER_INPUT_PAIR

  """Video creation throttle was exceeded."""
  VIDEO_THROTTLE_EXCEEDED

  """Video validation failed."""
  VIDEO_VALIDATION_ERROR
}

"Represents a media warning.\n"
type MediaWarning {
  """The code representing the type of warning."""
  code: MediaWarningCode!

  """Translated warning message."""
  message: String
}

"""Warning types for media."""
enum MediaWarningCode {
  """
  3D model physical size might be invalid. The dimensions of your model are very large. Consider reviewing your model to ensure they are correct.
  """
  MODEL_LARGE_PHYSICAL_SIZE

  """
  3D model physical size might be invalid. The dimensions of your model are very small. Consider reviewing your model to ensure they are correct.
  """
  MODEL_SMALL_PHYSICAL_SIZE
}

"""The class of the discount for combining purposes."""
enum MerchandiseDiscountClass {
  """Combined as an order discount."""
  ORDER

  """Combined as a product discount."""
  PRODUCT
}

"""
Merchant approval for accelerated onboarding to channel integration apps.
"""
type MerchantApprovalSignals {
  """
  Whether the shop's Shopify Payments account identity is verified. Returns `false` if the identity is unverified or if the shop doesn't have a Shopify Payments account.
  """
  identityVerified: Boolean!

  """
  Whether Shopify has pre-verified the merchant's business for onboarding to channel integration apps. Returns `false` if the shop is not marked for verification.
  """
  verifiedByShopify: Boolean!
}

"Metafields enable you to attach additional information to a Shopify resource, such as a [Product](https://shopify.dev/api/admin-graphql/latest/objects/product) or a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).\nFor more information about where you can attach metafields refer to [HasMetafields](https://shopify.dev/api/admin/graphql/reference/common-objects/HasMetafields).\nSome examples of the data that metafields enable you to store are specifications, size charts, downloadable documents, release dates, images, or part numbers.\nMetafields are identified by an owner resource, namespace, and key. and store a value along with type information for that value.\n"
type Metafield implements LegacyInteroperability & Node {
  """The date and time when the metafield was created."""
  createdAt: DateTime!

  "The optional, associated metafield definition that maps to this metafield's namespace and key pair.\n"
  definition: MetafieldDefinition

  """The description of the metafield."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  "The unique identifier for the metafield in its namespace.\n"
  key: String!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  "A container for a group of metafields.\nGrouping metafields within a namespace prevents your metafields from conflicting with other metafields that have the same key name.\n"
  namespace: String!

  """The resource that the metafield is attached to."""
  owner: HasMetafields!

  "The resource that the metafield is attached to.\n"
  ownerType: MetafieldOwnerType!

  """
  Returns a reference object if the metafield definition's type is a resource reference.
  """
  reference: MetafieldReference

  "The type of data that the metafield stores in the `value` field.\nSee the list of [supported types](https://shopify.dev/apps/metafields/types).\n"
  type: String!

  """The date and time when the metafield was updated."""
  updatedAt: DateTime!

  "The data to store in the metafield. The data is always stored as a string, regardless of the metafield's type.\n"
  value: String!
}

"An auto-generated type for paginating through multiple Metafields.\n"
type MetafieldConnection {
  """A list of edges."""
  edges: [MetafieldEdge!]!

  """A list of the nodes contained in MetafieldEdge."""
  nodes: [Metafield!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"Metafield definitions enable you to define additional validation constraints for metafields, and enable the\nmerchant to edit metafield values in context.\n"
type MetafieldDefinition implements Node {
  """The description of a metafield definition."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """
  The key name used to identify a metafield definition within a namespace.
  """
  key: String!

  """The list of metafields associated with a metafield definition."""
  metafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Returns the metafields filtered by the validation status."""
    validationStatus: MetafieldValidationStatus = ANY
  ): MetafieldConnection!

  """The count of metafields under a metafield definition."""
  metafieldsCount(
    """The current validation status."""
    validationStatus: MetafieldValidationStatus
  ): Int!

  """The human-readable name for the metafield definition."""
  name: String!

  """
  The namespace of the metafield definition. You can use a namespace to group related metafields.
  """
  namespace: String!

  "The resource type that the metafield definition is attached to. For example, `Product` or `Collection`.\n"
  ownerType: MetafieldOwnerType!

  """The position of the metafield definition in the pinned list."""
  pinnedPosition: Int

  """
  The standard metafield definition template associated with a metafield definition.
  """
  standardTemplate: StandardMetafieldDefinitionTemplate

  """The type of data that the metafield will store."""
  type: MetafieldDefinitionType!

  """
  The validation status for the existing metafields within a metafield definition.
  """
  validationStatus: MetafieldDefinitionValidationStatus!

  "A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for\nthe metafield. For example, for a metafield with the type `date`, you can set a minimum date validation, so\nthat the metafield will only store dates after the specific minimum date.\n"
  validations: [MetafieldDefinitionValidation!]!

  """
  Whether metafields for the metafield definition are visible using the Storefront API.
  """
  visibleToStorefrontApi: Boolean!
}

"An auto-generated type for paginating through multiple MetafieldDefinitions.\n"
type MetafieldDefinitionConnection {
  """A list of edges."""
  edges: [MetafieldDefinitionEdge!]!

  """A list of the nodes contained in MetafieldDefinitionEdge."""
  nodes: [MetafieldDefinition!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `metafieldDefinitionCreate` mutation."""
type MetafieldDefinitionCreatePayload {
  """The metafield definition that was created."""
  createdDefinition: MetafieldDefinition

  """The list of errors that occurred from executing the mutation."""
  userErrors: [MetafieldDefinitionCreateUserError!]!
}

"""
An error that occurs during the execution of `MetafieldDefinitionCreate`.
"""
type MetafieldDefinitionCreateUserError implements DisplayableError {
  """The error code."""
  code: MetafieldDefinitionCreateUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `MetafieldDefinitionCreateUserError`.
"""
enum MetafieldDefinitionCreateUserErrorCode {
  """A duplicate option."""
  DUPLICATE_OPTION

  """The input value isn't included in the list."""
  INCLUSION

  """The input value is invalid."""
  INVALID

  """A field contains an invalid character."""
  INVALID_CHARACTER

  """An invalid option."""
  INVALID_OPTION

  """The maximum limit of definitions per owner type has exceeded."""
  LIMIT_EXCEEDED

  """The pinned limit has been reached for the owner type."""
  PINNED_LIMIT_REACHED

  """The input value needs to be blank."""
  PRESENT

  """
  This namespace and key combination is reserved for standard definitions.
  """
  RESERVED_NAMESPACE_KEY

  """The definition limit per owner type has exceeded."""
  RESOURCE_TYPE_LIMIT_EXCEEDED

  """The input value is already taken."""
  TAKEN

  """The input value is too long."""
  TOO_LONG

  """The input value is too short."""
  TOO_SHORT

  """
  This namespace and key combination is already in use for a set of your metafields.
  """
  UNSTRUCTURED_ALREADY_EXISTS
}

"""Return type for `metafieldDefinitionDelete` mutation."""
type MetafieldDefinitionDeletePayload {
  """The id of the deleted metafield definition."""
  deletedDefinitionId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [MetafieldDefinitionDeleteUserError!]!
}

"""
An error that occurs during the execution of `MetafieldDefinitionDelete`.
"""
type MetafieldDefinitionDeleteUserError implements DisplayableError {
  """The error code."""
  code: MetafieldDefinitionDeleteUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `MetafieldDefinitionDeleteUserError`.
"""
enum MetafieldDefinitionDeleteUserErrorCode {
  """An internal error occurred."""
  INTERNAL_ERROR

  """Definition not found."""
  NOT_FOUND

  """The input value needs to be blank."""
  PRESENT
}

"An auto-generated type which holds one MetafieldDefinition and a cursor during pagination.\n"
type MetafieldDefinitionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MetafieldDefinitionEdge."""
  node: MetafieldDefinition!
}

"Specifies the input fields that are required to create a metafield definition.\n"
input MetafieldDefinitionInput {
  """The description for the metafield definition."""
  description: String

  """
  The key name used to identify a metafield definition within a namespace.
  """
  key: String!

  """The human-readable name for the metafield definition."""
  name: String!

  """The namespace to group a metafield definition."""
  namespace: String!

  """The resource type that the metafield definition is attached to."""
  ownerType: MetafieldOwnerType!

  """Whether to pin the metafield definition."""
  pin: Boolean = false

  """The type of data that the metafield will store."""
  type: String!

  "A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for\nthe metafield. For example, for a metafield with the type `date`, you can set a minimum date validation, so\nthat the metafield will only store dates after the specific minimum date.\n"
  validations: [MetafieldDefinitionValidationInput!]

  """
  Whether metafields for the definition are visible using the Storefront API.
  """
  visibleToStorefrontApi: Boolean = false
}

"""Return type for `metafieldDefinitionPin` mutation."""
type MetafieldDefinitionPinPayload {
  """The metafield definition that was pinned."""
  pinnedDefinition: MetafieldDefinition

  """The list of errors that occurred from executing the mutation."""
  userErrors: [MetafieldDefinitionPinUserError!]!
}

"""An error that occurs during the execution of `MetafieldDefinitionPin`."""
type MetafieldDefinitionPinUserError implements DisplayableError {
  """The error code."""
  code: MetafieldDefinitionPinUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `MetafieldDefinitionPinUserError`.
"""
enum MetafieldDefinitionPinUserErrorCode {
  """The metafield definition is already pinned."""
  ALREADY_PINNED

  """An internal error occurred."""
  INTERNAL_ERROR

  """The metafield definition was not found."""
  NOT_FOUND

  """The pinned limit has been reached for owner type."""
  PINNED_LIMIT_REACHED
}

"""Possible metafield definition pinned statuses."""
enum MetafieldDefinitionPinnedStatus {
  """All metafield definitions."""
  ANY

  """Only metafield definitions that are pinned."""
  PINNED

  """Only metafield definitions that are not pinned."""
  UNPINNED
}

"""The set of valid sort keys for the MetafieldDefinition query."""
enum MetafieldDefinitionSortKeys {
  """Sort by the `id` value."""
  ID

  """Sort by the `name` value."""
  NAME

  """Sort by the `pinned_position` value."""
  PINNED_POSITION

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"The type and name for the optional validation configuration of a metafield.\n\nFor example, a supported validation might consist of a `max` name and a `number_integer` type.\nThis validation can then be used to enforce a maximum character length for a `single_line_text_field` metafield.\n"
type MetafieldDefinitionSupportedValidation {
  """The name of the metafield definition validation."""
  name: String!

  """The type of input for the validation."""
  type: String!
}

"A metafield definition type provides basic foundation and validation for a metafield.\n"
type MetafieldDefinitionType {
  """The category associated with the metafield definition type."""
  category: String!

  "The name of the type for the metafield definition.\nSee the list of [supported types](https://shopify.dev/apps/metafields/types).\n"
  name: String!

  """The supported validations for a metafield definition type."""
  supportedValidations: [MetafieldDefinitionSupportedValidation!]!

  """
  Whether metafields without a definition can be migrated to a definition of this type.
  """
  supportsDefinitionMigrations: Boolean!

  """The value type for a metafield created with this definition type."""
  valueType: MetafieldValueType! @deprecated(reason: "`valueType` is deprecated and `name` should be used for type information.")
}

"""Return type for `metafieldDefinitionUnpin` mutation."""
type MetafieldDefinitionUnpinPayload {
  """The metafield definition that was unpinned."""
  unpinnedDefinition: MetafieldDefinition

  """The list of errors that occurred from executing the mutation."""
  userErrors: [MetafieldDefinitionUnpinUserError!]!
}

"""
An error that occurs during the execution of `MetafieldDefinitionUnpin`.
"""
type MetafieldDefinitionUnpinUserError implements DisplayableError {
  """The error code."""
  code: MetafieldDefinitionUnpinUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `MetafieldDefinitionUnpinUserError`.
"""
enum MetafieldDefinitionUnpinUserErrorCode {
  """An internal error occurred."""
  INTERNAL_ERROR

  """The metafield definition was not found."""
  NOT_FOUND

  """The metafield definition isn't pinned."""
  NOT_PINNED
}

"Specifies the input fields that are required to update a metafield definition.\n"
input MetafieldDefinitionUpdateInput {
  """The description for the metafield definition."""
  description: String

  """
  The key name used to identify a metafield definition within a namespace.
  """
  key: String!

  """The human-readable name for the metafield definition."""
  name: String

  """The namespace to group a metafield definition."""
  namespace: String!

  """The resource type that the metafield definition is attached to."""
  ownerType: MetafieldOwnerType!

  """Whether to pin the metafield definition."""
  pin: Boolean

  """
  Whether metafields for the definition are visible using the Storefront API.
  """
  visibleToStorefrontApi: Boolean = false
}

"""Return type for `metafieldDefinitionUpdate` mutation."""
type MetafieldDefinitionUpdatePayload {
  """The metafield definition that was updated."""
  updatedDefinition: MetafieldDefinition

  """The list of errors that occurred from executing the mutation."""
  userErrors: [MetafieldDefinitionUpdateUserError!]!
}

"""
An error that occurs during the execution of `MetafieldDefinitionUpdate`.
"""
type MetafieldDefinitionUpdateUserError implements DisplayableError {
  """The error code."""
  code: MetafieldDefinitionUpdateUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `MetafieldDefinitionUpdateUserError`.
"""
enum MetafieldDefinitionUpdateUserErrorCode {
  """An internal error occurred."""
  INTERNAL_ERROR

  """An invalid input."""
  INVALID_INPUT

  """The metafield definition wasn't found."""
  NOT_FOUND

  """The pinned limit has been reached for the owner type."""
  PINNED_LIMIT_REACHED

  """The input value needs to be blank."""
  PRESENT

  """The input value is too long."""
  TOO_LONG
}

"A configured metafield definition validation.\n\nFor example, for a metafield definition of `number_integer` type, you can set a validation with the name `max`\nand a value of `15`. This validation will ensure that the value of the metafield is a number less than or equal to 15.\n\nRefer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).\n"
type MetafieldDefinitionValidation {
  """The validation name."""
  name: String!

  """The name for the metafield type of this validation."""
  type: String!

  """The validation value."""
  value: String
}

"The name and value for a metafield definition validation.\n\nFor example, for a metafield definition of `single_line_text_field` type, you can set a validation with the name `min` and a value of `10`.\nThis validation will ensure that the value of the metafield is at least 10 characters.\n\nRefer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).\n"
input MetafieldDefinitionValidationInput {
  """The name for the metafield definition validation."""
  name: String!

  """The value for the metafield definition validation."""
  value: String!
}

"""Possible metafield definition validation statuses."""
enum MetafieldDefinitionValidationStatus {
  """All of this definition's metafields are valid."""
  ALL_VALID

  """
  Asynchronous validation of this definition's metafields is in progress.
  """
  IN_PROGRESS

  """Some of this definition's metafields are invalid."""
  SOME_INVALID
}

"""Specifies the input fields to delete a metafield."""
input MetafieldDeleteInput {
  """The ID of the metafield to delete."""
  id: ID!
}

"""Return type for `metafieldDelete` mutation."""
type MetafieldDeletePayload {
  """The ID of the deleted metafield."""
  deletedId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type which holds one Metafield and a cursor during pagination.\n"
type MetafieldEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MetafieldEdge."""
  node: Metafield!
}

"The input fields to use to create or update a metafield through a mutation on the owning resource.\nAn alternative way to create or update a metafield is by using the\n[metafieldsSet](https://shopify.dev/api/admin-graphql/latest/mutations/metafieldsSet) mutation.\n"
input MetafieldInput {
  """The description of the metafield."""
  description: String

  "The unique ID of the metafield. You don't include an ID when you create a metafield because the metafield ID\nis created automatically. The ID is required when you update a metafield.\n"
  id: ID

  """
  The key name of the metafield. Required when creating but optional when updating.
  """
  key: String

  "The namespace for a metafield. The namespace is required when you create a metafield and is optional when you\nupdate a metafield.\n"
  namespace: String

  "The metafield's [type](https://shopify.dev/apps/metafields/types). The metafield type is required\nwhen you create a metafield and is optional when you update a metafield.\n"
  type: String

  """The value of a metafield."""
  value: String
}

"""Possible types of a metafield's owner resource."""
enum MetafieldOwnerType {
  """The Api Permission metafield owner type."""
  API_PERMISSION

  """The Article metafield owner type."""
  ARTICLE

  """The Blog metafield owner type."""
  BLOG

  """The Collection metafield owner type."""
  COLLECTION

  """The Customer metafield owner type."""
  CUSTOMER

  """The Discount metafield owner type."""
  DISCOUNT

  """The Draft Order metafield owner type."""
  DRAFTORDER

  """The Order metafield owner type."""
  ORDER

  """The Page metafield owner type."""
  PAGE

  """The Product metafield owner type."""
  PRODUCT

  """The Product Image metafield owner type."""
  PRODUCTIMAGE

  """The Product Variant metafield owner type."""
  PRODUCTVARIANT

  """The Shop metafield owner type."""
  SHOP
}

"The resource referenced by the metafield value.\n"
union MetafieldReference = GenericFile | MediaImage | OnlineStorePage | Product | ProductVariant | Video

"By default, the Storefront API can't read metafields. To make specific metafields visible in the Storefront API,\nyou need to create a `MetafieldStorefrontVisibility` record. A `MetafieldStorefrontVisibility` record is a list\nof the metafields, defined by the `owner_type`, `namespace`, and `key`, to make visible in the Storefront API.\n\nSee [expose metafields in the Storefront API](https://shopify.dev/api/examples/metafields#exposing-metafields)\nfor more details.\n"
type MetafieldStorefrontVisibility implements LegacyInteroperability & Node {
  """
  The date and time when the metafield was set to visible in the Storefront API.
  """
  createdAt: DateTime!

  """A globally-unique identifier."""
  id: ID!

  """The key of a metafield to make visible in the Storefront API."""
  key: String!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The namespace of a metafield to make visible in the Storefront API."""
  namespace: String!

  """The owner type of a metafield to make visible in the Storefront API."""
  ownerType: MetafieldOwnerType!

  "The date and time when the `MetafieldStorefrontVisilibty` record was updated.\n"
  updatedAt: DateTime!
}

"An auto-generated type for paginating through multiple MetafieldStorefrontVisibilities.\n"
type MetafieldStorefrontVisibilityConnection {
  """A list of edges."""
  edges: [MetafieldStorefrontVisibilityEdge!]!

  """A list of the nodes contained in MetafieldStorefrontVisibilityEdge."""
  nodes: [MetafieldStorefrontVisibility!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `metafieldStorefrontVisibilityCreate` mutation."""
type MetafieldStorefrontVisibilityCreatePayload {
  """The `MetafieldStorefrontVisibility` that was created."""
  metafieldStorefrontVisibility: MetafieldStorefrontVisibility

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `metafieldStorefrontVisibilityDelete` mutation."""
type MetafieldStorefrontVisibilityDeletePayload {
  """The ID of the deleted `MetafieldStorefrontVisibility` record."""
  deletedMetafieldStorefrontVisibilityId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type which holds one MetafieldStorefrontVisibility and a cursor during pagination.\n"
type MetafieldStorefrontVisibilityEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MetafieldStorefrontVisibilityEdge."""
  node: MetafieldStorefrontVisibility!
}

"Specifies the input fields to create a `MetafieldStorefrontVisibility` record.\n"
input MetafieldStorefrontVisibilityInput {
  """The key of a metafield to make visible in the Storefront API."""
  key: String!

  """The namespace of a metafield to make visible in the Storefront API."""
  namespace: String!

  """The owner type of a metafield to make visible in the Storefront API."""
  ownerType: MetafieldOwnerType!
}

"""Possible metafield validation statuses."""
enum MetafieldValidationStatus {
  """Any validation status (valid or invalid)."""
  ANY

  """Invalid (according to definition)."""
  INVALID

  """Valid (according to definition)."""
  VALID
}

"Legacy type information for the stored value.\nReplaced by `type`.\n"
enum MetafieldValueType {
  """A `true` or `false` value."""
  BOOLEAN

  """A whole number."""
  INTEGER

  """A JSON string."""
  JSON_STRING

  """A text field."""
  STRING
}

"""Specifies the input fields for a metafield value to set."""
input MetafieldsSetInput {
  """The key name of the metafield."""
  key: String!

  "A container for a group of metafields.\nGrouping metafields in a namespace prevents your metafields from conflicting with other metafields that have the same key name.\n"
  namespace: String!

  """The ID of the owner resource."""
  ownerId: ID!

  "The type of data that the metafield stores.\nThe type of data must be a [supported type](https://shopify.dev/apps/metafields/types).\n"
  type: String!

  "The data to store in the metafield. The data is always stored as a string, regardless of the metafield's type.\n"
  value: String!
}

"""Return type for `metafieldsSet` mutation."""
type MetafieldsSetPayload {
  """The list of metafields that were set."""
  metafields: [Metafield!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [MetafieldsSetUserError!]!
}

"""An error that occurs during the execution of `MetafieldsSet`."""
type MetafieldsSetUserError implements DisplayableError {
  """The error code."""
  code: MetafieldsSetUserErrorCode

  """The index of the array element that's causing the error."""
  elementIndex: Int

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""Possible error codes that can be returned by `MetafieldsSetUserError`."""
enum MetafieldsSetUserErrorCode {
  """The input value is blank."""
  BLANK

  """The input value isn't included in the list."""
  INCLUSION

  """The type is invalid."""
  INVALID_TYPE

  """The value is invalid for metafield type or for definition options."""
  INVALID_VALUE

  """
  The input value should be less than or equal to the maximum value allowed.
  """
  LESS_THAN_OR_EQUAL_TO

  """The input value needs to be blank."""
  PRESENT

  """The input value is too long."""
  TOO_LONG

  """The input value is too short."""
  TOO_SHORT
}

"""The set of valid sort keys for the MethodDefinition query."""
enum MethodDefinitionSortKeys {
  """Sort by the `id` value."""
  ID

  """Sort by the `rate_provider_type` value."""
  RATE_PROVIDER_TYPE

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"Represents a Shopify hosted 3D model.\n"
type Model3d implements Media & Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  """The 3d model's bounding box information."""
  boundingBox: Model3dBoundingBox

  """The 3d model's filename."""
  filename: String!

  """A globally-unique identifier."""
  id: ID!

  """The media content type."""
  mediaContentType: MediaContentType!

  """Any errors which have occurred on the media."""
  mediaErrors: [MediaError!]!

  """The warnings attached to the media."""
  mediaWarnings: [MediaWarning!]!

  """The 3d model's original source."""
  originalSource: Model3dSource

  """The preview image for the media."""
  preview: MediaPreviewImage

  """The 3d model's sources."""
  sources: [Model3dSource!]!

  """Current status of the media."""
  status: MediaStatus!
}

"Bounding box information of a 3d model.\n"
type Model3dBoundingBox {
  "Size in meters of the smallest volume which contains the 3d model.\n"
  size: Vector3!
}

"Represents a source for a Shopify hosted 3d model.\n\nTypes of sources include GLB and USDZ formatted 3d models, where one is the original\n3d model and the other has been converted from the original.\n\nNote that if the original source is in GLB format and over 15 MBs in size, both the\noriginal and the USDZ formatted source will be optimized in order to reduce filesize.\n"
type Model3dSource {
  """The 3d model source's filesize."""
  filesize: Int!

  """The 3d model source's format."""
  format: String!

  """The 3d model source's MIME type."""
  mimeType: String!

  """The 3d model source's URL."""
  url: String!
}

"""
A monetary value string without a currency symbol or code. Example value: `"100.57"`.
"""
scalar Money

"A collection of monetary values in their respective currencies. Typically used in the context of multi-currency pricing and transactions,\nwhen an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).\n"
type MoneyBag {
  """Amount in presentment currency."""
  presentmentMoney: MoneyV2!

  """Amount in shop currency."""
  shopMoney: MoneyV2!
}

"""Specifies the fields for a monetary value with currency."""
input MoneyInput {
  """Decimal money amount."""
  amount: Decimal!

  """Currency of the money."""
  currencyCode: CurrencyCode!
}

"A monetary value with currency.\n"
type MoneyV2 {
  """Decimal money amount."""
  amount: Decimal!

  """Currency of the money."""
  currencyCode: CurrencyCode!
}

"""An individual move to perform of an object to a position."""
input MoveInput {
  """The ID of the object to be moved."""
  id: ID!

  """The new position of the object in the set, using a 0 based index."""
  newPosition: UnsignedInt64!
}

"""The schema's entry point for all mutation operations."""
type Mutation {
  """
  Allows an app to create a credit for a shop that can be used towards future app purchases.
  """
  appCreditCreate(
    """
    The amount that can be used towards future app purchases in Shopify.The only permitted currency code is USD.
    """
    amount: MoneyInput!

    """The description of the app credit."""
    description: String!

    """Specifies whether the app credit is a test transaction."""
    test: Boolean = false
  ): AppCreditCreatePayload

  "Charges a shop for features or services one time.\nThis type of charge is recommended for apps that aren't billed on a recurring basis.\nTest and demo shops aren't charged.\n"
  appPurchaseOneTimeCreate(
    """The name of the one-time purchase from the app."""
    name: String!

    """
    The amount to be charged to the store for the app one-time purchase. The only permitted currency code is USD.
    """
    price: MoneyInput!

    """
    The URL where the merchant is redirected after approving the app one-time purchase.
    """
    returnUrl: URL!

    """
    Whether the app one-time purchase is a test transaction. The default value is `false`.
    """
    test: Boolean = false
  ): AppPurchaseOneTimeCreatePayload

  """
  Creates a record of the attributed revenue for the app. This mutation should only be used to capture transactions that are not managed by the Billing API.
  """
  appRevenueAttributionRecordCreate(
    """The app revenue attribution record to be created."""
    appRevenueAttributionRecord: AppRevenueAttributionRecordInput!
  ): AppRevenueAttributionRecordCreatePayload

  """Deletes a record of the attributed revenue for the app."""
  appRevenueAttributionRecordDelete(
    """The unique identifier of the revenue attribution record."""
    id: ID!
  ): AppRevenueAttributionRecordDeletePayload

  """Cancels an app subscription on a store."""
  appSubscriptionCancel(
    """The ID of the app subscription to be cancelled."""
    id: ID!

    "Whether to issue prorated credits for the unused portion of the app subscription.  There will\nbe a corresponding deduction (based on revenue share) to your Partner account.\nFor example, if a $10.00 app subscription (with 0% revenue share) is cancelled and prorated half way\nthrough the billing cycle, then the merchant will be credited $5.00 and that amount will be deducted\nfrom your Partner account.\n"
    prorate: Boolean = false
  ): AppSubscriptionCancelPayload

  """
  Allows an app to charge a store for features or services on a recurring basis.
  """
  appSubscriptionCreate(
    """
    Attaches one or more pricing plans to an app subscription. Only one pricing plan can be defined for each available type.
    """
    lineItems: [AppSubscriptionLineItemInput!]!

    """A descriptive name for the app subscription."""
    name: String!

    """
    The replacement behavior when creating an app subscription for a merchant with an already existing app subscription.
    """
    replacementBehavior: AppSubscriptionReplacementBehavior = STANDARD

    """
    The URL pointing to the page where the merchant is redirected after approving the app subscription.
    """
    returnUrl: URL!

    """
    Whether the app subscription is a test transaction. The default value is `false`.
    """
    test: Boolean

    """
    The number of days of the free trial period, beginning on the day that the merchant approves the app charges.
    """
    trialDays: Int
  ): AppSubscriptionCreatePayload

  """
  Updates the capped amount on the usage pricing plan of an app subscription line item.
  """
  appSubscriptionLineItemUpdate(
    """
    The new maximum amount of usage charges that can be incurred within a subscription billing interval.
    """
    cappedAmount: MoneyInput!

    """The ID of the app subscription line item to be updated."""
    id: ID!
  ): AppSubscriptionLineItemUpdatePayload

  """Extends the trial of an app subscription."""
  appSubscriptionTrialExtend(
    """
    The number of days to extend the trial. The value must be greater than 0 and less than or equal to 1000.
    """
    days: Int!

    """The ID of the app subscription to extend the trial for."""
    id: ID!
  ): AppSubscriptionTrialExtendPayload

  "Enables an app to charge a store for features or services on a per-use basis.\nThe usage charge value is counted towards the `cappedAmount` limit that was specified in the `appUsagePricingDetails` field when the app subscription was created.\nIf you create an app usage charge that causes the total usage charges in a billing interval to exceed the capped amount, then a `Total price exceeds balance remaining` error is returned.\n"
  appUsageRecordCreate(
    """The description of the app usage record."""
    description: String!

    """
    The price of the app usage record. The only permitted currceny code is USD.
    """
    price: MoneyInput!

    """
    The ID of the app subscription line item to create the usage record under. This app subscription line item must have a usage pricing plan.
    """
    subscriptionLineItemId: ID!
  ): AppUsageRecordCreatePayload

  "Starts the cancelation process of a running bulk operation.\n\nThere may be a short delay from when a cancelation starts until the operation is actually canceled.\n"
  bulkOperationCancel(
    """The ID of the bulk operation to cancel."""
    id: ID!
  ): BulkOperationCancelPayload

  "Creates and runs a bulk operation mutation.\n\nTo learn how to bulk import large volumes of data asynchronously, refer to the\n[bulk import data guide](https://shopify.dev/api/usage/bulk-operations/imports).\n"
  bulkOperationRunMutation(
    """An optional identifier which may be used for querying."""
    clientIdentifier: String

    """The mutation to be executed in bulk."""
    mutation: String!

    """The staged upload path of the file containing mutation variables."""
    stagedUploadPath: String!
  ): BulkOperationRunMutationPayload

  "Creates and runs a bulk operation query.\n\nSee the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/imports) for more details.\n"
  bulkOperationRunQuery(
    """The query to be executed in bulk."""
    query: String!
  ): BulkOperationRunQueryPayload

  """Creates product feedback for multiple products."""
  bulkProductResourceFeedbackCreate(
    """An array of inputs to create the feedback. Limited to 50."""
    feedbackInput: [ProductResourceFeedbackInput!]!
  ): BulkProductResourceFeedbackCreatePayload

  """Adds products to a collection."""
  collectionAddProducts(
    """The ID of the collection that's being updated."""
    id: ID!

    """The IDs of the products that are being added to the collection."""
    productIds: [ID!]!
  ): CollectionAddProductsPayload

  "Creates a collection.\n"
  collectionCreate(
    """The properties to use when creating the collection."""
    input: CollectionInput!
  ): CollectionCreatePayload

  """Deletes a collection."""
  collectionDelete(
    """Specifies the collection to delete by its ID."""
    input: CollectionDeleteInput!
  ): CollectionDeletePayload

  """Publishes a collection to a channel."""
  collectionPublish(
    """
    Specify a collection to publish and the sales channels to publish it to.
    """
    input: CollectionPublishInput!
  ): CollectionPublishPayload @deprecated(reason: "Use `publishablePublish` instead")

  """
  Removes a set of products from a given collection. It can take a long time to run. Instead of returning a collection it returns a job, which should be polled.
  """
  collectionRemoveProducts(
    """The ID of the collection to remove products from."""
    id: ID!

    """The IDs of products to remove from the collection."""
    productIds: [ID!]!
  ): CollectionRemoveProductsPayload

  """Asynchronously reorders a set of products from a given collection."""
  collectionReorderProducts(
    """The ID of the collection on which to reorder products."""
    id: ID!

    """A list of moves to perform which will be evaulated in order."""
    moves: [MoveInput!]!
  ): CollectionReorderProductsPayload

  """Unpublishes a collection."""
  collectionUnpublish(
    """
    Specify a collection to unpublish and the sales channels to remove it from.
    """
    input: CollectionUnpublishInput!
  ): CollectionUnpublishPayload @deprecated(reason: "Use `publishableUnpublish` instead")

  """Updates a collection."""
  collectionUpdate(
    """The updated properties for the collection."""
    input: CollectionInput!
  ): CollectionUpdatePayload

  """Add tax exemptions for the customer."""
  customerAddTaxExemptions(
    """The ID of the customer to update."""
    customerId: ID!

    "The list of tax exemptions to add for the customer, in the format of an array or a comma-separated list. Example values: `[\"CA_BC_RESELLER_EXEMPTION\", \"CA_STATUS_CARD_EXEMPTION\"]`, `\"CA_BC_RESELLER_EXEMPTION, CA_STATUS_CARD_EXEMPTION\"`.\n"
    taxExemptions: [TaxExemption!]!
  ): CustomerAddTaxExemptionsPayload

  """Create a new customer."""
  customerCreate(
    """The input fields to create a customer."""
    input: CustomerInput!
  ): CustomerCreatePayload

  """Delete a customer."""
  customerDelete(
    """Specifies the customer to delete."""
    input: CustomerDeleteInput!
  ): CustomerDeletePayload

  "Update a customer's email marketing information information.\n"
  customerEmailMarketingConsentUpdate(
    """
    Specifies the input fields to update a customer's email marketing consent information.
    """
    input: CustomerEmailMarketingConsentUpdateInput!
  ): CustomerEmailMarketingConsentUpdatePayload

  """Generate an account activation URL for a customer."""
  customerGenerateAccountActivationUrl(
    """The ID of the customer that the URL is generated for."""
    customerId: ID!
  ): CustomerGenerateAccountActivationUrlPayload

  """Creates a credit card payment method for a customer."""
  customerPaymentMethodCreditCardCreate(
    """The billing address."""
    billingAddress: MailingAddressInput!

    """The ID of the customer."""
    customerId: ID!

    """The Cardserver session ID."""
    sessionId: String!
  ): CustomerPaymentMethodCreditCardCreatePayload

  """Updates the credit card payment method for a customer."""
  customerPaymentMethodCreditCardUpdate(
    """The billing address."""
    billingAddress: MailingAddressInput!

    """The ID of the customer payment method."""
    id: ID!

    """The Cardserver session ID."""
    sessionId: String!
  ): CustomerPaymentMethodCreditCardUpdatePayload

  "Returns a URL that allows the customer to update a specific payment method.\n\nCurrently, `customerPaymentMethodGetUpdateUrl` only supports Shop Pay.\n"
  customerPaymentMethodGetUpdateUrl(
    """The payment method to be updated."""
    customerPaymentMethodId: ID!
  ): CustomerPaymentMethodGetUpdateUrlPayload

  """Creates a PayPal billing agreement for a customer."""
  customerPaymentMethodPaypalBillingAgreementCreate(
    """The billing address."""
    billingAddress: MailingAddressInput

    """
    The billing agreement ID from PayPal that starts with 'B-' (for example, `B-1234XXXXX`).
    """
    billingAgreementId: String!

    """The ID of the customer."""
    customerId: ID!

    """Whether the PayPal billing agreement is inactive."""
    inactive: Boolean = false
  ): CustomerPaymentMethodPaypalBillingAgreementCreatePayload

  """Updates a PayPal billing agreement for a customer."""
  customerPaymentMethodPaypalBillingAgreementUpdate(
    """The billing address."""
    billingAddress: MailingAddressInput!

    """The ID of the customer payment method."""
    id: ID!
  ): CustomerPaymentMethodPaypalBillingAgreementUpdatePayload

  """Create a payment method from remote gateway identifiers."""
  customerPaymentMethodRemoteCreate(
    """The ID of the customer."""
    customerId: ID!

    """Remote gateway payment method details."""
    remoteReference: CustomerPaymentMethodRemoteInput!
  ): CustomerPaymentMethodRemoteCreatePayload

  """Create a payment method from a credit card stored by Stripe."""
  customerPaymentMethodRemoteCreditCardCreate(
    """The ID of the customer."""
    customerId: ID!

    """The Stripe Customer ID."""
    stripeCustomerId: String!

    """The Stripe Payment Method ID."""
    stripePaymentMethodId: String
  ): CustomerPaymentMethodRemoteCreditCardCreatePayload @deprecated(reason: "Use `customerPaymentMethodRemoteCreate` instead")

  """Revokes a customer's payment method."""
  customerPaymentMethodRevoke(
    """The ID of the customer payment method to be revoked."""
    customerPaymentMethodId: ID!
  ): CustomerPaymentMethodRevokePayload

  """
  Sends a link to the customer so they can update a specific payment method.
  """
  customerPaymentMethodSendUpdateEmail(
    """The payment method to be updated."""
    customerPaymentMethodId: ID!

    """Specifies the payment method update email fields."""
    email: EmailInput
  ): CustomerPaymentMethodSendUpdateEmailPayload

  """Remove tax exemptions from a customer."""
  customerRemoveTaxExemptions(
    """The ID of the customer to update."""
    customerId: ID!

    "The list of tax exemptions to remove for the customer, in the format of an array or a comma-separated list. Example values: `[\"CA_BC_RESELLER_EXEMPTION\", A_STATUS_CARD_EXEMPTION\"]`, `\"CA_BC_RESELLER_EXEMPTION, CA_STATUS_CARD_EXEMPTION\"`.\n"
    taxExemptions: [TaxExemption!]!
  ): CustomerRemoveTaxExemptionsPayload

  """Replace tax exemptions for a customer."""
  customerReplaceTaxExemptions(
    """The ID of the customer to update."""
    customerId: ID!

    "The list of tax exemptions that will replace the current exemptions for a customer. Can be an array or a comma-separated list.\n  Example values: `[\"CA_BC_RESELLER_EXEMPTION\", \"A_STATUS_CARD_EXEMPTION\"]`, `\"CA_BC_RESELLER_EXEMPTION, CA_STATUS_CARD_EXEMPTION\"`.\n"
    taxExemptions: [TaxExemption!]!
  ): CustomerReplaceTaxExemptionsPayload

  "Update a customer's SMS marketing consent information.\n"
  customerSmsMarketingConsentUpdate(
    """
    Specifies the input fields to update a customer's SMS marketing consent information.
    """
    input: CustomerSmsMarketingConsentUpdateInput!
  ): CustomerSmsMarketingConsentUpdatePayload

  """Updates a customer's attributes."""
  customerUpdate(
    """Provides updated fields for the customer."""
    input: CustomerInput!
  ): CustomerUpdatePayload

  """Updates a customer's default address."""
  customerUpdateDefaultAddress(
    """The ID of the customer's new default address."""
    addressId: ID!

    """The ID of the customer whose default address is being updated."""
    customerId: ID!
  ): CustomerUpdateDefaultAddressPayload

  "Creates a delegate access token.\n\nTo learn more about creating delegate access tokens, refer to\n[Delegate OAuth access tokens to subsystems]\n(https://shopify.dev/apps/auth/oauth/delegate-access-tokens).\n"
  delegateAccessTokenCreate(
    """The input fields for creating a delegate access token."""
    input: DelegateAccessTokenInput!
  ): DelegateAccessTokenCreatePayload

  """Create a delivery profile."""
  deliveryProfileCreate(
    """Specifies the input fields for a delivery profile."""
    profile: DeliveryProfileInput!
  ): deliveryProfileCreatePayload

  """Enqueue the removal of a delivery profile."""
  deliveryProfileRemove(
    """The ID of the delivery profile to remove."""
    id: ID!
  ): deliveryProfileRemovePayload

  """Update a delivery profile."""
  deliveryProfileUpdate(
    """The ID of the delivery profile to update."""
    id: ID!

    """Whether this delivery profile should leave legacy mode."""
    leaveLegacyModeProfiles: Boolean

    """Specifies the input fields for a delivery profile."""
    profile: DeliveryProfileInput!
  ): deliveryProfileUpdatePayload

  """Set the delivery settings for a shop."""
  deliverySettingUpdate(
    """Specifies the input fields for the delivery shop level settings."""
    setting: DeliverySettingInput!
  ): DeliverySettingUpdatePayload

  "Assigns a location as the shipping origin while using legacy compatibility mode for multi-location delivery profiles.\n"
  deliveryShippingOriginAssign(
    """The ID of the location to assign as the shipping origin."""
    locationId: ID!
  ): DeliveryShippingOriginAssignPayload

  """Activates an automatic discount."""
  discountAutomaticActivate(
    """The ID of the automatic discount to activate."""
    id: ID!
  ): DiscountAutomaticActivatePayload

  """Creates an app discount."""
  discountAutomaticAppCreate(
    """The input data used to create the app discount."""
    automaticAppDiscount: DiscountAutomaticAppInput!
  ): DiscountAutomaticAppCreatePayload

  """Updates an automatic app discount."""
  discountAutomaticAppUpdate(
    """The input fields required to update the automatic app discount."""
    automaticAppDiscount: DiscountAutomaticAppInput!

    """The ID of the automatic app discount to update."""
    id: ID!
  ): DiscountAutomaticAppUpdatePayload

  """Creates a basic automatic discount."""
  discountAutomaticBasicCreate(
    """The input data used to create the automatic discount."""
    automaticBasicDiscount: DiscountAutomaticBasicInput!
  ): DiscountAutomaticBasicCreatePayload

  """Updates a basic automatic discount."""
  discountAutomaticBasicUpdate(
    """The input data used to update the automatic discount."""
    automaticBasicDiscount: DiscountAutomaticBasicInput!

    """The ID of the automatic discount to update."""
    id: ID!
  ): DiscountAutomaticBasicUpdatePayload

  "Asynchronously delete automatic discounts in bulk if a `search` or `saved_search_id` argument is provided or if a\nmaximum discount threshold is reached (1,000). Otherwise, deletions will occur inline.\n**Warning:** All automatic discounts will be deleted if a blank `search` argument is provided.\n"
  discountAutomaticBulkDelete(
    """The IDs of the automatic discounts to delete."""
    ids: [ID!]

    """
    The ID of the saved search to use for filtering automatic discounts to delete.
    """
    savedSearchId: ID

    "The search query for filtering automatic discounts to delete.\n\nFor more information on the list of supported fields and search syntax, refer to the [AutomaticDiscountNodes query section](https://shopify.dev/api/admin-graphql/latest/queries/automaticDiscountNodes#argument-automaticdiscountnodes-query).\n"
    search: String
  ): DiscountAutomaticBulkDeletePayload

  """Creates a BXGY automatic discount."""
  discountAutomaticBxgyCreate(
    """The input data used to create the automatic discount."""
    automaticBxgyDiscount: DiscountAutomaticBxgyInput!
  ): DiscountAutomaticBxgyCreatePayload

  """Updates a BXGY automatic discount using its ID and input."""
  discountAutomaticBxgyUpdate(
    """The input data used to update the automatic discount."""
    automaticBxgyDiscount: DiscountAutomaticBxgyInput!

    """The ID of the automatic discount to update."""
    id: ID!
  ): DiscountAutomaticBxgyUpdatePayload

  """Deactivates an automatic discount."""
  discountAutomaticDeactivate(
    """The ID of the automatic discount to deactivate."""
    id: ID!
  ): DiscountAutomaticDeactivatePayload

  """Deletes an automatic discount."""
  discountAutomaticDelete(
    """The ID of the automatic discount to delete."""
    id: ID!
  ): DiscountAutomaticDeletePayload

  """Activates a code discount."""
  discountCodeActivate(
    """The ID of the code discount to activate."""
    id: ID!
  ): DiscountCodeActivatePayload

  """Creates a code app discount."""
  discountCodeAppCreate(
    """The input data used to create the app discount."""
    codeAppDiscount: DiscountCodeAppInput!
  ): DiscountCodeAppCreatePayload

  """Updates a code app discount."""
  discountCodeAppUpdate(
    """The input fields required to update the code app discount."""
    codeAppDiscount: DiscountCodeAppInput!

    """The ID of the code app discount to update."""
    id: ID!
  ): DiscountCodeAppUpdatePayload

  """Creates a basic code discount."""
  discountCodeBasicCreate(
    """The input data used to create the code discount."""
    basicCodeDiscount: DiscountCodeBasicInput!
  ): DiscountCodeBasicCreatePayload

  """Updates a basic code discount."""
  discountCodeBasicUpdate(
    """The input data used to update the code discount."""
    basicCodeDiscount: DiscountCodeBasicInput!

    """The ID of the code discount to update."""
    id: ID!
  ): DiscountCodeBasicUpdatePayload

  "Asynchronously activate code discounts in bulk using a search query, a saved search ID, or a list of code discount IDs.\n"
  discountCodeBulkActivate(
    """The IDs of the code discounts to activate."""
    ids: [ID!]

    """The ID of the saved search."""
    savedSearchId: ID

    "The search query for filtering code discounts.\n\nFor more information on the list of supported fields and search syntax, refer to the [CodeDiscountNodes query section](https://shopify.dev/api/admin-graphql/latest/queries/codeDiscountNodes#argument-codediscountnodes-query).\n"
    search: String
  ): DiscountCodeBulkActivatePayload

  "Asynchronously deactivate code discounts in bulk using a search query, a saved search ID, or a list of code discount IDs.\n"
  discountCodeBulkDeactivate(
    """The IDs of the code discounts to deactivate."""
    ids: [ID!]

    """The ID of the saved search."""
    savedSearchId: ID

    "The search query for filtering code discounts.\n\nFor more information on the list of supported fields and search syntax, refer to the [CodeDiscountNodes query section](https://shopify.dev/api/admin-graphql/latest/queries/codeDiscountNodes#argument-codediscountnodes-query).\n"
    search: String
  ): DiscountCodeBulkDeactivatePayload

  "Asynchronously delete code discounts in bulk using a search query, a saved search ID, or a list of code discount IDs.\n"
  discountCodeBulkDelete(
    """The IDs of the code discounts to delete."""
    ids: [ID!]

    """
    The ID of the saved search to use for filtering code discounts to delete.
    """
    savedSearchId: ID

    "The search query for filtering code discounts to delete.\n\nFor more information on the list of supported fields and search syntax, refer to the [CodeDiscountNodes query section](https://shopify.dev/api/admin-graphql/latest/queries/codeDiscountNodes#argument-codediscountnodes-query).\n"
    search: String
  ): DiscountCodeBulkDeletePayload

  """Creates a BXGY code discount."""
  discountCodeBxgyCreate(
    """The input data used to create the code discount."""
    bxgyCodeDiscount: DiscountCodeBxgyInput!
  ): DiscountCodeBxgyCreatePayload

  """Updates a BXGY code discount."""
  discountCodeBxgyUpdate(
    """The input data used to update the code discount."""
    bxgyCodeDiscount: DiscountCodeBxgyInput!

    """The ID of the code discount to update."""
    id: ID!
  ): DiscountCodeBxgyUpdatePayload

  """Deactivates a code discount."""
  discountCodeDeactivate(
    """The ID of the code discount to deactivate."""
    id: ID!
  ): DiscountCodeDeactivatePayload

  """Deletes a code discount."""
  discountCodeDelete(
    """The ID of the code discount to delete."""
    id: ID!
  ): DiscountCodeDeletePayload

  """Creates a free shipping code discount."""
  discountCodeFreeShippingCreate(
    """The input data used to create the code discount."""
    freeShippingCodeDiscount: DiscountCodeFreeShippingInput!
  ): DiscountCodeFreeShippingCreatePayload

  """Updates a free shipping code discount."""
  discountCodeFreeShippingUpdate(
    """The input data used to update the code discount."""
    freeShippingCodeDiscount: DiscountCodeFreeShippingInput!

    """The ID of the code discount to update."""
    id: ID!
  ): DiscountCodeFreeShippingUpdatePayload

  "Asynchronously delete discount redeem codes in bulk. Specify the redeem codes to delete by providing a\nsearch query, a saved search ID, or a list of redeem code IDs.\n"
  discountCodeRedeemCodeBulkDelete(
    """The ID of the redeem code's discount."""
    discountId: ID!

    """The IDs of the discount redeem codes to delete."""
    ids: [ID!]

    """The ID of the saved search."""
    savedSearchId: ID

    """The search query for filtering discount redeem codes."""
    search: String
  ): DiscountCodeRedeemCodeBulkDeletePayload

  "Asynchronously add discount redeem codes in bulk. Specify the codes to add\nand the discount code ID that the codes will belong to.\n"
  discountRedeemCodeBulkAdd(
    """
    The list of codes that will be added to the code discount. Maximum 100 codes permitted.
    """
    codes: [DiscountRedeemCodeInput!]!

    """The ID of the code discount that the codes will be added to."""
    discountId: ID!
  ): DiscountRedeemCodeBulkAddPayload

  """Updates a dispute evidence."""
  disputeEvidenceUpdate(
    """The ID of the dispute evidence to be updated."""
    id: ID!

    """The updated properties for a dispute evidence."""
    input: ShopifyPaymentsDisputeEvidenceUpdateInput!
  ): DisputeEvidenceUpdatePayload

  "Calculates the properties of a draft order. Useful for determining information\nsuch as total taxes or price without actually creating a draft order.\n"
  draftOrderCalculate(
    """The fields for the draft order."""
    input: DraftOrderInput!
  ): DraftOrderCalculatePayload

  """Completes a draft order and creates an order."""
  draftOrderComplete(
    """Specifies the draft order to complete."""
    id: ID!

    """Specifies whether the payment is pending or not."""
    paymentPending: Boolean = false

    """
    Specifies a channel definition handle used for sales channel attribution.
    """
    sourceName: String
  ): DraftOrderCompletePayload

  """Creates a draft order."""
  draftOrderCreate(
    """The fields used to create the draft order."""
    input: DraftOrderInput!
  ): DraftOrderCreatePayload

  """Deletes a draft order."""
  draftOrderDelete(
    """Specify the draft order to delete by its ID."""
    input: DraftOrderDeleteInput!
  ): DraftOrderDeletePayload

  """Previews a draft order invoice email."""
  draftOrderInvoicePreview(
    """Specifies the draft order invoice email fields."""
    email: EmailInput

    """Specifies the draft order invoice email to preview."""
    id: ID!
  ): DraftOrderInvoicePreviewPayload

  """Sends an email invoice for a draft order."""
  draftOrderInvoiceSend(
    """Specifies the draft order invoice email fields."""
    email: EmailInput

    """Specifies the draft order to send the invoice for."""
    id: ID!
  ): DraftOrderInvoiceSendPayload

  """Updates a draft order."""
  draftOrderUpdate(
    """Specifies the draft order to update."""
    id: ID!

    """The draft order properties to update."""
    input: DraftOrderInput!
  ): DraftOrderUpdatePayload

  "Creates a new Amazon EventBridge webhook subscription.\n"
  eventBridgeWebhookSubscriptionCreate(
    """The type of event that triggers the webhook."""
    topic: WebhookSubscriptionTopic!

    """Specifies the input fields for an EventBridge webhook subscription."""
    webhookSubscription: EventBridgeWebhookSubscriptionInput!
  ): EventBridgeWebhookSubscriptionCreatePayload

  "Updates an Amazon EventBridge webhook subscription.\n"
  eventBridgeWebhookSubscriptionUpdate(
    """The ID of the webhook subscription to update."""
    id: ID!

    """Specifies the input fields for an EventBridge webhook subscription."""
    webhookSubscription: EventBridgeWebhookSubscriptionInput!
  ): EventBridgeWebhookSubscriptionUpdatePayload

  "Creates file assets using an external URL or for files that were previously uploaded using the\n[stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).\nThese files are added to the [Files page](https://shopify.com/admin/settings/files) in Shopify admin.\n"
  fileCreate(
    """List of new files to be created."""
    files: [FileCreateInput!]!
  ): FileCreatePayload

  """Deletes existing file assets that were uploaded to Shopify."""
  fileDelete(
    """The IDs of the files to be deleted."""
    fileIds: [ID!]!
  ): FileDeletePayload

  """Updates an existing file asset that was uploaded to Shopify."""
  fileUpdate(
    """List of files to be updated."""
    files: [FileUpdateInput!]!
  ): FileUpdatePayload

  """
  Triggers a workflow defined by the merchant in Shopify Flow. To learn more, see [_Create Shopify Flow triggers_](https://shopify.dev/apps/flow/triggers).
  """
  flowTriggerReceive(
    """The payload needed to run the Trigger."""
    body: String!
  ): FlowTriggerReceivePayload

  """Cancels a fulfillment."""
  fulfillmentCancel(
    """The ID of the fulfillment to be canceled."""
    id: ID!
  ): FulfillmentCancelPayload

  "Creates a fulfillment for one or many fulfillment orders.\nThe fulfillment orders are associated with the same order and are assigned to the same location.\n"
  fulfillmentCreateV2(
    """The input fields used to create a fulfillment from fulfillment orders."""
    fulfillment: FulfillmentV2Input!

    """An optional message for the fulfillment request."""
    message: String
  ): FulfillmentCreateV2Payload

  """
  Accept a cancellation request sent to a fulfillment service for a fulfillment order.
  """
  fulfillmentOrderAcceptCancellationRequest(
    """
    The ID of the fulfillment order associated with the cancellation request.
    """
    id: ID!

    """An optional reason for accepting the cancellation request."""
    message: String
  ): FulfillmentOrderAcceptCancellationRequestPayload

  """
  Accepts a fulfillment request sent to a fulfillment service for a fulfillment order.
  """
  fulfillmentOrderAcceptFulfillmentRequest(
    """
    The ID of the fulfillment order associated with the fulfillment request.
    """
    id: ID!

    """An optional reason for accepting the fulfillment request."""
    message: String
  ): FulfillmentOrderAcceptFulfillmentRequestPayload

  """Marks a fulfillment order as canceled."""
  fulfillmentOrderCancel(
    """The ID of the fulfillment order to mark as canceled."""
    id: ID!
  ): FulfillmentOrderCancelPayload

  """
  Marks an in-progress fulfillment order as incomplete, indicating the fulfillment service is unable to ship any remaining items and intends to close the fulfillment order.
  """
  fulfillmentOrderClose(
    """The ID of the fulfillment order to mark as incomplete."""
    id: ID!

    """An optional reason for marking the fulfillment order as incomplete."""
    message: String
  ): FulfillmentOrderClosePayload

  """Applies a fulfillment hold on an open fulfillment order."""
  fulfillmentOrderHold(
    """The details of the fulfillment hold applied on the fulfillment order."""
    fulfillmentHold: FulfillmentOrderHoldInput!

    """
    The ID of the fulfillment order on which a fulfillment hold is applied.
    """
    id: ID!
  ): FulfillmentOrderHoldPayload

  """Moves a fulfillment order to a new location."""
  fulfillmentOrderMove(
    """The ID of the fulfillment order to be moved."""
    id: ID!

    """The ID of the location where the fulfillment order will be moved."""
    newLocationId: ID!
  ): FulfillmentOrderMovePayload

  """Marks a scheduled fulfillment order as open."""
  fulfillmentOrderOpen(
    """The ID of the fulfillment order to mark as open."""
    id: ID!
  ): FulfillmentOrderOpenPayload

  """
  Rejects a cancellation request sent to a fulfillment service for a fulfillment order.
  """
  fulfillmentOrderRejectCancellationRequest(
    """
    The ID of the fulfillment order associated with the cancellation request.
    """
    id: ID!

    """An optional reason for rejecting the cancellation request."""
    message: String
  ): FulfillmentOrderRejectCancellationRequestPayload

  """
  Rejects a fulfillment request sent to a fulfillment service for a fulfillment order.
  """
  fulfillmentOrderRejectFulfillmentRequest(
    """
    The ID of the fulfillment order associated with the fulfillment request.
    """
    id: ID!

    """A list of rejected line items."""
    lineItems: [IncomingRequestLineItemInput!]

    """An optional reason for rejecting the fulfillment request."""
    message: String

    """The reason for the fulfillment order rejection."""
    reason: FulfillmentOrderRejectionReason
  ): FulfillmentOrderRejectFulfillmentRequestPayload

  """Releases the fulfillment hold on a fulfillment order."""
  fulfillmentOrderReleaseHold(
    """
    The ID of the fulfillment order for which to release the fulfillment hold.
    """
    id: ID!
  ): FulfillmentOrderReleaseHoldPayload

  """Reschedules a scheduled fulfillment order."""
  fulfillmentOrderReschedule(
    """The new fulfill at date of the fulfillment order."""
    fulfillAt: DateTime!

    """The ID of the fulfillment order to reschedule."""
    id: ID!
  ): FulfillmentOrderReschedulePayload

  """
  Sends a cancellation request to the fulfillment service of a fulfillment order.
  """
  fulfillmentOrderSubmitCancellationRequest(
    """
    The ID of the fulfillment order associated with the cancellation request.
    """
    id: ID!

    """An optional reason for the cancellation request."""
    message: String
  ): FulfillmentOrderSubmitCancellationRequestPayload

  """
  Sends a fulfillment request to the fulfillment service of a fulfillment order.
  """
  fulfillmentOrderSubmitFulfillmentRequest(
    "The fulfillment order line items to be requested for fulfillment.\nIf left blank, all line items of the fulfillment order are requested for fulfillment.\n"
    fulfillmentOrderLineItems: [FulfillmentOrderLineItemInput!]

    """The ID of the fulfillment order associated with fulfillment request."""
    id: ID!

    """An optional message for the fulfillment request."""
    message: String

    "Whether the customer should be notified when fulfillments are created for this fulfillment order.\n"
    notifyCustomer: Boolean

    """
    A reference to the [ShippingMethod](https://shopify.dev/api/admin-graphql/latest/objects/shippingmethod) code, such as `FREE_SHIPPING`.
    """
    shippingMethod: String
  ): FulfillmentOrderSubmitFulfillmentRequestPayload

  """
  Sets the latest date and time by which the fulfillment orders need to be fulfilled.
  """
  fulfillmentOrdersSetFulfillmentDeadline(
    """The new fulfillment deadline of the fulfillment orders."""
    fulfillmentDeadline: DateTime!

    """The IDs of the fulfillment orders for which the deadline is being set."""
    fulfillmentOrderIds: [ID!]!
  ): FulfillmentOrdersSetFulfillmentDeadlinePayload

  """Creates a fulfillment service."""
  fulfillmentServiceCreate(
    """The URL to send requests for the fulfillment service."""
    callbackUrl: URL

    "Whether the fulfillment service will use the new fulfillment request flow based on fulfillment orders.\n"
    fulfillmentOrdersOptIn: Boolean = false

    "Whether the fulfillment service manages product inventory and provides updates to Shopify.\n"
    inventoryManagement: Boolean = false

    """The name of the fulfillment service."""
    name: String!

    """
    Whether the fulfillment service can stock inventory alongside other locations.
    """
    permitsSkuSharing: Boolean = false

    "Whether the fulfillment service provides tracking numbers for packages.\n"
    trackingSupport: Boolean = false
  ): FulfillmentServiceCreatePayload

  """Deletes a fulfillment service."""
  fulfillmentServiceDelete(
    "The ID of the location where inventory and commitments will be relocated\nafter the fulfillment service is deleted.\n"
    destinationLocationId: ID

    """The ID of the fulfillment service to delete."""
    id: ID!
  ): FulfillmentServiceDeletePayload

  """Updates a fulfillment service."""
  fulfillmentServiceUpdate(
    """The URL to send requests for the fulfillment service."""
    callbackUrl: URL

    "Whether the fulfillment service will use the new fulfillment request flow based on fulfillment orders.\n"
    fulfillmentOrdersOptIn: Boolean

    """The id of the fulfillment service."""
    id: ID!

    """The name of the fulfillment service."""
    name: String

    """
    Whether the fulfillment service can stock inventory alongside other locations.
    """
    permitsSkuSharing: Boolean

    "Whether the fulfillment service provides tracking numbers for packages.\n"
    trackingSupport: Boolean
  ): FulfillmentServiceUpdatePayload

  """Updates tracking information for a fulfillment."""
  fulfillmentTrackingInfoUpdateV2(
    """The ID of the fulfillment."""
    fulfillmentId: ID!

    "Whether the customer will be notified of this update and future updates for the fulfillment.\nIf this field is left blank, then notifications won't be sent to the customer when the fulfillment is updated.\n"
    notifyCustomer: Boolean

    """
    The tracking input for the mutation, including tracking URL, number, and company.
    """
    trackingInfoInput: FulfillmentTrackingInput!
  ): FulfillmentTrackingInfoUpdateV2Payload

  """Create a gift card."""
  giftCardCreate(
    """The input fields to create a gift card."""
    input: GiftCardCreateInput!
  ): GiftCardCreatePayload

  "Disable a gift card. A disabled gift card cannot be used by a customer. A disabled gift card cannot be re-enabled.\n"
  giftCardDisable(
    """The ID of the gift card to disable."""
    id: ID!
  ): GiftCardDisablePayload

  """Update a gift card."""
  giftCardUpdate(
    """The ID of the gift card to be updated."""
    id: ID!

    """The input fields to update the gift card."""
    input: GiftCardUpdateInput!
  ): GiftCardUpdatePayload

  """Activate an inventory item at a location."""
  inventoryActivate(
    """
    The initial available quantity of the inventory item being activated at the location.
    """
    available: Int

    """The ID of the inventory item to activate."""
    inventoryItemId: ID!

    """The ID of the location of the inventory item being activated."""
    locationId: ID!
  ): InventoryActivatePayload

  """Adjusts the inventory by a certain quantity."""
  inventoryAdjustQuantity(
    """Provides the input fields required to update an inventory level."""
    input: InventoryAdjustQuantityInput!
  ): InventoryAdjustQuantityPayload

  """Adjusts the inventory at a location for multiple inventory items."""
  inventoryBulkAdjustQuantityAtLocation(
    """Specifies adjustments for items."""
    inventoryItemAdjustments: [InventoryAdjustItemInput!]!

    """Specifies where the item should be adjusted."""
    locationId: ID!
  ): InventoryBulkAdjustQuantityAtLocationPayload

  """Stop tracking an inventory item's quantities at a location."""
  inventoryDeactivate(
    """The ID of the inventory level to deactivate."""
    inventoryLevelId: ID!
  ): InventoryDeactivatePayload

  """Updates an inventory item."""
  inventoryItemUpdate(
    """The ID of the inventory item to update."""
    id: ID!

    """
    The input fields that update an [`inventoryItem`](https://shopify.dev/api/admin-graphql/latest/queries/inventoryitem).
    """
    input: InventoryItemUpdateInput!
  ): InventoryItemUpdatePayload

  """Creates a new market."""
  marketCreate(
    """The properties of the new market."""
    input: MarketCreateInput!
  ): MarketCreatePayload

  """Updates currency settings of a market."""
  marketCurrencySettingsUpdate(
    """Properties to update for the market currency settings."""
    input: MarketCurrencySettingsUpdateInput!

    """The ID of the market definition to target."""
    marketId: ID!
  ): MarketCurrencySettingsUpdatePayload

  """Deletes a market definition."""
  marketDelete(
    """The ID of the market to delete."""
    id: ID!
  ): MarketDeletePayload

  """Deletes a market region."""
  marketRegionDelete(
    """The ID of the market region to delete."""
    id: ID!
  ): MarketRegionDeletePayload

  """Creates regions that belong to an existing market."""
  marketRegionsCreate(
    """The ID of the market to add the regions to."""
    marketId: ID!

    "The regions to be created.\n"
    regions: [MarketRegionCreateInput!]!
  ): MarketRegionsCreatePayload

  """Updates the properties of a market."""
  marketUpdate(
    """The ID of the market to update."""
    id: ID!

    """The properties to update."""
    input: MarketUpdateInput!
  ): MarketUpdatePayload

  """Creates a web presence for a market."""
  marketWebPresenceCreate(
    """The ID of the market for which to create a web presence."""
    marketId: ID!

    "The details of the web presence to be created.\n"
    webPresence: MarketWebPresenceCreateInput!
  ): MarketWebPresenceCreatePayload

  """Deletes a market web presence."""
  marketWebPresenceDelete(
    """The ID of the market for which to delete the web presence."""
    marketId: ID!
  ): MarketWebPresenceDeletePayload

  """Updates a market web presence."""
  marketWebPresenceUpdate(
    """The ID of the market for which to update the web presence."""
    marketId: ID!

    "The web_presence fields used to update the market's web presence.\n"
    webPresence: MarketWebPresenceUpdateInput!
  ): MarketWebPresenceUpdatePayload

  """Create new marketing activity."""
  marketingActivityCreate(
    """The Input of marketing activity create."""
    input: MarketingActivityCreateInput!
  ): MarketingActivityCreatePayload

  """Updates a marketing activity with the latest information."""
  marketingActivityUpdate(
    """The Input of the marketing activity."""
    input: MarketingActivityUpdateInput!
  ): MarketingActivityUpdatePayload

  """Creates a new marketing event engagement for a marketing activity."""
  marketingEngagementCreate(
    """The ID of the marketing activity."""
    marketingActivityId: ID!

    """The marketing engagement's attributes."""
    marketingEngagement: MarketingEngagementInput!
  ): MarketingEngagementCreatePayload

  "Creates a metafield definition.\n"
  metafieldDefinitionCreate(
    """Specifies the input fields for a metafield definition."""
    definition: MetafieldDefinitionInput!
  ): MetafieldDefinitionCreatePayload

  "Delete a metafield definition.\nOptionally deletes all associated metafields asynchronously when specified.\n"
  metafieldDefinitionDelete(
    """Whether to delete all associated metafields."""
    deleteAllAssociatedMetafields: Boolean = false

    """The id of the metafield definition to delete."""
    id: ID!
  ): MetafieldDefinitionDeletePayload

  "You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.\nThe order of your pinned metafield definitions determines the order in which your metafields are displayed\non the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.\n"
  metafieldDefinitionPin(
    """The ID of the metafield definition to pin."""
    definitionId: ID!
  ): MetafieldDefinitionPinPayload

  "You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.\nThe order of your pinned metafield definitions determines the order in which your metafields are displayed\non the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.\n"
  metafieldDefinitionUnpin(
    """The ID of the metafield definition to unpin."""
    definitionId: ID!
  ): MetafieldDefinitionUnpinPayload

  "Updates a metafield definition.\n"
  metafieldDefinitionUpdate(
    """The input fields for the metafield definition update."""
    definition: MetafieldDefinitionUpdateInput!
  ): MetafieldDefinitionUpdatePayload

  """Deletes a metafield."""
  metafieldDelete(input: MetafieldDeleteInput!): MetafieldDeletePayload

  "Creates a `MetafieldStorefrontVisibility` record to make all metafields that belong to the specified resource\nand have the established `namespace` and `key` combination visible in the Storefront API.\n"
  metafieldStorefrontVisibilityCreate(
    """
    Specifies the input fields for a `MetafieldStorefrontVisibility` record.
    """
    input: MetafieldStorefrontVisibilityInput!
  ): MetafieldStorefrontVisibilityCreatePayload

  "Deletes a `MetafieldStorefrontVisibility` record. All metafields that belongs to the specified record will no\nlonger be visible in the Storefront API.\n"
  metafieldStorefrontVisibilityDelete(
    """The ID of the `MetafieldStorefrontVisibility` record to delete."""
    id: ID!
  ): MetafieldStorefrontVisibilityDeletePayload

  "Sets metafield values. Metafield values will be set regardless if they were previously created or not.\n\nAllows a maximum of 25 metafields to be set at a time.\n"
  metafieldsSet(
    """The list of metafield values to set. Maximum of 25."""
    metafields: [MetafieldsSetInput!]!
  ): MetafieldsSetPayload

  """
  Captures payment for an authorized transaction on an order. An order can only be captured if it has a successful authorization transaction. Capturing an order will claim the money reserved by the authorization.
  """
  orderCapture(
    """The input for the mutation."""
    input: OrderCaptureInput!
  ): OrderCapturePayload

  "Closes an open order.\n"
  orderClose(
    """The input for the mutation."""
    input: OrderCloseInput!
  ): OrderClosePayload

  """Creates a payment for an order by mandate."""
  orderCreateMandatePayment(
    """
    Whether the payment should be authorized or captured. If `false`, then the authorization of
                the payment is triggered.
    """
    autoCapture: Boolean = true

    """The ID of the order to collect the balance for."""
    id: ID!

    """A unique key to identify the payment request."""
    idempotencyKey: String!

    """The mandate ID used for payment."""
    mandateId: ID!

    """The ID of the payment schedule to collect the balance for."""
    paymentScheduleId: ID
  ): OrderCreateMandatePaymentPayload

  """
  Adds a custom line item to an existing order. For example, you could add a gift wrapping service as a [custom line item](https://shopify.dev/api/examples/order-editing#add-a-custom-line-item). To learn how to edit existing orders, refer to [Edit an existing order with Admin API](https://shopify.dev/api/examples/order-editing).
  """
  orderEditAddCustomItem(
    "The ID of the [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)\nto which the custom item is added.\n"
    id: ID!

    "The ID of the retail [location](https://shopify.dev/api/admin-graphql/latest/objects/location)\n(if applicable) from which the custom item is sold. Used for tax calculations. A default location will be chosen automatically if none is provided.\n"
    locationId: ID

    """The unit price of the custom item. This value can't be negative."""
    price: MoneyInput!

    """The quantity of the custom item. This value must be greater than zero."""
    quantity: Int!

    """Whether the custom item requires shipping. Defaults to `false`."""
    requiresShipping: Boolean

    """Whether the custom item is taxable. Defaults to `true`."""
    taxable: Boolean

    """The name of the custom item to add."""
    title: String!
  ): OrderEditAddCustomItemPayload

  """
  Adds a discount to a newly added line item on the current order edit. More information on how to use the GraphQL Admin API to edit an existing order can be found in [this guide](https://shopify.dev/api/examples/order-editing).
  """
  orderEditAddLineItemDiscount(
    """The discount to add to the line item."""
    discount: OrderEditAppliedDiscountInput!

    """The ID of the calculated order to update."""
    id: ID!

    """The ID of a newly added calculated line item to add the discount to."""
    lineItemId: ID!
  ): OrderEditAddLineItemDiscountPayload

  """Adds a line item from an existing product variant."""
  orderEditAddVariant(
    """
    Whether this mutation can create a line item for a variant that's already on the calculated order.
    """
    allowDuplicates: Boolean = false

    "The ID of the [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)\nto edit.\n"
    id: ID!

    "The ID of the [location](https://shopify.dev/api/admin-graphql/latest/objects/location)\nto check for inventory availability. A default location ID is chosen automatically if none is provided.\n"
    locationId: ID

    """
    The quantity of the item to add to the order. Must be a positive value.
    """
    quantity: Int!

    """The ID of the variant to add."""
    variantId: ID!
  ): OrderEditAddVariantPayload

  "Starts editing an order. Mutations are operating on `OrderEdit`.\nAll order edits start with `orderEditBegin`, have any number of `orderEdit`* mutations made, and end with `orderEditCommit`.\n"
  orderEditBegin(
    """The ID of the order to begin editing."""
    id: ID!
  ): OrderEditBeginPayload

  "Applies and saves staged changes to an order. Mutations are operating on `OrderEdit`.\nAll order edits start with `orderEditBegin`, have any number of `orderEdit`* mutations made, and end with `orderEditCommit`.\n"
  orderEditCommit(
    """
    The ID of the calculated order that will have its changes applied to the order.
    """
    id: ID!

    """Whether to notify the customer or not."""
    notifyCustomer: Boolean

    """Note for staff members."""
    staffNote: String
  ): OrderEditCommitPayload

  """
  Removes a line item discount that was applied as part of an order edit.
  """
  orderEditRemoveLineItemDiscount(
    "The ID of the [calculated discount application](https://shopify.dev/api/admin-graphql/latest/interfaces/calculateddiscountapplication)\nto remove.\n"
    discountApplicationId: ID!

    "The ID of the [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)\nfrom which to remove the discount.\n"
    id: ID!
  ): OrderEditRemoveLineItemDiscountPayload

  """
  Sets the quantity of a line item on an order that is being edited. More information on how to use the GraphQL Admin API to edit an existing order can be found in [this guide](https://shopify.dev/api/examples/order-editing).
  """
  orderEditSetQuantity(
    """
    The ID of the calculated order to edit. The edit changes the quantity on the line item.
    """
    id: ID!

    """The ID of the line item to edit."""
    lineItemId: ID!

    """
    The new quantity to set for the line item. This value cannot be negative.
    """
    quantity: Int!

    "Whether or not to restock the line item when the updated quantity is less than the original quantity.\n"
    restock: Boolean
  ): OrderEditSetQuantityPayload

  """Sends an email invoice for an order."""
  orderInvoiceSend(
    """The email input fields for the order invoice."""
    email: EmailInput

    """The order associated with the invoice."""
    id: ID!
  ): OrderInvoiceSendPayload

  "Marks an order as paid. You can only mark an order as paid if it isn't already fully paid.\n"
  orderMarkAsPaid(
    """The input for the mutation."""
    input: OrderMarkAsPaidInput!
  ): OrderMarkAsPaidPayload

  "Opens a closed order.\n"
  orderOpen(
    """The input for the mutation."""
    input: OrderOpenInput!
  ): OrderOpenPayload

  """Updates the fields of an order."""
  orderUpdate(
    """The input for the mutation."""
    input: OrderInput!
  ): OrderUpdatePayload

  """
  Create payment terms on an order. To create payment terms on a draft order, use a draft order mutation and include them with the DraftOrderInput.
  """
  paymentTermsCreate(
    """The attributes used to create the payment terms."""
    paymentTermsAttributes: PaymentTermsCreateInput!

    """Specifies the reference orderId to add the payment terms for."""
    referenceId: ID!
  ): PaymentTermsCreatePayload

  """Delete payment terms."""
  paymentTermsDelete(
    """The input fields used to delete the payment terms."""
    input: PaymentTermsDeleteInput!
  ): PaymentTermsDeletePayload

  """
  Update payment terms on an order. To update payment terms on a draft order, use a draft order mutation and include them with the DraftOrderInput.
  """
  paymentTermsUpdate(
    """The input fields used to update the payment terms."""
    input: PaymentTermsUpdateInput!
  ): PaymentTermsUpdatePayload

  """
  Creates a price list. You can use the `priceListCreate` mutation to create a new price list for a country. This enables you to sell your products with international pricing.
  """
  priceListCreate(
    """The properties of the new price list."""
    input: PriceListCreateInput!
  ): PriceListCreatePayload

  """
  Deletes a price list. For example, you can delete a price list so that it no longer applies for products in the associated market.
  """
  priceListDelete(
    """The ID of the price list to be deleted."""
    id: ID!
  ): PriceListDeletePayload

  """
  Creates or updates fixed prices on a price list. You can use the `priceListFixedPricesAdd` mutation to set a fixed price for specific product variants. This lets you change product variant pricing on a per country basis. Any existing fixed price list prices for these variants will be overwritten.
  """
  priceListFixedPricesAdd(
    """
    The ID of the price list to which the fixed prices will be added or updated.
    """
    priceListId: ID!

    """The list of fixed prices to add or update in the price list."""
    prices: [PriceListPriceInput!]!
  ): PriceListFixedPricesAddPayload

  """
  Deletes specific fixed prices from a price list using a product variant ID. You can use the `priceListFixedPricesDelete` mutation to delete a set of fixed prices from a price list. After deleting the set of fixed prices from the price list, the price of each product variant reverts to the original price that was determined by the price list adjustment.
  """
  priceListFixedPricesDelete(
    """The ID of the price list from which the fixed prices will be removed."""
    priceListId: ID!

    """
    A list of product variant IDs whose fixed prices will be removed from the price list.
    """
    variantIds: [ID!]!
  ): PriceListFixedPricesDeletePayload

  "Updates a price list.\nIf you modify the currency, then any fixed prices set on the price list will be deleted.\n"
  priceListUpdate(
    """The ID of the price list to update."""
    id: ID!

    """The input data used to update the price list."""
    input: PriceListUpdateInput!
  ): PriceListUpdatePayload

  """Activate a price rule."""
  priceRuleActivate(
    """ID of the price rule to update."""
    id: ID!
  ): PriceRuleActivatePayload

  """Create a price rule using the input."""
  priceRuleCreate(
    """The input fields to create a price rule."""
    priceRule: PriceRuleInput!

    """The input fields to create a discount code for the price rule."""
    priceRuleDiscountCode: PriceRuleDiscountCodeInput
  ): PriceRuleCreatePayload

  """Deactivate a price rule."""
  priceRuleDeactivate(
    """ID of the price rule to update."""
    id: ID!
  ): PriceRuleDeactivatePayload

  """Delete a price rule."""
  priceRuleDelete(
    """The ID of the price rule object."""
    id: ID!
  ): PriceRuleDeletePayload

  """Create a discount code for a price rule."""
  priceRuleDiscountCodeCreate(
    """The code to create for the price rule."""
    code: String!

    """The ID of the price rule object."""
    priceRuleId: ID!
  ): PriceRuleDiscountCodeCreatePayload

  """Update a discount code for a price rule."""
  priceRuleDiscountCodeUpdate(
    """The new code of a price rule."""
    code: String!

    """The ID of the price rule object."""
    priceRuleId: ID!
  ): PriceRuleDiscountCodeUpdatePayload

  """Updates a price rule using its ID and an input."""
  priceRuleUpdate(
    """ID of the price rule to update."""
    id: ID!

    """The input fields to update a price rule."""
    priceRule: PriceRuleInput!

    """The input fields to update the discount code of the price rule."""
    priceRuleDiscountCode: PriceRuleDiscountCodeInput
  ): PriceRuleUpdatePayload

  "Deletes a private metafield.\nPrivate metafields are automatically deleted when the app that created them is uninstalled.\n"
  privateMetafieldDelete(
    """The input fields for the private metafield to delete."""
    input: PrivateMetafieldDeleteInput!
  ): PrivateMetafieldDeletePayload

  "Creates or updates a private metafield. Use private metafields when you don't want the metafield data to be accessible by merchants or other apps.\nPrivate metafields are accessible only by the application that created them and only from the GraphQL Admin API.\n\nAn application can create a maximum of 10 private metafields per shop resource.\n"
  privateMetafieldUpsert(
    """Specifies the input fields for the private metafield."""
    input: PrivateMetafieldInput!
  ): PrivateMetafieldUpsertPayload

  """Appends images to a product."""
  productAppendImages(
    """Specifies the new images and the product that they're being added to."""
    input: ProductAppendImagesInput!
  ): ProductAppendImagesPayload

  """
  Changes the status of a product. This allows you to set the availability of the product across all channels.
  """
  productChangeStatus(
    """The ID of the product."""
    productId: ID!

    """The status to be assigned to the product."""
    status: ProductStatus!
  ): ProductChangeStatusPayload

  """Creates a product."""
  productCreate(
    """The properties of the new product."""
    input: ProductInput!

    """List of new media to be added to the product."""
    media: [CreateMediaInput!]
  ): ProductCreatePayload

  """Creates media for a product."""
  productCreateMedia(
    """List of new media to be added to a product."""
    media: [CreateMediaInput!]!

    """Specifies the product associated to the media."""
    productId: ID!
  ): ProductCreateMediaPayload

  """Deletes a product, including all associated variants and media."""
  productDelete(
    """Specifies the product to delete by its ID."""
    input: ProductDeleteInput!
  ): ProductDeletePayload

  """Removes product images from the product."""
  productDeleteImages(
    """This is the ID of the product."""
    id: ID!

    """This is the array of image IDs to delete from the product."""
    imageIds: [ID!]!
  ): ProductDeleteImagesPayload

  """Deletes media for a product."""
  productDeleteMedia(
    """The media IDs to be deleted."""
    mediaIds: [ID!]!

    """The ID of the product on which to delete media."""
    productId: ID!
  ): ProductDeleteMediaPayload

  """Duplicates a product."""
  productDuplicate(
    """Specifies whether or not to duplicate images."""
    includeImages: Boolean = false

    """
    The new status of the product. If no value is provided the status will be inherited from the original product.
    """
    newStatus: ProductStatus

    """The new title of the product."""
    newTitle: String!

    """The ID of the product to be duplicated."""
    productId: ID!
  ): ProductDuplicatePayload

  """Updates an image of a product."""
  productImageUpdate(
    """Image to be updated."""
    image: ImageInput!

    """The ID of the product on which to update the image."""
    productId: ID!
  ): ProductImageUpdatePayload

  "Adds multiple selling plan groups to a product.\n"
  productJoinSellingPlanGroups(
    """The ID of the product."""
    id: ID!

    """The IDs of the selling plan groups to add."""
    sellingPlanGroupIds: [ID!]!
  ): ProductJoinSellingPlanGroupsPayload

  "Removes multiple groups from a product.\n"
  productLeaveSellingPlanGroups(
    """The ID of the product."""
    id: ID!

    """The IDs of the selling plan groups to add."""
    sellingPlanGroupIds: [ID!]!
  ): ProductLeaveSellingPlanGroupsPayload

  """
  Publishes a product. Products that are sold exclusively on subscription (`requiresSellingPlan: true`) can only be published on online stores.
  """
  productPublish(
    """Specifies the product to publish and the channels to publish it to."""
    input: ProductPublishInput!
  ): ProductPublishPayload @deprecated(reason: "Use `publishablePublish` instead")

  """Asynchronously reorders a set of images for a given product."""
  productReorderImages(
    """The ID of the product on which to reorder images."""
    id: ID!

    """A list of moves to perform which will be evaluated in order."""
    moves: [MoveInput!]!
  ): ProductReorderImagesPayload

  """Asynchronously Reoders the media attached to a product."""
  productReorderMedia(
    """The ID of the product on which to reorder medias."""
    id: ID!

    """A list of moves to perform which will be evaluated in order."""
    moves: [MoveInput!]!
  ): ProductReorderMediaPayload

  """Unpublishes a product."""
  productUnpublish(
    """
    Specifies the product to unpublish and the channel to unpublish it from.
    """
    input: ProductUnpublishInput!
  ): ProductUnpublishPayload @deprecated(reason: "Use `publishableUnpublish` instead")

  "Updates a product. If you update a product, and only include some variants in the update,\nthen any variants not included will be deleted. To safely manage variants without the risk of\ndeleting excluded variants, use\n[productVariantsBulkUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantsbulkupdate).\nIf you want to update a single variant, then use\n[productVariantUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantupdate).\n"
  productUpdate(
    """The updated properties for a product."""
    input: ProductInput!
  ): ProductUpdatePayload

  """Updates media for a product."""
  productUpdateMedia(
    """A list of media updates."""
    media: [UpdateMediaInput!]!

    """Specifies the product to update media on."""
    productId: ID!
  ): ProductUpdateMediaPayload

  """Appends media from a product to variants of the product."""
  productVariantAppendMedia(
    """Specifies the product associated to the media."""
    productId: ID!

    """A list of pairs of variants and media to be attached to the variants."""
    variantMedia: [ProductVariantAppendMediaInput!]!
  ): ProductVariantAppendMediaPayload

  """Creates a product variant."""
  productVariantCreate(
    """The properties for the new product variant."""
    input: ProductVariantInput!
  ): ProductVariantCreatePayload

  """Deletes a product variant."""
  productVariantDelete(
    """ID of the product variant to be deleted."""
    id: ID!
  ): ProductVariantDeletePayload

  """Deletes media from product variants."""
  productVariantDetachMedia(
    """Specifies the product to which the variants and media are associated."""
    productId: ID!

    """A list of pairs of variants and media to be deleted from the variants."""
    variantMedia: [ProductVariantDetachMediaInput!]!
  ): ProductVariantDetachMediaPayload

  "Adds multiple selling plan groups to a product variant.\n"
  productVariantJoinSellingPlanGroups(
    """The ID of the product variant."""
    id: ID!

    """The IDs of the selling plan groups to add."""
    sellingPlanGroupIds: [ID!]!
  ): ProductVariantJoinSellingPlanGroupsPayload

  "Remove multiple groups from a product variant.\n"
  productVariantLeaveSellingPlanGroups(
    """The ID of the product variant."""
    id: ID!

    """The IDs of the selling plan groups to leave."""
    sellingPlanGroupIds: [ID!]!
  ): ProductVariantLeaveSellingPlanGroupsPayload

  """Updates a product variant."""
  productVariantUpdate(
    """The updated properties for the product variant."""
    input: ProductVariantInput!
  ): ProductVariantUpdatePayload

  """Creates product variants in bulk."""
  productVariantsBulkCreate(
    """The ID of the product on which to create the variants."""
    productId: ID!

    """An array of product variants to be created."""
    variants: [ProductVariantsBulkInput!]!
  ): ProductVariantsBulkCreatePayload

  """Deletes product variants in bulk."""
  productVariantsBulkDelete(
    """The ID of the product with the variants to update."""
    productId: ID!

    """An array of product variants IDs to delete."""
    variantsIds: [ID!]!
  ): ProductVariantsBulkDeletePayload

  """Bulk reorder product variants."""
  productVariantsBulkReorder(
    """An array of variant positions."""
    positions: [ProductVariantPositionInput!]!

    """The product ID of the variants to be reordered."""
    productId: ID!
  ): ProductVariantsBulkReorderPayload

  """Updates product variants in bulk."""
  productVariantsBulkUpdate(
    """The ID of the product associated with the variants to update."""
    productId: ID!

    """An array of product variants to update."""
    variants: [ProductVariantsBulkInput!]!
  ): ProductVariantsBulkUpdatePayload

  """Creates a new Google Cloud Pub/Sub webhook subscription."""
  pubSubWebhookSubscriptionCreate(
    """The type of event that triggers the webhook."""
    topic: WebhookSubscriptionTopic!

    """
    Specifies the input fields for a Google Cloud Pub/Sub webhook subscription.
    """
    webhookSubscription: PubSubWebhookSubscriptionInput!
  ): PubSubWebhookSubscriptionCreatePayload

  """Updates a Google Cloud Pub/Sub webhook subscription."""
  pubSubWebhookSubscriptionUpdate(
    """The ID of the webhook subscription to update."""
    id: ID!

    """
    Specifies the input fields for a Google Cloud Pub/Sub webhook subscription.
    """
    webhookSubscription: PubSubWebhookSubscriptionInput
  ): PubSubWebhookSubscriptionUpdatePayload

  """
  Publishes a resource to a channel. If the resource is a product, then it's visible in the channel only if the product status is `active`. Products that are sold exclusively on subscription (`requiresSellingPlan: true`) can be published only on online stores.
  """
  publishablePublish(
    """The resource to create or update publications for."""
    id: ID!

    """Specifies the input fields required to publish a resource."""
    input: [PublicationInput!]!
  ): PublishablePublishPayload

  """
  Publishes a resource to current channel. If the resource is a product, then it's visible in the channel only if the product status is `active`. Products that are sold exclusively on subscription (`requiresSellingPlan: true`) can be published only on online stores.
  """
  publishablePublishToCurrentChannel(
    """The resource to create or update publications for."""
    id: ID!
  ): PublishablePublishToCurrentChannelPayload

  """
  Unpublishes a resource from a channel. If the resource is a product, then it's visible in the channel only if the product status is `active`.
  """
  publishableUnpublish(
    """The resource to delete or update publications for."""
    id: ID!

    """Specifies the input fields required to unpublish a resource."""
    input: [PublicationInput!]!
  ): PublishableUnpublishPayload

  """
  Unpublishes a resource from the current channel. If the resource is a product, then it's visible in the channel only if the product status is `active`.
  """
  publishableUnpublishToCurrentChannel(
    """The resource to delete or update publications for."""
    id: ID!
  ): PublishableUnpublishToCurrentChannelPayload

  """Creates a refund."""
  refundCreate(
    """The input fields that are used in the mutation for creating a refund."""
    input: RefundInput!
  ): RefundCreatePayload

  """Creates a saved search."""
  savedSearchCreate(
    """Specifies the input fields for a saved search."""
    input: SavedSearchCreateInput!
  ): SavedSearchCreatePayload

  """Delete a saved search."""
  savedSearchDelete(
    """The input fields to delete a saved search."""
    input: SavedSearchDeleteInput!
  ): SavedSearchDeletePayload

  """Updates a saved search."""
  savedSearchUpdate(
    """The input fields to update a saved search."""
    input: SavedSearchUpdateInput!
  ): SavedSearchUpdatePayload

  "Creates a new script tag.\n"
  scriptTagCreate(
    """The input fields for a script tag."""
    input: ScriptTagInput!
  ): ScriptTagCreatePayload

  "Deletes a script tag.\n"
  scriptTagDelete(
    """The ID of the script tag to delete."""
    id: ID!
  ): ScriptTagDeletePayload

  "Updates a script tag.\n"
  scriptTagUpdate(
    """The ID of the script tag to update."""
    id: ID!

    """Specifies the input fields for a script tag."""
    input: ScriptTagInput!
  ): ScriptTagUpdatePayload

  """Creates a segment."""
  segmentCreate(
    """The name of the segment to be created."""
    name: String!

    """
    A precise definition of the segment. The definition is composed of a combination of conditions on facts about customers such as `email_subscription_status = 'SUBSCRIBED'` with [this syntax](https://shopify.dev/api/shopifyql).
    """
    query: String!
  ): SegmentCreatePayload

  """Deletes a segment."""
  segmentDelete(
    """Specifies the segment to delete."""
    id: ID!
  ): SegmentDeletePayload

  """Updates a segment."""
  segmentUpdate(
    """Specifies the segment to be updated."""
    id: ID!

    """The new name for the segment."""
    name: String

    """
    A precise definition of the segment. The definition is composed of a combination of conditions on facts about customers such as `email_subscription_status = 'SUBSCRIBED' with [this syntax](https://shopify.dev/api/shopifyql).
    """
    query: String
  ): SegmentUpdatePayload

  "Adds multiple product variants to a selling plan group.\n"
  sellingPlanGroupAddProductVariants(
    """The ID of the selling plan group."""
    id: ID!

    """The IDs of the product variants to add."""
    productVariantIds: [ID!]!
  ): SellingPlanGroupAddProductVariantsPayload

  "Adds multiple products to a selling plan group.\n"
  sellingPlanGroupAddProducts(
    """The ID of the selling plan group."""
    id: ID!

    """The IDs of the products to add."""
    productIds: [ID!]!
  ): SellingPlanGroupAddProductsPayload

  """Creates a Selling Plan Group."""
  sellingPlanGroupCreate(
    """The properties of the new Selling Plan Group."""
    input: SellingPlanGroupInput!

    """The resources this Selling Plan Group should be applied to."""
    resources: SellingPlanGroupResourceInput
  ): SellingPlanGroupCreatePayload

  """Delete a Selling Plan Group."""
  sellingPlanGroupDelete(
    """The id of the selling plan group to delete."""
    id: ID!
  ): SellingPlanGroupDeletePayload

  "Removes multiple product variants from a selling plan group.\n"
  sellingPlanGroupRemoveProductVariants(
    """The ID of the selling plan group."""
    id: ID!

    """The IDs of the product variants to remove."""
    productVariantIds: [ID!]!
  ): SellingPlanGroupRemoveProductVariantsPayload

  "Removes multiple products from a selling plan group.\n"
  sellingPlanGroupRemoveProducts(
    """The ID of the selling plan group."""
    id: ID!

    """The IDs of the products to remove."""
    productIds: [ID!]!
  ): SellingPlanGroupRemoveProductsPayload

  """Update a Selling Plan Group."""
  sellingPlanGroupUpdate(
    """The Selling Plan Group to update."""
    id: ID!

    """The properties of the Selling Plan Group to update."""
    input: SellingPlanGroupInput
  ): SellingPlanGroupUpdatePayload

  """Deletes a shipping package."""
  shippingPackageDelete(
    """The ID of the shipping package to remove."""
    id: ID!
  ): ShippingPackageDeletePayload

  "Set a shipping package as the default.\nThe default shipping package is the one used to calculate shipping costs on checkout.\n"
  shippingPackageMakeDefault(
    """The ID of the shipping package to set as the default."""
    id: ID!
  ): ShippingPackageMakeDefaultPayload

  """Updates a shipping package."""
  shippingPackageUpdate(
    """The ID of the shipping package to update."""
    id: ID!
  ): ShippingPackageUpdatePayload

  """
  Deletes a locale for a shop. This also deletes all translations of this locale.
  """
  shopLocaleDisable(
    """ISO code of the locale to delete."""
    locale: String!
  ): ShopLocaleDisablePayload

  """
  Adds a locale for a shop. The newly added locale is in the unpublished state.
  """
  shopLocaleEnable(
    """ISO code of the locale to enable."""
    locale: String!
  ): ShopLocaleEnablePayload

  """Updates a locale for a shop."""
  shopLocaleUpdate(
    """ISO code of the locale to update."""
    locale: String!

    """Specifies the input fields for a shop locale."""
    shopLocale: ShopLocaleInput!
  ): ShopLocaleUpdatePayload

  """Updates a shop policy."""
  shopPolicyUpdate(
    """The properties to use when updating the shop policy."""
    shopPolicy: ShopPolicyInput!
  ): ShopPolicyUpdatePayload

  """
  Generates the URL and signed paramaters needed to upload an asset to Shopify.
  """
  stagedUploadTargetGenerate(
    """The input fields for generating a staged upload."""
    input: StagedUploadTargetGenerateInput!
  ): StagedUploadTargetGeneratePayload @deprecated(reason: "Use `stagedUploadsCreate` instead")

  """Uploads multiple images."""
  stagedUploadTargetsGenerate(
    """The input fields for generating staged uploads."""
    input: [StageImageInput!]!
  ): StagedUploadTargetsGeneratePayload @deprecated(reason: "Use `stagedUploadsCreate` instead")

  "Creates staged upload targets for each input and is the first step in the upload process.\nThe returned staged upload targets' url and parameters fields can be used to send a request\nto upload the file described in the corresponding input.\n\nFor more information on the upload process, please refer to\n[this page](https://shopify.dev/api/examples/product-media#uploading-media-to-shopify).\n"
  stagedUploadsCreate(
    """
    Input for the mutation includes information needed to generate staged upload targets.
    """
    input: [StagedUploadInput!]!
  ): StagedUploadsCreatePayload

  "Activates the specified standard metafield definition from its template.\n\nRefer to the [list of standard metafield definition templates](https://shopify.dev/api/admin/graphql/reference/common-objects/standardMetafieldDefinitionTemplates#examples-Get_a_list_of_standard_metafield_definition_templates).\n"
  standardMetafieldDefinitionEnable(
    """The ID of the standard metafield definition template to enable."""
    id: ID

    """
    The key of the standard metafield to enable. Used in combination with `namespace`.
    """
    key: String

    """
    The namespace of the standard metafield to enable. Used in combination with `key`.
    """
    namespace: String

    """The resource type that the metafield definition is scoped to."""
    ownerType: MetafieldOwnerType!

    """Whether to pin the metafield definition."""
    pin: Boolean! = false

    """
    Whether metafields for the definition are visible using the Storefront API.
    """
    visibleToStorefrontApi: Boolean = null
  ): StandardMetafieldDefinitionEnablePayload

  """Creates a storefront access token."""
  storefrontAccessTokenCreate(
    """Provides the input fields for creating a storefront access token."""
    input: StorefrontAccessTokenInput!
  ): StorefrontAccessTokenCreatePayload

  """Deletes a storefront access token."""
  storefrontAccessTokenDelete(
    """
    Provides the input fields required to delete a storefront access token.
    """
    input: StorefrontAccessTokenDeleteInput!
  ): StorefrontAccessTokenDeletePayload

  """
  Creates a new subscription billing attempt. For more information, refer to [Contracts](https://shopify.dev/apps/subscriptions/contracts#create-a-billing-attempt).
  """
  subscriptionBillingAttemptCreate(
    """The information to apply as a billing attempt."""
    subscriptionBillingAttemptInput: SubscriptionBillingAttemptInput!

    """The ID of the subscription contract."""
    subscriptionContractId: ID!
  ): SubscriptionBillingAttemptCreatePayload

  """Creates a Subscription Contract."""
  subscriptionContractCreate(
    """The properties of the new Subscription Contract."""
    input: SubscriptionContractCreateInput!
  ): SubscriptionContractCreatePayload

  """Sets the next billing date of a Subscription Contract."""
  subscriptionContractSetNextBillingDate(
    """The gid of the Subscription Contract to set the next billing date for."""
    contractId: ID!

    """The next billing date."""
    date: DateTime!
  ): SubscriptionContractSetNextBillingDatePayload

  """Updates a Subscription Contract."""
  subscriptionContractUpdate(
    """The gid of the Subscription Contract to update."""
    contractId: ID!
  ): SubscriptionContractUpdatePayload

  """Commits the updates of a Subscription Contract draft."""
  subscriptionDraftCommit(
    """The gid of the Subscription Contract draft to commit."""
    draftId: ID!
  ): SubscriptionDraftCommitPayload

  """Adds a subscription discount to a subscription draft."""
  subscriptionDraftDiscountAdd(
    """
    The ID of the Subscription Contract draft to add a subscription discount to.
    """
    draftId: ID!

    """The properties of the new Subscription Discount."""
    input: SubscriptionManualDiscountInput!
  ): SubscriptionDraftDiscountAddPayload

  """Applies a code discount on the subscription draft."""
  subscriptionDraftDiscountCodeApply(
    """
    The gid of the subscription contract draft to apply a subscription code discount on.
    """
    draftId: ID!

    """Code discount redeem code."""
    redeemCode: String!
  ): SubscriptionDraftDiscountCodeApplyPayload

  """Removes a subscription discount from a subscription draft."""
  subscriptionDraftDiscountRemove(
    """The gid of the subscription draft discount to remove."""
    discountId: ID!

    """
    The gid of the subscription contract draft to remove a subscription discount from.
    """
    draftId: ID!
  ): SubscriptionDraftDiscountRemovePayload

  """Updates a subscription discount on a subscription draft."""
  subscriptionDraftDiscountUpdate(
    """The gid of the Subscription Discount to update."""
    discountId: ID!

    """
    The ID of the Subscription Contract draft to update a subscription discount on.
    """
    draftId: ID!

    """The properties to update on the Subscription Discount."""
    input: SubscriptionManualDiscountInput!
  ): SubscriptionDraftDiscountUpdatePayload

  """Adds a subscription free shipping discount to a subscription draft."""
  subscriptionDraftFreeShippingDiscountAdd(
    """
    The ID of the subscription contract draft to add a subscription free shipping discount to.
    """
    draftId: ID!

    """The properties of the new subscription free shipping discount."""
    input: SubscriptionFreeShippingDiscountInput!
  ): SubscriptionDraftFreeShippingDiscountAddPayload

  """Updates a subscription free shipping discount on a subscription draft."""
  subscriptionDraftFreeShippingDiscountUpdate(
    """The gid of the Subscription Discount to update."""
    discountId: ID!

    """
    The ID of the Subscription Contract draft to update a subscription discount on.
    """
    draftId: ID!

    """The properties to update on the Subscription Free Shipping Discount."""
    input: SubscriptionFreeShippingDiscountInput!
  ): SubscriptionDraftFreeShippingDiscountUpdatePayload

  """Adds a subscription line to a subscription draft."""
  subscriptionDraftLineAdd(
    """
    The gid of the Subscription Contract draft to add a subscription line to.
    """
    draftId: ID!

    """The properties of the new Subscription Line."""
    input: SubscriptionLineInput!
  ): SubscriptionDraftLineAddPayload

  """Removes a subscription line from a subscription draft."""
  subscriptionDraftLineRemove(
    """
    The gid of the Subscription Contract draft to remove a subscription line from.
    """
    draftId: ID!

    """The gid of the Subscription Line to remove."""
    lineId: ID!
  ): SubscriptionDraftLineRemovePayload

  """Updates a subscription line on a subscription draft."""
  subscriptionDraftLineUpdate(
    """
    The gid of the Subscription Contract draft to update a subscription line from.
    """
    draftId: ID!

    """The properties of the new Subscription Line."""
    input: SubscriptionLineUpdateInput!

    """The gid of the Subscription Line to update."""
    lineId: ID!
  ): SubscriptionDraftLineUpdatePayload

  """Updates a Subscription Draft."""
  subscriptionDraftUpdate(
    """The gid of the Subscription Draft to update."""
    draftId: ID!

    """The properties of the new Subscription Contract."""
    input: SubscriptionDraftInput!
  ): SubscriptionDraftUpdatePayload

  """
  Add tags to an order, a draft order, a customer, a product, or an online store article.
  """
  tagsAdd(
    """The ID of a resource to add tags to."""
    id: ID!

    "A list of tags to add to the resource. Can be an array of strings or a single string composed of a comma-separated list of values. Example values: `[\"tag1\", \"tag2\", \"tag3\"]`, `\"tag1, tag2, tag3\"`.\n"
    tags: [String!]!
  ): TagsAddPayload

  """
  Remove tags from an order, a draft order, a customer, a product, or an online store article.
  """
  tagsRemove(
    """The ID of the resource to remove tags from."""
    id: ID!

    "A list of tags to remove from the resource in the form of an array of strings. Example value: `[\"tag1\", \"tag2\", \"tag3\"]`.\n"
    tags: [String!]!
  ): TagsRemovePayload

  """Creates or updates translations."""
  translationsRegister(
    """ID of the resource that is being translated."""
    resourceId: ID!

    """Specifies the input fields for a translation."""
    translations: [TranslationInput!]!
  ): TranslationsRegisterPayload

  """Deletes translations."""
  translationsRemove(
    """The list of translation locales."""
    locales: [String!]!

    """
    ID of the translatable resource for which translations are being deleted.
    """
    resourceId: ID!

    """The list of translation keys."""
    translationKeys: [String!]!
  ): TranslationsRemovePayload

  "Asynchronously delete [URL redirects](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) in bulk.\n"
  urlRedirectBulkDeleteAll: UrlRedirectBulkDeleteAllPayload

  "Asynchronously delete [URLRedirect](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) \nobjects in bulk by IDs.\nLearn more about [URLRedirect](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect) \nobjects.\n"
  urlRedirectBulkDeleteByIds(
    """
    A list of [`URLRedirect`](
                https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect
              ) object IDs to delete.
    """
    ids: [ID!]!
  ): UrlRedirectBulkDeleteByIdsPayload

  """Asynchronously delete redirects in bulk."""
  urlRedirectBulkDeleteBySavedSearch(
    """The ID of the URL redirect saved search for filtering."""
    savedSearchId: ID!
  ): UrlRedirectBulkDeleteBySavedSearchPayload

  """Asynchronously delete redirects in bulk."""
  urlRedirectBulkDeleteBySearch(
    """
    Search query for filtering redirects on (both Redirect from and Redirect to fields).
    """
    search: String!
  ): UrlRedirectBulkDeleteBySearchPayload

  "Creates a [`UrlRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object.\n"
  urlRedirectCreate(
    """The fields to use when creating the redirect."""
    urlRedirect: UrlRedirectInput!
  ): UrlRedirectCreatePayload

  "Deletes a [`UrlRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object.\n"
  urlRedirectDelete(
    """The ID of the redirect to delete."""
    id: ID!
  ): UrlRedirectDeletePayload

  "Creates a [`UrlRedirectImport`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirectImport) object.\n\nAfter creating the `UrlRedirectImport` object, the `UrlRedirectImport` request can be performed using the [`urlRedirectImportSubmit`](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportSubmit) mutation.\n"
  urlRedirectImportCreate(
    "The S3 URL of the CSV file.\nYou can download [a sample URL redirect CSV file](https://help.shopify.com/csv/sample-redirect-template.csv)).\n"
    url: URL!
  ): UrlRedirectImportCreatePayload

  "Submits a `UrlRedirectImport` request to be processed.\n\nThe `UrlRedirectImport` request is first created with the [`urlRedirectImportCreate`](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportCreate) mutation.\n"
  urlRedirectImportSubmit(
    "The ID of the [`UrlRedirectImport`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirectImport) object.\n"
    id: ID!
  ): UrlRedirectImportSubmitPayload

  "Updates a URL redirect.\n"
  urlRedirectUpdate(
    """The ID of the URL redirect to update."""
    id: ID!

    """The input fields required to update the URL redirect."""
    urlRedirect: UrlRedirectInput!
  ): UrlRedirectUpdatePayload

  "Creates a new webhook subscription.\n"
  webhookSubscriptionCreate(
    """The type of event that triggers the webhook."""
    topic: WebhookSubscriptionTopic!

    """Specifies the input fields for a webhook subscription."""
    webhookSubscription: WebhookSubscriptionInput!
  ): WebhookSubscriptionCreatePayload

  "Deletes a webhook subscription.\n"
  webhookSubscriptionDelete(
    """The ID of the webhook subscription to delete."""
    id: ID!
  ): WebhookSubscriptionDeletePayload

  "Updates a webhook subscription.\n"
  webhookSubscriptionUpdate(
    """The ID of the webhook subscription to update."""
    id: ID!

    """Specifies the input fields for a webhook subscription."""
    webhookSubscription: WebhookSubscriptionInput!
  ): WebhookSubscriptionUpdatePayload
}

"A signed upload parameter for uploading an asset to Shopify.\n\nDeprecated in favor of\n[StagedUploadParameter](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadParameter),\nwhich is used in\n[StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget)\nand returned by the\n[stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).\n"
type MutationsStagedUploadTargetGenerateUploadParameter {
  """The upload parameter name."""
  name: String!

  """The upload parameter value."""
  value: String!
}

"A default cursor that you can use in queries to paginate your results. Each edge in a connection can\nreturn a cursor, which is a reference to the edge's position in the connection. You can use an edge's cursor as\nthe starting point to retrieve the nodes before or after it in a connection.\n\nTo learn more about using cursor-based pagination, refer to\n[Paginating results with GraphQL](https://shopify.dev/api/usage/pagination-graphql).\n"
interface Navigable {
  "A default cursor that returns the single next record, sorted ascending by ID.\n"
  defaultCursor: String!
}

"""A navigation item, holding basic link attributes."""
type NavigationItem {
  """The unique identifier of the navigation item."""
  id: String!

  """The name of the navigation item."""
  title: String!

  """The URL of the page that the navigation item links to."""
  url: URL!
}

"An object with an ID field to support global identification, in accordance with the\n[Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).\nThis interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)\nand [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.\n"
interface Node {
  """A globally-unique identifier."""
  id: ID!
}

"An article in the blogging system. You can query articles from\n[the REST API](https://shopify.dev/api/admin-rest/latest/resources/article)\nif you need to access more information about an article. Currently, `OnlineStoreArticle` is\nonly useful to pass an article `id` to the `tagsAdd` mutation. For more information, refer to\nthe [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd) mutation.\n"
type OnlineStoreArticle implements HasPublishedTranslations & Navigable & Node {
  "A default cursor that returns the single next record, sorted ascending by ID.\n"
  defaultCursor: String!

  """A globally-unique identifier."""
  id: ID!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [PublishedTranslation!]!
}

"Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant\nto be used as a type of magazine or newsletter for the shop, with content that changes over time.\n"
type OnlineStoreBlog implements HasPublishedTranslations & Node {
  """A globally-unique identifier."""
  id: ID!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [PublishedTranslation!]!
}

"""A custom page on the Online Store."""
type OnlineStorePage implements HasPublishedTranslations & Navigable & Node {
  "A default cursor that returns the single next record, sorted ascending by ID.\n"
  defaultCursor: String!

  """A globally-unique identifier."""
  id: ID!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [PublishedTranslation!]!
}

"""Online Store preview URL of the object."""
interface OnlineStorePreviewable {
  """The online store preview URL."""
  onlineStorePreviewUrl: URL
}

"An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the Order object.\nLearn more about [editing an existing order with the Admin API](https://shopify.dev/api/examples/order-editing).\n\nOnly the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,\nthen you need to [request access to all orders](https://shopify.dev/apps/auth/oauth#orders-permissions). If your app is granted\naccess, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.\n[Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.\n\n**Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.\n"
type Order implements CommentEventSubject & HasEvents & HasLocalizationExtensions & HasMetafieldDefinitions & HasMetafields & LegacyInteroperability & Node {
  """A list of sales agreements associated with the order."""
  agreements(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `happened_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SalesAgreementConnection!

  "A list of messages that appear on the order page in the Shopify admin.\n"
  alerts: [ResourceAlert!]!

  """The application that created the order."""
  app: OrderApp

  "The billing address of the customer.\n"
  billingAddress: MailingAddress

  """Whether the billing address matches the shipping address."""
  billingAddressMatchesShippingAddress: Boolean!

  """Whether the order can be manually marked as paid."""
  canMarkAsPaid: Boolean!

  """Whether a customer email exists for the order."""
  canNotifyCustomer: Boolean!

  "The reason provided when the order was canceled.\nReturns `null` if the order wasn't canceled.\n"
  cancelReason: OrderCancelReason

  "The date and time when the order was canceled.\nReturns `null` if the order wasn't canceled.\n"
  cancelledAt: DateTime

  "Whether payment for the order can be captured.\n"
  capturable: Boolean!

  """
  The total order-level discount amount, before returns, in shop currency.
  """
  cartDiscountAmount: Money @deprecated(reason: "Use `cartDiscountAmountSet` instead")

  """
  The total order-level discount amount, before returns, in shop and presentment currencies.
  """
  cartDiscountAmountSet: MoneyBag

  """The channel that created the order."""
  channel: Channel @deprecated(reason: "Use `publication` instead")

  """Details about the channel that created the order."""
  channelInformation: ChannelInformation

  """The IP address of the API client that created the order."""
  clientIp: String

  """Whether the order is closed."""
  closed: Boolean!

  "The date and time when the order was closed.\nReturns `null` if the order is not closed.\n"
  closedAt: DateTime

  """Whether inventory has been reserved for the order."""
  confirmed: Boolean!

  """Date and time when the order was created in Shopify."""
  createdAt: DateTime!

  """The shop currency when the order was placed."""
  currencyCode: CurrencyCode!

  "The current order-level discount amount after all order updates, in shop and presentment currencies.\n"
  currentCartDiscountAmountSet: MoneyBag!

  """
  The sum of the quantities for all line items that contribute to the order's current subtotal price.
  """
  currentSubtotalLineItemsQuantity: Int!

  "The sum of the prices for all line items after discounts and returns, in shop and presentment currencies.\nIf `taxesIncluded` is `true`, then the subtotal also includes tax.\n"
  currentSubtotalPriceSet: MoneyBag!

  "A list of all tax lines applied to line items on the order, after returns.\nTax line prices represent the total price for all tax lines with the same `rate` and `title`.\n"
  currentTaxLines: [TaxLine!]!

  "The total amount discounted on the order after returns, in shop and presentment currencies.\nThis includes both order and line level discounts.\n"
  currentTotalDiscountsSet: MoneyBag!

  "The total amount of duties after returns, in shop and presentment currencies.\nReturns `null` if duties aren't applicable.\n"
  currentTotalDutiesSet: MoneyBag

  "The total price of the order, after returns, in shop and presentment currencies.\nThis includes taxes and discounts.\n"
  currentTotalPriceSet: MoneyBag!

  "The sum of the prices of all tax lines applied to line items on the order, after returns, in shop and presentment currencies.\n"
  currentTotalTaxSet: MoneyBag!

  """The total weight of the order after returns, in grams."""
  currentTotalWeight: UnsignedInt64!

  "A list of the custom attributes added to the order.\n"
  customAttributes: [Attribute!]!

  "The customer that placed the order.\n"
  customer: Customer

  """Whether the customer agreed to receive marketing materials."""
  customerAcceptsMarketing: Boolean!

  "The customer's visits and interactions with the online store before placing the order.\n"
  customerJourney: CustomerJourney @deprecated(reason: "Use `customerJourneySummary` instead")

  "The customer's visits and interactions with the online store before placing the order.\n"
  customerJourneySummary: CustomerJourneySummary

  "A two-letter or three-letter language code, optionally followed by a region modifier.\n"
  customerLocale: String

  """A list of discounts that are applied to the order."""
  discountApplications(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): DiscountApplicationConnection!

  """The discount code used for the order."""
  discountCode: String

  """The discount codes used for the order."""
  discountCodes: [String!]!

  "The primary address of the customer.\nReturns `null` if neither the shipping address nor the billing address was provided.\n"
  displayAddress: MailingAddress

  "The financial status of the order that can be shown to the merchant.\nThis field does not capture all the details of an order's financial state. It should only be used for display summary purposes.\n"
  displayFinancialStatus: OrderDisplayFinancialStatus

  "The fulfillment status for the order that can be shown to the merchant.\nThis field does not capture all the details of an order's fulfillment state. It should only be used for display summary purposes.\nFor a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.\n"
  displayFulfillmentStatus: OrderDisplayFulfillmentStatus!

  """A list of the disputes associated with the order."""
  disputes: [OrderDisputeSummary!]!

  """Whether the order has had any edits applied."""
  edited: Boolean!

  """The email address associated with the customer."""
  email: String

  "Whether taxes on the order are estimated.\nThis field returns `false` when taxes on the order are finalized and aren't subject to any changes.\n"
  estimatedTaxes: Boolean!

  """A list of events associated with the order."""
  events(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `comments`\n - `created_at`\n - `subject_type`\n - `verb`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: EventSortKeys = ID
  ): EventConnection!

  "Whether there are line items that can be fulfilled.\nThis field returns `false` when the order has no fulfillable line items.\nFor a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.\n"
  fulfillable: Boolean!

  """A list of fulfillment orders for the order."""
  fulfillmentOrders(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    "Whether fulfillment orders that are hidden from the merchant are included.\nFor example, fulfillment orders that were closed after being combined or moved are hidden.\n"
    displayable: Boolean = false

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `assigned_location_id`\n - `status`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): FulfillmentOrderConnection!

  """List of shipments for the order."""
  fulfillments(
    """Truncate the array result to this size."""
    first: Int
  ): [Fulfillment!]!

  """Whether the order has been paid in full."""
  fullyPaid: Boolean!

  """Whether the merchant added a timeline comment to the order."""
  hasTimelineComment: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """
  The URL of the first page of the online store that the customer visited before they submitted the order.
  """
  landingPageDisplayText: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.landingPageHtml` instead")

  """
  The first page of the online store that the customer visited before they submitted the order.
  """
  landingPageUrl: URL @deprecated(reason: "Use `customerJourneySummary.lastVisit.landingPage` instead")

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """A list of the order's line items."""
  lineItems(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): LineItemConnection!

  """A list of the order's line items."""
  lineItemsMutable(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): LineItemMutableConnection! @deprecated(reason: "Use `lineItems` instead")

  """List of localization extensions for the resource."""
  localizationExtensions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """The country codes of the extensions."""
    countryCodes: [CountryCode!]

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The purpose of the extensions."""
    purposes: [LocalizationExtensionPurpose!]

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): LocalizationExtensionConnection!

  "The fulfillment location that was assigned when the order was created.\nUse the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder) object for up-to-date fulfillment location information.\n"
  location: String @deprecated(reason: "Use `physicalLocation` instead")

  """
  Whether the order can be edited by the merchant. For example, canceled orders can’t be edited.
  """
  merchantEditable: Boolean!

  "A list of reasons why the order can't be edited. For example, \"Canceled orders can’t be edited\".\n"
  merchantEditableErrors: [String!]!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The key for the metafield."""
    key: String!

    """The namespace for the metafield."""
    namespace: String!
  ): Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    "Supported filter parameters:\n - `created_at`\n - `key`\n - `namespace`\n - `owner_type`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The metafield namespace to filter by."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  "The unique identifier for the order that appears on the order page in the Shopify admin and the order status page.\nFor example, \"#1001\", \"EN1001\", or \"1001-A\".\nThis value isn't unique across multiple stores.\n"
  name: String!

  "The net payment for the order, based on the total amount received minus the total amount refunded, in shop currency.\n"
  netPayment: Money! @deprecated(reason: "Use `netPaymentSet` instead")

  """
  The net payment for the order, based on the total amount received minus the total amount refunded, in shop and presentment currencies.
  """
  netPaymentSet: MoneyBag!

  "A list of line items that can't be fulfilled.\nFor example, tips and fully refunded line items can't be fulfilled.\nFor a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.\n"
  nonFulfillableLineItems(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): LineItemConnection!

  "The contents of the note associated with the order.\n"
  note: String

  "The total amount of duties before returns, in shop and presentment currencies.\nReturns `null` if duties aren't applicable.\n"
  originalTotalDutiesSet: MoneyBag

  """
  The total price of the order at the time of order creation, in shop and presentment currencies.
  """
  originalTotalPriceSet: MoneyBag!

  """The payment collection details for the order."""
  paymentCollectionDetails: OrderPaymentCollectionDetails!

  "A list of the names of all payment gateways used for the order.\nFor example, \"Shopify Payments\" and \"Cash on Delivery (COD)\".\n"
  paymentGatewayNames: [String!]!

  """The payment terms associated with the order."""
  paymentTerms: PaymentTerms

  """The phone number associated with the customer."""
  phone: String

  "The fulfillment location that was assigned when the order was created.\nUse the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder) object for up to date fulfillment location information.\n"
  physicalLocation: Location

  """The payment `CurrencyCode` of the customer for the order."""
  presentmentCurrencyCode: CurrencyCode!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The key for the private metafield."""
    key: String!

    """The namespace for the private metafield."""
    namespace: String!
  ): PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter the private metafields by namespace."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PrivateMetafieldConnection!

  "The date and time when the order was processed.\nThis date and time might not match the date and time when the order was created.\n"
  processedAt: DateTime!

  """The publication that the order was created from."""
  publication: Publication

  "The marketing referral code from the link that the customer clicked to visit the store.\nSupports the following URL attributes: \"ref\", \"source\", or \"r\".\nFor example, if the URL is `{shop}.myshopify.com/products/slide?ref=j2tj1tn2`, then this value is `j2tj1tn2`.\n"
  referralCode: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.referralCode` instead")

  "A web domain or short description of the source that sent the customer to your online store. For example, \"shopify.com\" or \"email\".\n"
  referrerDisplayText: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.referralInfoHtml` instead")

  "The URL of the webpage where the customer clicked a link that sent them to your online store.\n"
  referrerUrl: URL @deprecated(reason: "Use `customerJourneySummary.lastVisit.referrerUrl` instead")

  """
  The difference between the suggested and actual refund amount of all refunds that have been applied to the order. A positive value indicates a difference in the merchant's favor, and a negative value indicates a difference in the customer's favor.
  """
  refundDiscrepancySet: MoneyBag!

  "Whether the order can be refunded.\n"
  refundable: Boolean!

  "A list of refunds that have been applied to the order.\n"
  refunds(
    """Truncate the array result to this size."""
    first: Int
  ): [Refund!]!

  """
  The URL of the source that the order originated from, if found in the domain registry.
  """
  registeredSourceUrl: URL

  "Whether the order has shipping lines or at least one line item on the order that requires shipping.\n"
  requiresShipping: Boolean!

  "Whether any line item on the order can be restocked.\n"
  restockable: Boolean!

  """The fraud risk level of the order."""
  riskLevel: OrderRiskLevel!

  """A list of risks associated with the order."""
  risks(
    """Truncate the array result to this size."""
    first: Int
  ): [OrderRisk!]!

  """The mailing address of the customer."""
  shippingAddress: MailingAddress

  """A summary of all shipping costs on the order."""
  shippingLine: ShippingLine

  """A list of the order's shipping lines."""
  shippingLines(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShippingLineConnection!

  "A unique POS or third party order identifier.\nFor example, \"1234-12-1000\" or \"111-98567-54\". The `receipt_number` field is derived from this value for POS orders.\n"
  sourceIdentifier: String

  """
  The sum of the quantities for all line items that contribute to the order's subtotal price.
  """
  subtotalLineItemsQuantity: Int!

  "The sum of the prices for all line items after discounts and before returns, in shop currency.\nIf `taxesIncluded` is `true`, then the subtotal also includes tax.\n"
  subtotalPrice: Money @deprecated(reason: "Use `subtotalPriceSet` instead")

  "The sum of the prices for all line items after discounts and before returns, in shop and presentment currencies.\nIf `taxesIncluded` is `true`, then the subtotal also includes tax.\n"
  subtotalPriceSet: MoneyBag

  """A suggested refund for the order."""
  suggestedRefund(
    """The duties from the order to include in the refund."""
    refundDuties: [RefundDutyInput!]

    """The line items from the order to include in the refund."""
    refundLineItems: [RefundLineItemInput!]

    """Whether to refund the full shipping amount."""
    refundShipping: Boolean

    "The amount to refund for shipping. Overrides the `refundShipping` argument.\nUse the `shippingAmountV2` argument for multi-currency orders.\n"
    shippingAmount: Money

    "Whether the suggested refund should be created from all refundable line items on the order.\nIf `true`, the `refundLineItems` argument will be ignored.\n"
    suggestFullRefund: Boolean = false
  ): SuggestedRefund

  "A comma separated list of tags associated with the order. Updating `tags` overwrites\nany existing tags that were previously added to the order. To add new tags without overwriting\nexisting tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)\nmutation.\n"
  tags: [String!]!

  "A list of all tax lines applied to line items on the order, before returns.\nTax line prices represent the total price for all tax lines with the same `rate` and `title`.\n"
  taxLines: [TaxLine!]!

  """Whether taxes are included in the subtotal price of the order."""
  taxesIncluded: Boolean!

  "Whether the order is a test.\nTest orders are made using the Shopify Bogus Gateway or a payment provider with test mode enabled.\nA test order cannot be converted into a real order and vice versa.\n"
  test: Boolean!

  "The authorized amount that is uncaptured or undercaptured, in shop currency.\nThis amount isn't adjusted for returns.\n"
  totalCapturable: Money! @deprecated(reason: "Use `totalCapturableSet` instead")

  "The authorized amount that is uncaptured or undercaptured, in shop and presentment currencies.\nThis amount isn't adjusted for returns.\n"
  totalCapturableSet: MoneyBag!

  "The total amount discounted on the order before returns, in shop currency.\nThis includes both order and line level discounts.\n"
  totalDiscounts: Money @deprecated(reason: "Use `totalDiscountsSet` instead")

  "The total amount discounted on the order before returns, in shop and presentment currencies.\nThis includes both order and line level discounts.\n"
  totalDiscountsSet: MoneyBag

  "The total amount not yet transacted for the order, in shop and presentment currencies.\nA positive value indicates a difference in the merchant's favor (payment from customer to merchant) and a negative value indicates a difference in the customer's favor (refund from merchant to customer).\n"
  totalOutstandingSet: MoneyBag!

  "The total price of the order, before returns, in shop currency.\nThis includes taxes and discounts.\n"
  totalPrice: Money! @deprecated(reason: "Use `totalPriceSet` instead")

  "The total price of the order, before returns, in shop and presentment currencies.\nThis includes taxes and discounts.\n"
  totalPriceSet: MoneyBag!

  """
  The total amount received from the customer before returns, in shop currency.
  """
  totalReceived: Money! @deprecated(reason: "Use `totalReceivedSet` instead")

  """
  The total amount received from the customer before returns, in shop and presentment currencies.
  """
  totalReceivedSet: MoneyBag!

  """The total amount that was refunded, in shop currency."""
  totalRefunded: Money! @deprecated(reason: "Use `totalRefundedSet` instead")

  """
  The total amount that was refunded, in shop and presentment currencies.
  """
  totalRefundedSet: MoneyBag!

  """
  The total amount of shipping that was refunded, in shop and presentment currencies.
  """
  totalRefundedShippingSet: MoneyBag!

  """
  The total shipping amount before discounts and returns, in shop currency.
  """
  totalShippingPrice: Money! @deprecated(reason: "Use `totalShippingPriceSet` instead")

  """
  The total shipping amount before discounts and returns, in shop and presentment currencies.
  """
  totalShippingPriceSet: MoneyBag!

  """The total tax amount before returns, in shop currency."""
  totalTax: Money @deprecated(reason: "Use `totalTaxSet` instead")

  """
  The total tax amount before returns, in shop and presentment currencies.
  """
  totalTaxSet: MoneyBag

  """The sum of all tip amounts for the order, in shop currency."""
  totalTipReceived: MoneyV2! @deprecated(reason: "Use `totalTipReceivedSet` instead")

  """
  The sum of all tip amounts for the order, in shop and presentment currencies.
  """
  totalTipReceivedSet: MoneyBag!

  """The total weight of the order before returns, in grams."""
  totalWeight: UnsignedInt64

  """A list of transactions associated with the order."""
  transactions(
    "Filter transactions by whether they are capturable.\n"
    capturable: Boolean

    """Truncate the array result to this size."""
    first: Int

    "Filter transactions by whether they can be resolved manually.\nFor example, fully captured or voided transactions aren't manually resolvable.\n"
    manuallyResolvable: Boolean
  ): [OrderTransaction!]!

  "Whether no payments have been made for the order.\n"
  unpaid: Boolean!

  """The date and time when the order was modified last."""
  updatedAt: DateTime!
}

"The possible order action types for a\n[sales agreement](https://shopify.dev/api/admin-graphql/latest/interfaces/salesagreement).\n"
enum OrderActionType {
  """An order with a purchase or charge."""
  ORDER

  """An edit to the order."""
  ORDER_EDIT

  """A refund on the order."""
  REFUND

  """
  An unknown agreement action. Represents new actions that may be added in future versions.
  """
  UNKNOWN
}

"""An agreement associated with an order placement."""
type OrderAgreement implements SalesAgreement {
  """The application that created the agreement."""
  app: App

  """The date and time at which the agreement occured."""
  happenedAt: DateTime!

  """The unique identifier for the agreement."""
  id: ID!

  """The order associated with the agreement."""
  order: Order!

  """The reason the agremeent was created."""
  reason: OrderActionType!

  """The sales associated with the agreement."""
  sales(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SaleConnection!

  """The staff member associated with the agreement."""
  user: StaffMember
}

"The [application](https://shopify.dev/apps) that created the order.\n"
type OrderApp {
  """The application icon."""
  icon: Image!

  """The name of the application."""
  name: String!
}

"""
Represents the reason that the order is being canceled. Valid values are: customer, fraud, inventory, declined, other.
"""
enum OrderCancelReason {
  """The customer wanted to cancel the order."""
  CUSTOMER

  """Payment was declined."""
  DECLINED

  """The order was fraudulent."""
  FRAUD

  """There was insufficient inventory."""
  INVENTORY

  """Some other reason not listed."""
  OTHER
}

"""
Specifies the authorized transaction to capture and the total amount to capture from it.
"""
input OrderCaptureInput {
  """
  The amount to capture. The capture amount can't be greater than the amount of the authorized transaction.
  """
  amount: Money!

  """
  The currency (in ISO format) that is used to capture the order. This must be the presentment currency (the currency used by the customer) and is a required field for orders where the currency and presentment currency differ.
  """
  currency: CurrencyCode

  """The ID of the order to capture."""
  id: ID!

  """The ID of the authorized transaction to capture."""
  parentTransactionId: ID!
}

"""Return type for `orderCapture` mutation."""
type OrderCapturePayload {
  """The created capture transaction."""
  transaction: OrderTransaction

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies an open order to close."""
input OrderCloseInput {
  """The ID of the order to close."""
  id: ID!
}

"""Return type for `orderClose` mutation."""
type OrderClosePayload {
  """The closed order."""
  order: Order

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type for paginating through multiple Orders.\n"
type OrderConnection {
  """A list of edges."""
  edges: [OrderEdge!]!

  """A list of the nodes contained in OrderEdge."""
  nodes: [Order!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `orderCreateMandatePayment` mutation."""
type OrderCreateMandatePaymentPayload {
  """The async job used for charging the payment."""
  job: Job

  """The Unique Identifier for the created payment."""
  paymentReferenceId: String

  """The list of errors that occurred from executing the mutation."""
  userErrors: [OrderCreateMandatePaymentUserError!]!
}

"""
An error that occurs during the execution of `OrderCreateMandatePayment`.
"""
type OrderCreateMandatePaymentUserError implements DisplayableError {
  """The error code."""
  code: OrderCreateMandatePaymentUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `OrderCreateMandatePaymentUserError`.
"""
enum OrderCreateMandatePaymentUserErrorCode {
  """Errors for mandate payment on order."""
  ORDER_MANDATE_PAYMENT_ERROR_CODE
}

"""Represents the order's current financial status."""
enum OrderDisplayFinancialStatus {
  """Displayed as **Authorized**."""
  AUTHORIZED

  """Displayed as **Expired**."""
  EXPIRED

  """Displayed as **Paid**."""
  PAID

  """Displayed as **Partially paid**."""
  PARTIALLY_PAID

  """Displayed as **Partially refunded**."""
  PARTIALLY_REFUNDED

  """Displayed as **Pending**."""
  PENDING

  """Displayed as **Refunded**."""
  REFUNDED

  """Displayed as **Voided**."""
  VOIDED
}

"""
Represents the order's aggregated fulfillment status for display purposes.
"""
enum OrderDisplayFulfillmentStatus {
  """
  Displayed as **Fulfilled**. All the items in the order have been fulfilled.
  """
  FULFILLED

  """
  Displayed as **In progress**. Some of the items in the order have been fulfilled, or a request for fulfillment has been sent to the fulfillment service.
  """
  IN_PROGRESS

  """
  Displayed as **On hold**. All of the unfulfilled items in this order are on hold.
  """
  ON_HOLD

  """
  Displayed as **Open**. None of the items in the order have been fulfilled. Replaced by "UNFULFILLED" status.
  """
  OPEN

  """
  Displayed as **Partially fulfilled**. Some of the items in the order have been fulfilled.
  """
  PARTIALLY_FULFILLED

  """
  Displayed as **Pending fulfillment**. A request for fulfillment of some items awaits a response from the fulfillment service. Replaced by the "IN_PROGRESS" status.
  """
  PENDING_FULFILLMENT

  """
  Displayed as **Restocked**. All the items in the order have been restocked. Replaced by the "UNFULFILLED" status.
  """
  RESTOCKED

  """
  Displayed as **Scheduled**. All of the unfulfilled items in this order are scheduled for fulfillment at later time.
  """
  SCHEDULED

  """
  Displayed as **Unfulfilled**. None of the items in the order have been fulfilled.
  """
  UNFULFILLED
}

"""A summary of the important details for a dispute on an order."""
type OrderDisputeSummary implements Node {
  """A globally-unique identifier."""
  id: ID!

  """The type that the dispute was initiated as."""
  initiatedAs: DisputeType!

  """The current status of the dispute."""
  status: DisputeStatus!
}

"An auto-generated type which holds one Order and a cursor during pagination.\n"
type OrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OrderEdge."""
  node: Order!
}

"""Return type for `orderEditAddCustomItem` mutation."""
type OrderEditAddCustomItemPayload {
  """
  The custom line item that will be added to the order based on the current edits.
  """
  calculatedLineItem: CalculatedLineItem

  """An order with the edits applied but not saved."""
  calculatedOrder: CalculatedOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `orderEditAddLineItemDiscount` mutation."""
type OrderEditAddLineItemDiscountPayload {
  """The discount applied to a line item during this order edit."""
  addedDiscountStagedChange: OrderStagedChangeAddLineItemDiscount

  """The line item with the edits applied but not saved."""
  calculatedLineItem: CalculatedLineItem

  """An order with the edits applied but not saved."""
  calculatedOrder: CalculatedOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `orderEditAddVariant` mutation."""
type OrderEditAddVariantPayload {
  "The [calculated line item](https://shopify.dev/api/admin-graphql/latest/objects/calculatedlineitem)\nthat's added during this order edit.\n"
  calculatedLineItem: CalculatedLineItem

  "The [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)\nwith the edits applied but not saved.\n"
  calculatedOrder: CalculatedOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""An agreement associated with an edit to the order."""
type OrderEditAgreement implements SalesAgreement {
  """The application that created the agreement."""
  app: App

  """The date and time at which the agreement occured."""
  happenedAt: DateTime!

  """The unique identifier for the agreement."""
  id: ID!

  """The reason the agremeent was created."""
  reason: OrderActionType!

  """The sales associated with the agreement."""
  sales(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SaleConnection!

  """The staff member associated with the agreement."""
  user: StaffMember
}

"""The input fields used to add a discount during an order edit."""
input OrderEditAppliedDiscountInput {
  """The description of the discount."""
  description: String

  """The value of the discount as a fixed amount."""
  fixedValue: MoneyInput

  """The value of the discount as a percentage."""
  percentValue: Float
}

"""Return type for `orderEditBegin` mutation."""
type OrderEditBeginPayload {
  """The order that will be edited."""
  calculatedOrder: CalculatedOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `orderEditCommit` mutation."""
type OrderEditCommitPayload {
  """The order with changes applied."""
  order: Order

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `orderEditRemoveLineItemDiscount` mutation."""
type OrderEditRemoveLineItemDiscountPayload {
  """The calculated line item after removal of the discount."""
  calculatedLineItem: CalculatedLineItem

  """An order with the edits applied but not saved."""
  calculatedOrder: CalculatedOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `orderEditSetQuantity` mutation."""
type OrderEditSetQuantityPayload {
  """The calculated line item with the edits applied but not saved."""
  calculatedLineItem: CalculatedLineItem

  """The calculated order with the edits applied but not saved."""
  calculatedOrder: CalculatedOrder

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""
Specifies the information to be updated on an order when using the orderUpdate mutation.
"""
input OrderInput {
  """
  A new list of custom attributes for the order. Overwrites the existing custom attributes.
  """
  customAttributes: [AttributeInput!]

  """
  A new customer email address for the order. Overwrites the existing email address.
  """
  email: String

  """The ID of the order to update."""
  id: ID!

  """
  A list of new [localization extensions](https://shopify.dev/api/admin-graphql/latest/objects/localizationextension) to add to the existing list of localization extensions for the order.
  """
  localizationExtensions: [LocalizationExtensionInput!]

  """
  A list of new metafields to add to the existing metafields for the order.
  """
  metafields: [MetafieldInput!]

  """
  The new contents for the note associated with the order. Overwrites the existing note.
  """
  note: String

  """
  The new shipping address for the order. Overwrites the existing shipping address.
  """
  shippingAddress: MailingAddressInput

  """A new list of tags for the order. Overwrites the existing tags."""
  tags: [String!]
}

"""Return type for `orderInvoiceSend` mutation."""
type OrderInvoiceSendPayload {
  """The order associated with the invoice email."""
  order: Order

  """The list of errors that occurred from executing the mutation."""
  userErrors: [OrderInvoiceSendUserError!]!
}

"""An error that occurs during the execution of `OrderInvoiceSend`."""
type OrderInvoiceSendUserError implements DisplayableError {
  """The error code."""
  code: OrderInvoiceSendUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `OrderInvoiceSendUserError`.
"""
enum OrderInvoiceSendUserErrorCode {
  """An error occurred while sending the invoice."""
  ORDER_INVOICE_SEND_UNSUCCESSFUL
}

"""Specifies the order to mark as paid."""
input OrderMarkAsPaidInput {
  """The ID of the order to mark as paid."""
  id: ID!
}

"""Return type for `orderMarkAsPaid` mutation."""
type OrderMarkAsPaidPayload {
  """The order marked as paid."""
  order: Order

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies a closed order to open."""
input OrderOpenInput {
  """The ID of the order to open."""
  id: ID!
}

"""Return type for `orderOpen` mutation."""
type OrderOpenPayload {
  """The opened order."""
  order: Order

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""
The payment collection details for an order that requires additional payment following an edit to the order.
"""
type OrderPaymentCollectionDetails {
  """The URL to use for collecting an additional payment on the order."""
  additionalPaymentCollectionUrl: URL

  """
  The list of vaulted payment methods for the order with their permissions.
  """
  vaultedPaymentMethods: [PaymentMandate!]
}

"""The status of a payment for an order."""
type OrderPaymentStatus {
  """
  A message describing an error during the asynchronous processing of a payment.
  """
  errorMessage: String

  """
  The ID of the payment, initially returned by an `orderCreateMandatePayment` or `orderCreatePayment` mutation.
  """
  paymentReferenceId: String!

  """The status of the payment."""
  status: OrderPaymentStatusResult!

  """
  A translated message describing an error during the asynchronous processing of a payment.
  """
  translatedErrorMessage: String
}

"""The type of a payment status."""
enum OrderPaymentStatusResult {
  """The payment is authorized."""
  AUTHORIZED

  """The payment is captured."""
  CAPTURED

  """There was an error initiating the payment."""
  ERROR

  """The payment is still being processed."""
  PROCESSING

  """The payment is in purchased status."""
  PURCHASED

  """Redirect required."""
  REDIRECT_REQUIRED

  """The payment is refunded."""
  REFUNDED

  """Payment can be retried."""
  RETRYABLE

  """The payment succeeded."""
  SUCCESS

  """Status is unknown."""
  UNKNOWN

  """The payment is voided."""
  VOIDED
}

"""Represents a fraud check on an order."""
type OrderRisk {
  """
  Whether the risk level is shown in the Shopify admin. If false, then this order risk is ignored when Shopify determines the overall risk level for the order.
  """
  display: Boolean!

  "The likelihood that an order is fraudulent, based on this order risk.\n\nThe level can be set by Shopify risk analysis or by an app.\n"
  level: OrderRiskLevel

  """The risk message that's shown to the merchant in the Shopify admin."""
  message: String
}

"""The likelihood that an order is fraudulent."""
enum OrderRiskLevel {
  """There is a high level of risk that this order is fraudulent."""
  HIGH

  """There is a low level of risk that this order is fraudulent."""
  LOW

  """There is a medium level of risk that this order is fraudulent."""
  MEDIUM
}

"""The set of valid sort keys for the Order query."""
enum OrderSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `customer_name` value."""
  CUSTOMER_NAME

  """Sort by the `financial_status` value."""
  FINANCIAL_STATUS

  """Sort by the `fulfillment_status` value."""
  FULFILLMENT_STATUS

  """Sort by the `id` value."""
  ID

  """Sort by the `order_number` value."""
  ORDER_NUMBER

  """Sort by the `processed_at` value."""
  PROCESSED_AT

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE

  """Sort by the `total_price` value."""
  TOTAL_PRICE

  """Sort by the `updated_at` value."""
  UPDATED_AT
}

"A change that has been applied to an order.\n"
union OrderStagedChange = OrderStagedChangeAddCustomItem | OrderStagedChangeAddLineItemDiscount | OrderStagedChangeAddShippingLine | OrderStagedChangeAddVariant | OrderStagedChangeDecrementItem | OrderStagedChangeIncrementItem

"A change to the order representing the addition of a\ncustom line item. For example, you might want to add gift wrapping service\nas a custom line item.\n"
type OrderStagedChangeAddCustomItem {
  """
  The price of an individual item without any discounts applied. This value cannot be negative.
  """
  originalUnitPrice: MoneyV2!

  """
  The quantity of the custom item to add to the order. This value must be greater than zero.
  """
  quantity: Int!

  """The title of the custom item."""
  title: String!
}

"The discount applied to an item that was added during the current order edit.\n"
type OrderStagedChangeAddLineItemDiscount {
  """The description of the discount."""
  description: String!

  """A globally-unique identifier."""
  id: ID!

  """The pricing value of the discount."""
  value: PricingValue!
}

"A new [shipping line](https://shopify.dev/api/admin-graphql/latest/objects/shippingline)\nadded as part of an order edit.\n"
type OrderStagedChangeAddShippingLine {
  """The phone number at the shipping address."""
  phone: String

  "The shipping line's title that is shown to the buyer.\n"
  presentmentTitle: String

  """The price that applies to the shipping line."""
  price: MoneyV2!

  """The title of the shipping line."""
  title: String
}

"A change to the order representing the addition of an existing product variant.\n"
type OrderStagedChangeAddVariant {
  """The quantity of the product variant that was added."""
  quantity: Int!

  """The product variant that was added."""
  variant: ProductVariant!
}

"An auto-generated type for paginating through multiple OrderStagedChanges.\n"
type OrderStagedChangeConnection {
  """A list of edges."""
  edges: [OrderStagedChangeEdge!]!

  """A list of the nodes contained in OrderStagedChangeEdge."""
  nodes: [OrderStagedChange!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An removal of items from an existing line item on the order.\n"
type OrderStagedChangeDecrementItem {
  """The number of items removed."""
  delta: Int!

  """The original line item."""
  lineItem: LineItem!

  """The intention to restock the removed items."""
  restock: Boolean!
}

"An auto-generated type which holds one OrderStagedChange and a cursor during pagination.\n"
type OrderStagedChangeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OrderStagedChangeEdge."""
  node: OrderStagedChange!
}

"An addition of items to an existing line item on the order.\n"
type OrderStagedChangeIncrementItem {
  """The number of items added."""
  delta: Int!

  """The original line item."""
  lineItem: LineItem!
}

"A payment transaction in the context of an order.\n"
type OrderTransaction implements Node {
  """The masked account number associated with the payment method."""
  accountNumber: String

  """The amount of money."""
  amount: Money! @deprecated(reason: "Use `amountSet` instead")

  """
  The amount and currency of the transaction in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """The amount and currency of the transaction."""
  amountV2: MoneyV2! @deprecated(reason: "Use `amountSet` instead")

  """Authorization code associated with the transaction."""
  authorizationCode: String

  "The time when the authorization expires. This field is available only to stores on a Shopify Plus plan and is populated only for Shopify Payments authorizations.\n"
  authorizationExpiresAt: DateTime

  """Date and time when the transaction was created."""
  createdAt: DateTime!

  """A standardized error code, independent of the payment provider."""
  errorCode: OrderTransactionErrorCode

  "The transaction fees charged on the order transaction. Only present for Shopify Payments transactions.\n"
  fees: [TransactionFee!]!

  """
  The human-readable payment gateway name used to process the transaction.
  """
  formattedGateway: String

  """The payment gateway used to process the transaction."""
  gateway: String

  """A globally-unique identifier."""
  id: ID!

  """The kind of transaction."""
  kind: OrderTransactionKind!

  """Whether the transaction can be manually captured."""
  manuallyCapturable: Boolean!

  "Specifies the available amount to refund on the gateway.\nThis value is only available for transactions of type `SuggestedRefund`.\n"
  maximumRefundable: Money @deprecated(reason: "Use `maximumRefundableV2` instead")

  "Specifies the available amount with currency to refund on the gateway.\nThis value is only available for transactions of type `SuggestedRefund`.\n"
  maximumRefundableV2: MoneyV2

  """The associated order."""
  order: Order

  """
  The associated parent transaction, for example the authorization of a capture.
  """
  parentTransaction: OrderTransaction

  """The payment icon to display for the transaction."""
  paymentIcon: Image

  """
  The payment method used for the transaction. This value is `null` if the payment method is unknown.
  """
  paymentMethod: PaymentMethods @deprecated(reason: "Use `paymentIcon` instead")

  """Date and time when the transaction was processed."""
  processedAt: DateTime

  "The transaction receipt that the payment gateway attaches to the transaction.\nThe value of this field depends on which payment gateway processed the transaction.\n"
  receipt: String @deprecated(reason: "Use `receiptJson` instead")

  "The transaction receipt that the payment gateway attaches to the transaction.\nThe value of this field depends on which payment gateway processed the transaction.\n"
  receiptJson: JSON

  """The settlement currency."""
  settlementCurrency: CurrencyCode

  """
  The rate used when converting the transaction amount to settlement currency.
  """
  settlementCurrencyRate: Decimal

  "Contains all Shopify Payments information related to an order transaction. This field is available only to stores on a Shopify Plus plan.\n"
  shopifyPaymentsSet: ShopifyPaymentsTransactionSet

  """The status of this transaction."""
  status: OrderTransactionStatus!

  """Whether the transaction is a test transaction."""
  test: Boolean!

  "Specifies the available amount to capture on the gateway.\nOnly available when an amount is capturable or manually mark as paid.\n"
  totalUnsettled: Money @deprecated(reason: "Use `totalUnsettledSet` instead")

  "Specifies the available amount with currency to capture on the gateway in shop and presentment currencies.\nOnly available when an amount is capturable or manually mark as paid.\n"
  totalUnsettledSet: MoneyBag

  "Specifies the available amount with currency to capture on the gateway.\nOnly available when an amount is capturable or manually mark as paid.\n"
  totalUnsettledV2: MoneyV2 @deprecated(reason: "Use `totalUnsettledSet` instead")

  """
  Staff member who was logged into the Shopify POS device when the transaction was processed.
  """
  user: StaffMember
}

"An auto-generated type for paginating through multiple OrderTransactions.\n"
type OrderTransactionConnection {
  """A list of edges."""
  edges: [OrderTransactionEdge!]!

  """A list of the nodes contained in OrderTransactionEdge."""
  nodes: [OrderTransaction!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one OrderTransaction and a cursor during pagination.\n"
type OrderTransactionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OrderTransactionEdge."""
  node: OrderTransaction!
}

"""A standardized error code, independent of the payment provider."""
enum OrderTransactionErrorCode {
  """The payment method was invalid."""
  AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD

  """The maximum amount has been captured."""
  AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED

  """The maximum amount has been refunded."""
  AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED

  """The maximum of 10 authorizations has been captured for an order."""
  AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED

  """The maximum of 10 refunds has been processed for an order."""
  AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED

  """The order was canceled, which canceled all open authorizations."""
  AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED

  """The order was not confirmed within three hours."""
  AMAZON_PAYMENTS_STALE

  """Call the card issuer."""
  CALL_ISSUER

  """The card was declined."""
  CARD_DECLINED

  """There is an error in the gateway or merchant configuration."""
  CONFIG_ERROR

  """The card is expired."""
  EXPIRED_CARD

  """There was an unknown error with processing the payment."""
  GENERIC_ERROR

  """The address does not match the card number."""
  INCORRECT_ADDRESS

  """The CVC does not match the card number."""
  INCORRECT_CVC

  """The card number is incorrect."""
  INCORRECT_NUMBER

  """The entered PIN is incorrect."""
  INCORRECT_PIN

  """The ZIP or postal code does not match the card number."""
  INCORRECT_ZIP

  """The amount is either too high or too low for the provider."""
  INVALID_AMOUNT

  """The payment method is not available in the customer's country."""
  INVALID_COUNTRY

  """The format of the CVC is incorrect."""
  INVALID_CVC

  """The format of the expiry date is incorrect."""
  INVALID_EXPIRY_DATE

  """The format of the card number is incorrect."""
  INVALID_NUMBER

  """The payment method is momentarily unavailable."""
  PAYMENT_METHOD_UNAVAILABLE

  "The card has been reported as lost or stolen, and the card issuer has requested that the merchant keep the card and call the number on the back.\n"
  PICK_UP_CARD

  """There was an error while processing the payment."""
  PROCESSING_ERROR

  """A real card was used but the gateway was in test mode."""
  TEST_MODE_LIVE_CARD

  """
  The gateway or merchant configuration doesn't support a feature, such as network tokenization.
  """
  UNSUPPORTED_FEATURE
}

"""Specifies the information needed to create an order transaction."""
input OrderTransactionInput {
  """The amount of money for this transaction."""
  amount: Money!

  """The payment gateway to use for this transaction."""
  gateway: String!

  """The kind of transaction."""
  kind: OrderTransactionKind!

  """The ID of the order associated with the transaction."""
  orderId: ID!

  """
  The ID of the optional parent transaction, for example the authorization of a capture.
  """
  parentId: ID
}

"""The different kinds of order transactions."""
enum OrderTransactionKind {
  "An amount reserved against the cardholder's funding source.\nMoney does not change hands until the authorization is captured.\n"
  AUTHORIZATION

  """A transfer of the money that was reserved by an authorization."""
  CAPTURE

  "The money returned to the customer when they've paid too much during a cash transaction.\n"
  CHANGE

  """An authorization for a payment taken with an EMV credit card reader."""
  EMV_AUTHORIZATION

  "A partial or full return of captured funds to the cardholder.\nA refund can happen only after a capture is processed.\n"
  REFUND

  """An authorization and capture performed together in a single step."""
  SALE

  """A suggested refund transaction that can be used to create a refund."""
  SUGGESTED_REFUND

  """A cancelation of an authorization transaction."""
  VOID
}

"""The different states that an `OrderTransaction` can have."""
enum OrderTransactionStatus {
  """Awaiting a response."""
  AWAITING_RESPONSE

  """There was an error while processing the transaction."""
  ERROR

  """The transaction failed."""
  FAILURE

  """The transaction is pending."""
  PENDING

  """The transaction succeeded."""
  SUCCESS

  """The transaction status is unknown."""
  UNKNOWN
}

"""Return type for `orderUpdate` mutation."""
type OrderUpdatePayload {
  """The updated order."""
  order: Order

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"Returns information about pagination in a connection, in accordance with the\n[Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).\n"
type PageInfo {
  """The cursor corresponding to the last node in edges."""
  endCursor: String

  """Whether there are more pages to fetch following the current page."""
  hasNextPage: Boolean!

  """Whether there are any pages prior to the current page."""
  hasPreviousPage: Boolean!

  """The cursor corresponding to the first node in edges."""
  startCursor: String
}

"""All possible instrument outputs for Payment Mandates."""
union PaymentInstrument = VaultCreditCard | VaultPaypalBillingAgreement

"A payment instrument and the permission\nthe owner of the instrument gives to the merchant to debit it.\n"
type PaymentMandate implements Node {
  """The unique identifier of a payment mandate."""
  id: ID!

  """The outputs details of the payment instrument."""
  paymentInstrument: PaymentInstrument!
}

"""Some of the payment methods used in Shopify."""
enum PaymentMethods {
  AMERICAN_EXPRESS
  BITCOIN
  BOGUS
  DANKORT
  DINERS_CLUB
  DISCOVER
  DOGECOIN

  """The payment method for Elo payment."""
  ELO
  FORBRUGSFORENINGEN

  """The payment method for Interac payment."""
  INTERAC
  JCB
  LITECOIN
  MAESTRO
  MASTERCARD
  PAYPAL

  """The payment method for UnionPay payment."""
  UNIONPAY
  VISA
}

"""
Represents the payment schedule for a single payment defined in the payment terms.
"""
type PaymentSchedule implements Node {
  """Amount owed for this payment schedule."""
  amount: MoneyV2!

  """Date and time when the payment schedule is paid or fulfilled."""
  completedAt: DateTime

  """Date and time when the payment schedule is due."""
  dueAt: DateTime

  """A globally-unique identifier."""
  id: ID!

  """Date and time when the invoice is sent."""
  issuedAt: DateTime
}

"An auto-generated type for paginating through multiple PaymentSchedules.\n"
type PaymentScheduleConnection {
  """A list of edges."""
  edges: [PaymentScheduleEdge!]!

  """A list of the nodes contained in PaymentScheduleEdge."""
  nodes: [PaymentSchedule!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one PaymentSchedule and a cursor during pagination.\n"
type PaymentScheduleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PaymentScheduleEdge."""
  node: PaymentSchedule!
}

"""The input fields used to create a payment schedule for payment terms."""
input PaymentScheduleInput {
  """
  Specifies the date and time when the payment schedule is due. This field must be provided for fixed type payment terms.
  """
  dueAt: DateTime

  """
  Specifies the date and time that the payment schedule was issued. This field must be provided for net type payment terms.
  """
  issuedAt: DateTime
}

"""Settings related to payments."""
type PaymentSettings {
  """List of the digital wallets which the shop supports."""
  supportedDigitalWallets: [DigitalWallet!]!
}

"""Represents the payment terms for an order or draft order."""
type PaymentTerms implements Node {
  "Duration of payment terms in days based on the payment terms template used to create the payment terms.\n"
  dueInDays: Int

  """A globally-unique identifier."""
  id: ID!

  """Whether the payment terms have overdue payment schedules."""
  overdue: Boolean!

  """List of schedules for the payment terms."""
  paymentSchedules(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PaymentScheduleConnection!

  """
  The name of the payment terms template used to create the payment terms.
  """
  paymentTermsName: String!

  """The payment terms template type used to create the payment terms."""
  paymentTermsType: PaymentTermsType!

  """
  The payment terms name translated into the shop admin preferred language.
  """
  translatedName: String!
}

"""The input fields used to create a payment terms."""
input PaymentTermsCreateInput {
  """Specifies the payment schedules for the payment terms."""
  paymentSchedules: [PaymentScheduleInput!]

  """
  Specifies the payment terms template ID used to generate payment terms.
  """
  paymentTermsTemplateId: ID!
}

"""Return type for `paymentTermsCreate` mutation."""
type PaymentTermsCreatePayload {
  """The created payment terms."""
  paymentTerms: PaymentTerms

  """The list of errors that occurred from executing the mutation."""
  userErrors: [PaymentTermsCreateUserError!]!
}

"""An error that occurs during the execution of `PaymentTermsCreate`."""
type PaymentTermsCreateUserError implements DisplayableError {
  """The error code."""
  code: PaymentTermsCreateUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `PaymentTermsCreateUserError`.
"""
enum PaymentTermsCreateUserErrorCode {
  """An error occurred while creating payment terms."""
  PAYMENT_TERMS_CREATION_UNSUCCESSFUL
}

"""The input fields used to delete the payment terms."""
input PaymentTermsDeleteInput {
  """The ID of the payment terms being deleted."""
  paymentTermsId: ID!
}

"""Return type for `paymentTermsDelete` mutation."""
type PaymentTermsDeletePayload {
  """The deleted payment terms id."""
  deletedId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [PaymentTermsDeleteUserError!]!
}

"""An error that occurs during the execution of `PaymentTermsDelete`."""
type PaymentTermsDeleteUserError implements DisplayableError {
  """The error code."""
  code: PaymentTermsDeleteUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `PaymentTermsDeleteUserError`.
"""
enum PaymentTermsDeleteUserErrorCode {
  """An error occurred while deleting payment terms."""
  PAYMENT_TERMS_DELETE_UNSUCCESSFUL
}

"""The input fields used to create a payment terms."""
input PaymentTermsInput {
  """Specifies the payment schedules for the payment terms."""
  paymentSchedules: [PaymentScheduleInput!]

  """
  Specifies the payment terms template ID used to generate payment terms.
  """
  paymentTermsTemplateId: ID
}

"""Represents the payment terms template object."""
type PaymentTermsTemplate implements Node {
  """The description of the payment terms template."""
  description: String!

  """
  The number of days between the issued date and due date if this is the net type of payment terms.
  """
  dueInDays: Int

  """A globally-unique identifier."""
  id: ID!

  """The name of the payment terms template."""
  name: String!

  """The type of the payment terms template."""
  paymentTermsType: PaymentTermsType!

  """The translated payment terms template name."""
  translatedName: String!
}

"""The type of a payment terms or a payment terms template."""
enum PaymentTermsType {
  """
  The payment terms or payment terms template is fixed type (due on a specified date).
  """
  FIXED

  """
  The payment terms or payment terms template is net type (due a number of days after issue).
  """
  NET

  """The payment terms or payment terms template is due on receipt."""
  RECEIPT

  """The type of the payment terms or payment terms template is unknown."""
  UNKNOWN
}

"""The input fields used to update the payment terms."""
input PaymentTermsUpdateInput {
  """The attributes used to update the payment terms."""
  paymentTermsAttributes: PaymentTermsInput!

  """The ID of the payment terms being updated."""
  paymentTermsId: ID!
}

"""Return type for `paymentTermsUpdate` mutation."""
type PaymentTermsUpdatePayload {
  """The updated payment terms."""
  paymentTerms: PaymentTerms

  """The list of errors that occurred from executing the mutation."""
  userErrors: [PaymentTermsUpdateUserError!]!
}

"""An error that occurs during the execution of `PaymentTermsUpdate`."""
type PaymentTermsUpdateUserError implements DisplayableError {
  """The error code."""
  code: PaymentTermsUpdateUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `PaymentTermsUpdateUserError`.
"""
enum PaymentTermsUpdateUserErrorCode {
  """An error occurred while updating payment terms."""
  PAYMENT_TERMS_UPDATE_UNSUCCESSFUL
}

"""Represents a valid PayPal Express subscriptions gateway status."""
enum PaypalExpressSubscriptionsGatewayStatus {
  """The status is disabled."""
  DISABLED

  """The status is enabled."""
  ENABLED

  """The status is pending."""
  PENDING
}

"Represents a price list, including information about related prices and eligibility rules.\nYou can use price lists to specify either fixed prices or adjusted relative prices that\noverride initial product variant prices. Price lists are applied to customers\nusing context rules, which determine price list eligibility.\n\n  For more information on price lists, refer to\n  [*Support different pricing models using the price list API*](https://shopify.dev/api/examples/product-price-lists#update-an-existing-price-list).\n"
type PriceList implements Node {
  """
  A set of facts about the customer, used to determine price list eligibility.
  """
  contextRule: PriceListContextRule

  """The currency for fixed prices associated with this price list."""
  currency: CurrencyCode!

  """A globally-unique identifier."""
  id: ID!

  """
  The unique name of the price list, used as a human-readable identifier.
  """
  name: String!

  """Relative adjustments to other prices."""
  parent: PriceListParent

  """A list of prices associated with the price list."""
  prices(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """
    The origin of this price, either fixed (defined on the price list)
                   or relative (calculated using an adjustment via a price list parent configuration).
    """
    originType: PriceListPriceOriginType

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PriceListPriceConnection!
}

"The type and value of a price list adjustment.\n\nFor more information on price lists, refer to\n[Support different pricing models using the price list API](https://shopify.dev/api/examples/product-price-lists#price-lists).\n"
type PriceListAdjustment {
  """The type of price adjustment, such as percentage increase or decrease."""
  type: PriceListAdjustmentType!

  "The value of price adjustment, where positive numbers reduce the prices and negative numbers\nincrease them.\n"
  value: Float!
}

"""The input fields to set a price list adjustment."""
input PriceListAdjustmentInput {
  """The type of price adjustment, such as percentage increase or decrease."""
  type: PriceListAdjustmentType!

  """The value of the price adjustment as specified by the `type`."""
  value: Float!
}

"""Represents a percentage price adjustment type."""
enum PriceListAdjustmentType {
  """Percentage decrease type. Prices will have a lower value."""
  PERCENTAGE_DECREASE

  """Percentage increase type. Prices will have a higher value."""
  PERCENTAGE_INCREASE
}

"An auto-generated type for paginating through multiple PriceLists.\n"
type PriceListConnection {
  """A list of edges."""
  edges: [PriceListEdge!]!

  """A list of the nodes contained in PriceListEdge."""
  nodes: [PriceList!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"The input field used to filter price lists based on context.\nFor example, you can specify the country code so that the filtered price lists only apply to customers visiting from a specific country.\n"
input PriceListContext {
  """The code of the country that the price list applies to."""
  country: CountryCode
}

"Facts about the customer that was used to determine the price list eligibility.\nFor example, if the `PriceListContextRule` is for a US market, then the price list will be eligible to all customers in the US.\nFor more information on price lists, refer to\n[Support different pricing models using the price list API](https://shopify.dev/api/examples/product-price-lists#price-lists).\n"
type PriceListContextRule {
  """
  A list of two letter country codes that determines price list eligibility.
  """
  countries: [CountryCode!]!

  """The associated market."""
  market: Market
}

"The input fields to set the context that a price list applies to.\nFor example, the price list might apply to a specific market.\n"
input PriceListContextRuleInput {
  """The market that this price list applies to."""
  marketId: ID
}

"""The input fields to create a price list."""
input PriceListCreateInput {
  """
  A set of facts about the customer used to determine price list eligibility.
  """
  contextRule: PriceListContextRuleInput

  """
  Three letter currency code for fixed prices associated with this price list.
  """
  currency: CurrencyCode!

  """
  The unique name of the price list, used as a human-readable identifier.
  """
  name: String!

  """Relative adjustments to other prices."""
  parent: PriceListParentCreateInput!
}

"""Return type for `priceListCreate` mutation."""
type PriceListCreatePayload {
  """The newly created price list."""
  priceList: PriceList

  """The list of errors that occurred from executing the mutation."""
  userErrors: [PriceListUserError!]!
}

"""Return type for `priceListDelete` mutation."""
type PriceListDeletePayload {
  """The ID of the deleted price list."""
  deletedId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [PriceListUserError!]!
}

"An auto-generated type which holds one PriceList and a cursor during pagination.\n"
type PriceListEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PriceListEdge."""
  node: PriceList!
}

"""Return type for `priceListFixedPricesAdd` mutation."""
type PriceListFixedPricesAddPayload {
  """
  The list of fixed prices that were added to or updated in the price list.
  """
  prices: [PriceListPrice!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [PriceListPriceUserError!]!
}

"""Return type for `priceListFixedPricesDelete` mutation."""
type PriceListFixedPricesDeletePayload {
  """
  A list of product variant IDs whose fixed prices were removed from the price list.
  """
  deletedFixedPriceVariantIds: [ID!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [PriceListPriceUserError!]!
}

"Represents relative adjustments from one price list to other prices.\n  You can use a `PriceListParent` to specify an adjusted relative price using a percentage-based\n  adjustment. Adjusted prices work in conjunction with exchange rules and rounding.\n\n  [Adjustment types](https://shopify.dev/api/admin-graphql/latest/enums/pricelistadjustmenttype)\n  support both percentage increases and decreases.\n"
type PriceListParent {
  """A price list adjustment."""
  adjustment: PriceListAdjustment!
}

"""The input fields to create a price list adjustment."""
input PriceListParentCreateInput {
  """The relative adjustments to other prices."""
  adjustment: PriceListAdjustmentInput!
}

"""The input fields used to update a price list's adjustment."""
input PriceListParentUpdateInput {
  """The relative adjustments to other prices.."""
  adjustment: PriceListAdjustmentInput!
}

"""
Represents information about pricing for a product variant
        as defined on a price list, such as the price, compare at price, and origin type. You can use a PriceListPrice to specify a fixed price for a specific product variant.
"""
type PriceListPrice {
  """The compare-at price of the product variant on this price list."""
  compareAtPrice: MoneyV2

  "The origin of a price, either fixed (defined on the price list) or relative (calculated using a price list adjustment configuration).\n"
  originType: PriceListPriceOriginType!

  """The price of the product variant on this price list."""
  price: MoneyV2!

  """The product variant associated with this price."""
  variant: ProductVariant!
}

"An auto-generated type for paginating through multiple PriceListPrices.\n"
type PriceListPriceConnection {
  """A list of edges."""
  edges: [PriceListPriceEdge!]!

  """A list of the nodes contained in PriceListPriceEdge."""
  nodes: [PriceListPrice!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one PriceListPrice and a cursor during pagination.\n"
type PriceListPriceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PriceListPriceEdge."""
  node: PriceListPrice!
}

"""
Provides the fields and values to use when creating or updating a fixed price list price.
"""
input PriceListPriceInput {
  """The compare-at price of the product variant on this price list."""
  compareAtPrice: MoneyInput

  """The price of the product variant on this price list."""
  price: MoneyInput!

  """The product variant ID associated with the price list price."""
  variantId: ID!
}

"Represents the origin of a price, either fixed (defined on the price list) or relative (calculated using a price list adjustment configuration).\n"
enum PriceListPriceOriginType {
  """The price is defined on the price list."""
  FIXED

  """The price is relative to the adjustment type and value."""
  RELATIVE
}

"""An error for a failed price list price operation."""
type PriceListPriceUserError implements DisplayableError {
  """The error code."""
  code: PriceListPriceUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `PriceListPriceUserError`.
"""
enum PriceListPriceUserErrorCode {
  """The input value is blank."""
  BLANK

  """The specified currency doesn't match the price list's currency."""
  PRICE_LIST_CURRENCY_MISMATCH

  """The price list doesn't exist."""
  PRICE_LIST_NOT_FOUND

  """Only fixed prices can be deleted."""
  PRICE_NOT_FIXED

  """A fixed price for the specified product variant doesn't exist."""
  VARIANT_NOT_FOUND
}

"""The set of valid sort keys for the PriceList query."""
enum PriceListSortKeys {
  """Sort by the `id` value."""
  ID

  """Sort by the `name` value."""
  NAME

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"""The input fields used to update a price list."""
input PriceListUpdateInput {
  """
  A set of facts about the customer used to determine price list eligibility.
  """
  contextRule: PriceListContextRuleInput

  """
  The three-letter currency code for fixed prices associated with this price list.
  """
  currency: CurrencyCode

  """
  The unique name of the price list, used as a human-readable identifier.
  """
  name: String

  """Relative adjustments to other prices."""
  parent: PriceListParentUpdateInput
}

"""Return type for `priceListUpdate` mutation."""
type PriceListUpdatePayload {
  """The updated price list."""
  priceList: PriceList

  """The list of errors that occurred from executing the mutation."""
  userErrors: [PriceListUserError!]!
}

"""Error codes for failed contextual pricing operations."""
type PriceListUserError implements DisplayableError {
  """The error code."""
  code: PriceListUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""Possible error codes that can be returned by `PriceListUserError`."""
enum PriceListUserErrorCode {
  """A price list context rule cannot have more than one country."""
  CONTEXT_RULE_COUNTRIES_LIMIT

  """A price list for this country is already taken."""
  CONTEXT_RULE_COUNTRY_TAKEN

  """Only one context rule option may be specified."""
  CONTEXT_RULE_LIMIT_ONE_OPTION

  """
  Cannot save the price list with context rule because the limit of context rules per shop was reached.
  """
  CONTEXT_RULE_LIMIT_REACHED

  """The specified market wasn't found."""
  CONTEXT_RULE_MARKET_NOT_FOUND

  """A price list for this market is already taken."""
  CONTEXT_RULE_MARKET_TAKEN

  """A country in a context rule must use a valid currency."""
  COUNTRY_CURRENCY_MISMATCH

  """A price list’s currency must be of the pricing rule’s country."""
  CURRENCY_COUNTRY_MISMATCH

  """A price list’s currency must be the market currency."""
  CURRENCY_MARKET_MISMATCH

  """
  The price list currency is not supported by the shop's payment gateway.
  """
  CURRENCY_NOT_SUPPORTED

  """
  The adjustment value must be a positive value and not be greater than 100% for `type` `PERCENTAGE_DECREASE` and not be greater than 1000% for `type` `PERCENTAGE_INCREASE`.
  """
  INVALID_ADJUSTMENT_VALUE

  """The context rule's market does not use the price list currency."""
  MARKET_CURRENCY_MISMATCH

  """Cannot create price list for a primary market."""
  PRICE_LIST_NOT_ALLOWED_FOR_PRIMARY_MARKET

  """The specified price list doesn't exist."""
  PRICE_LIST_NOT_FOUND

  """The input value is already taken."""
  TAKEN
}

"""
Price rules are a set of conditions, including entitlements and prerequisites, that must be met in order for a discount code to apply. We recommend using the [Discount types](https://shopify.dev/api/examples/discounts) available in the GraphQL Admin API, which are intended to replace the GraphQL `PriceRule` object and REST Admin `PriceRule` and `DiscountCode` resources.
"""
type PriceRule implements CommentEventSubject & HasEvents & LegacyInteroperability & Node {
  """
  The maximum number of times that the price rule can be allocated onto an order.
  """
  allocationLimit: Int

  """
  The method by which the price rule's value is allocated to its entitled items.
  """
  allocationMethod: PriceRuleAllocationMethod!

  """The application that created the price rule."""
  app: App

  """Determines which discount classes the discount can combine with."""
  combinesWith: DiscountCombinesWith!

  """The date and time when the price rule was created."""
  createdAt: DateTime!

  """The customers that can use this price rule."""
  customerSelection: PriceRuleCustomerSelection!

  """The class of the discount for combining purposes."""
  discountClass: DiscountClass!

  """List of the price rule's discount codes."""
  discountCodes(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `times_used`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: DiscountCodeSortKeys = ID
  ): PriceRuleDiscountCodeConnection!

  """How many discount codes associated with the price rule."""
  discountCodesCount: Int!

  """
  The date and time when the price rule ends. For open-ended price rules, use `null`.
  """
  endsAt: DateTime

  """
  Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
  """
  entitlementToPrerequisiteQuantityRatio: PriceRuleEntitlementToPrerequisiteQuantityRatio @deprecated(reason: "Use `prerequisiteToEntitlementQuantityRatio` instead")

  """The paginated list of events associated with the price rule."""
  events(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `comments`\n - `created_at`\n - `subject_type`\n - `verb`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: EventSortKeys = ID
  ): EventConnection!

  """A list of the price rule's features."""
  features: [PriceRuleFeature!]!

  """Indicates whether there are any timeline comments on the price rule."""
  hasTimelineComment: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The items to which the price rule applies."""
  itemEntitlements: PriceRuleItemEntitlements!

  """The items required for the price rule to be applicable."""
  itemPrerequisites: PriceRuleLineItemPrerequisites!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """Whether the price rule can be applied only once per customer."""
  oncePerCustomer: Boolean!

  """
  The number of the entitled items must fall within this range for the price rule to be applicable.
  """
  prerequisiteQuantityRange: PriceRuleQuantityRange

  """
  The shipping cost must fall within this range for the price rule to be applicable.
  """
  prerequisiteShippingPriceRange: PriceRuleMoneyRange

  """
  The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
  """
  prerequisiteSubtotalRange: PriceRuleMoneyRange

  """
  Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
  """
  prerequisiteToEntitlementQuantityRatio: PriceRulePrerequisiteToEntitlementQuantityRatio

  """URLs that can be used to share the discount."""
  shareableUrls: [PriceRuleShareableUrl!]!

  """The shipping lines to which the price rule applies."""
  shippingEntitlements: PriceRuleShippingLineEntitlements!

  """The date and time when the price rule starts."""
  startsAt: DateTime!

  """The status of the price rule."""
  status: PriceRuleStatus!

  """A detailed summary of the price rule."""
  summary: String

  """
  The type of lines (line_item or shipping_line) to which the price rule applies.
  """
  target: PriceRuleTarget!

  """The title of the price rule."""
  title: String!

  """The total sales from orders where the price rule was used."""
  totalSales: MoneyV2

  """A list of the price rule's features."""
  traits: [PriceRuleTrait!]! @deprecated(reason: "Use `features` instead")

  """
  The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count.
  """
  usageCount: Int!

  """The maximum number of times that the price rule can be used in total."""
  usageLimit: Int

  """A time period during which a price rule is applicable."""
  validityPeriod: PriceRuleValidityPeriod!

  """The value of the price rule."""
  value: PriceRuleValue! @deprecated(reason: "Use `valueV2` instead")

  """The value of the price rule."""
  valueV2: PricingValue!
}

"""Return type for `priceRuleActivate` mutation."""
type PriceRuleActivatePayload {
  """The activated price rule."""
  priceRule: PriceRule

  """The list of errors that occurred from executing the mutation."""
  priceRuleUserErrors: [PriceRuleUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead")
}

"""
The method by which the price rule's value is allocated to its entitled items.
"""
enum PriceRuleAllocationMethod {
  """The value will be applied once across the entitled items."""
  ACROSS

  """The value will be applied to each of the entitled items."""
  EACH
}

"An auto-generated type for paginating through multiple PriceRules.\n"
type PriceRuleConnection {
  """A list of edges."""
  edges: [PriceRuleEdge!]!

  """A list of the nodes contained in PriceRuleEdge."""
  nodes: [PriceRule!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `priceRuleCreate` mutation."""
type PriceRuleCreatePayload {
  """The newly created price rule."""
  priceRule: PriceRule

  """The newly created discount code."""
  priceRuleDiscountCode: PriceRuleDiscountCode

  """The list of errors that occurred from executing the mutation."""
  priceRuleUserErrors: [PriceRuleUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead")
}

"""A selection of customers for whom the price rule applies."""
type PriceRuleCustomerSelection {
  """List of customers to whom the price rule applies."""
  customers(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `accepts_marketing`\n - `country`\n - `customer_date`\n - `email`\n - `last_abandoned_order_date`\n - `order_date`\n - `orders_count`\n - `phone`\n - `state`\n - `tag`\n - `tag_not`\n - `total_spent`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: CustomerSortKeys = ID
  ): CustomerConnection!

  """Whether the price rule applies to all customers."""
  forAllCustomers: Boolean!

  """
  A list of customer segments that contain the customers who can use the price rule.
  """
  segments: [Segment!]!
}

"""Specifies the input fields to update a price rule customer selection."""
input PriceRuleCustomerSelectionInput {
  """
  List of customers to add to the current list of customers to whom the price rule applies. `savedSearchIds` must be empty.
  """
  customerIdsToAdd: [ID!]

  """
  A list of customers to remove from the current list of customers to whom the price rule applies.
  """
  customerIdsToRemove: [ID!]

  """Whether the price rule applies to all customers."""
  forAllCustomers: Boolean = false

  """
  List of customer segments that contain the customers to whom the price rule applies. No single customer IDs may be present.
  """
  segmentIds: [ID!]
}

"""Return type for `priceRuleDeactivate` mutation."""
type PriceRuleDeactivatePayload {
  """The deactivated price rule."""
  priceRule: PriceRule

  """The list of errors that occurred from executing the mutation."""
  priceRuleUserErrors: [PriceRuleUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead")
}

"""Return type for `priceRuleDelete` mutation."""
type PriceRuleDeletePayload {
  """The id price of the deleted price rule."""
  deletedPriceRuleId: ID

  """The list of errors that occurred from executing the mutation."""
  priceRuleUserErrors: [PriceRuleUserError!]!

  """The shop of the deleted price rule."""
  shop: Shop!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead")
}

"""A discount code of a price rule."""
type PriceRuleDiscountCode implements Node {
  """The application that created the discount code."""
  app: App

  """The code to apply the discount."""
  code: String!

  """A globally-unique identifier."""
  id: ID!

  """
  The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count.
  """
  usageCount: Int!
}

"An auto-generated type for paginating through multiple PriceRuleDiscountCodes.\n"
type PriceRuleDiscountCodeConnection {
  """A list of edges."""
  edges: [PriceRuleDiscountCodeEdge!]!

  """A list of the nodes contained in PriceRuleDiscountCodeEdge."""
  nodes: [PriceRuleDiscountCode!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `priceRuleDiscountCodeCreate` mutation."""
type PriceRuleDiscountCodeCreatePayload {
  """The updated price rule."""
  priceRule: PriceRule

  """The newly created discount code."""
  priceRuleDiscountCode: PriceRuleDiscountCode

  """The list of errors that occurred from executing the mutation."""
  priceRuleUserErrors: [PriceRuleUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead")
}

"An auto-generated type which holds one PriceRuleDiscountCode and a cursor during pagination.\n"
type PriceRuleDiscountCodeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PriceRuleDiscountCodeEdge."""
  node: PriceRuleDiscountCode!
}

"""Specifies the input fields to manipulate a discount code."""
input PriceRuleDiscountCodeInput {
  """The code to use the discount."""
  code: String
}

"""Return type for `priceRuleDiscountCodeUpdate` mutation."""
type PriceRuleDiscountCodeUpdatePayload {
  """The updated price rule."""
  priceRule: PriceRule

  """The updated discount code."""
  priceRuleDiscountCode: PriceRuleDiscountCode

  """The list of errors that occurred from executing the mutation."""
  priceRuleUserErrors: [PriceRuleUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead")
}

"An auto-generated type which holds one PriceRule and a cursor during pagination.\n"
type PriceRuleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PriceRuleEdge."""
  node: PriceRule!
}

"""
Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
"""
type PriceRuleEntitlementToPrerequisiteQuantityRatio {
  """The quantity of entitled items in the ratio."""
  entitlementQuantity: Int!

  """The quantity of prerequisite items in the ratio."""
  prerequisiteQuantity: Int!
}

"""
Specifies the quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
"""
input PriceRuleEntitlementToPrerequisiteQuantityRatioInput {
  """The quantity of entitled items in the ratio."""
  entitlementQuantity: Int

  """The quantity of prerequisite items in the ratio."""
  prerequisiteQuantity: Int
}

"""Possible error codes that could be returned by a price rule mutation."""
enum PriceRuleErrorCode {
  """
  The allocation method must be "across" for the provided target selection.
  """
  ALLOCATION_METHOD_MUST_BE_ACROSS_FOR_GIVEN_TARGET_SELECTION

  """
  The discount must apply on either one-time purchase or subscription items, or both.
  """
  APPLIES_ON_NOTHING

  """The input value is blank."""
  BLANK
  BOGO_INVALID_TARGET_SELECTION
  BOGO_INVALID_TARGET_TYPE
  BOGO_INVALID_VALUE_TYPE
  BOTH_CUSTOMER_AND_SAVED_SEARCH_PREREQUISITES_SELECTED

  """Cannot have both prerequisite customers and prerequisite segments."""
  BOTH_CUSTOMER_AND_SEGMENT_PREREQUISITES_SELECTED

  """Cannot have both saved searches and segments prerequisites."""
  BOTH_SAVED_SEARCH_AND_SEGMENT_PREREQUISITES_SELECTED
  CANNOT_ENTITLE_COLLECTIONS_WITH_PRODUCTS_OR_VARIANTS
  CANNOT_PREREQUISITE_COLLECTION_WITH_PRODUCT_OR_VARIANTS
  CUSTOMER_PREREQUISITES_EXCEEDED_MAX
  CUSTOMER_PREREQUISITES_INVALID_SELECTION
  CUSTOMER_PREREQUISITES_MISSING

  """Duplicate customer prerequisite id present."""
  CUSTOMER_PREREQUISITE_DUPLICATE
  CUSTOMER_SAVED_SEARCH_DUPLICATE
  CUSTOMER_SAVED_SEARCH_EXCEEDED_MAX
  CUSTOMER_SAVED_SEARCH_INVALID

  """Customer segment prerequisites exceeded max number."""
  CUSTOMER_SEGMENT_EXCEEDED_MAX

  """Customer segment prerequisite invalid id."""
  CUSTOMER_SEGMENT_INVALID

  """Duplicate customer segment prerequisite id present."""
  CUSTOMER_SEGMENT_PREREQUISITE_DUPLICATE
  DISCOUNT_CODE_DUPLICATE

  """The discount end date must be after the start date."""
  END_DATE_BEFORE_START_DATE

  """The input value should be equal to the value allowed."""
  EQUAL_TO

  """Exceeding the maximum number is allowed."""
  EXCEEDED_MAX

  """The input value should be greater than the minimum allowed value."""
  GREATER_THAN

  """
  The input value should be greater than or equal to the minimum value allowed.
  """
  GREATER_THAN_OR_EQUAL_TO

  """Unexpected internal error happened."""
  INTERNAL_ERROR

  """The input value is invalid."""
  INVALID
  INVALID_TARGET_TYPE_PREREQUISITE_SHIPPING_PRICE_RANGE
  ITEM_ENTITLEMENTS_DUPLICATE_COLLECTION
  ITEM_ENTITLEMENTS_DUPLICATE_PRODUCT
  ITEM_ENTITLEMENTS_DUPLICATE_VARIANT
  ITEM_ENTITLEMENTS_EXCEEDED_MAX_COLLECTION
  ITEM_ENTITLEMENTS_EXCEEDED_MAX_PRODUCT
  ITEM_ENTITLEMENTS_EXCEEDED_MAX_VARIANT
  ITEM_ENTITLEMENTS_INVALID_COLLECTION
  ITEM_ENTITLEMENTS_INVALID_PRODUCT
  ITEM_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION
  ITEM_ENTITLEMENTS_INVALID_VARIANT
  ITEM_ENTITLEMENTS_MISSING
  ITEM_ENTITLEMENT_INVALID_TYPE
  ITEM_PREREQUISITES_DUPLICATE_COLLECTION
  ITEM_PREREQUISITES_DUPLICATE_PRODUCT
  ITEM_PREREQUISITES_DUPLICATE_VARIANT
  ITEM_PREREQUISITES_EXCEEDED_MAX
  ITEM_PREREQUISITES_INVALID_COLLECTION
  ITEM_PREREQUISITES_INVALID_PRODUCT
  ITEM_PREREQUISITES_INVALID_TYPE
  ITEM_PREREQUISITES_INVALID_VARIANT
  ITEM_PREREQUISITES_MISSING
  ITEM_PREREQUISITES_MUST_BE_EMPTY

  """The input value should be less than the maximum value allowed."""
  LESS_THAN

  """
  The input value should be less than or equal to the maximum value allowed.
  """
  LESS_THAN_OR_EQUAL_TO

  """Missing a required argument."""
  MISSING_ARGUMENT

  """
  The recurring cycle limit must be 1 when a discount does not apply on subscription items.
  """
  MULTIPLE_RECURRING_CYCLE_LIMIT_FOR_NON_SUBSCRIPTION_ITEMS

  """
  Only one of the minimum subtotal or minimum quantity condition can be defined.
  """
  PREREQUISITE_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT

  """The allocation limit must be a non-zero positive number."""
  PRICE_RULE_ALLOCATION_LIMIT_IS_ZERO

  """
  The allocation limit can only be set on buy-one-get-one type discounts.
  """
  PRICE_RULE_ALLOCATION_LIMIT_ON_NON_BOGO

  """The number of discount codes in the shop has reached its limit."""
  PRICE_RULE_EXCEEDED_MAX_DISCOUNT_CODE

  """The percentage value must be between 0 and -100."""
  PRICE_RULE_PERCENTAGE_VALUE_OUTSIDE_RANGE
  SHIPPING_ENTITLEMENTS_DUPLICATE_COUNTRY
  SHIPPING_ENTITLEMENTS_EXCEEDED_MAX
  SHIPPING_ENTITLEMENTS_INVALID_COUNTRY
  SHIPPING_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION
  SHIPPING_ENTITLEMENTS_MISSING
  SHIPPING_ENTITLEMENTS_UNSUPPORTED_DESTINATION_TYPE

  """The number of discounts in the shop has reached its limit."""
  SHOP_EXCEEDED_MAX_PRICE_RULES

  """The input value is already taken."""
  TAKEN

  """The input value is too long."""
  TOO_LONG

  """Too many arguments provided."""
  TOO_MANY_ARGUMENTS

  """The input value is too short."""
  TOO_SHORT
  VARIANT_ALREADY_ENTITLED_THROUGH_PRODUCT
}

"""The list of features that can be supported by a price rule."""
enum PriceRuleFeature {
  """The price rule supports bulk discounts."""
  BULK

  """The price rule supports Buy X, Get Y (BXGY) discounts."""
  BUY_ONE_GET_ONE

  """
  The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit.
  """
  BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT

  """The price rule supports discounts that require a quantity."""
  QUANTITY_DISCOUNTS

  """The price rule targets specific customers."""
  SPECIFIC_CUSTOMERS
}

"""The value of a fixed amount price rule."""
type PriceRuleFixedAmountValue {
  """The monetary value of the price rule."""
  amount: Money!
}

"""Specifies the input fields to manipulate a price rule."""
input PriceRuleInput {
  """
  The maximum number of times that the price rule can be allocated onto an order.
  """
  allocationLimit: Int

  """
  The method by which the price rule's value is allocated to its entitled items.
  """
  allocationMethod: PriceRuleAllocationMethod

  """Determines which discount classes the discount can combine with."""
  combinesWith: DiscountCombinesWithInput

  """The customers that can use this price rule."""
  customerSelection: PriceRuleCustomerSelectionInput

  """The items to which the price rule applies."""
  itemEntitlements: PriceRuleItemEntitlementsInput

  """The items required for the price rule to be applicable."""
  itemPrerequisites: PriceRuleItemPrerequisitesInput

  """Whether the price rule can be applied only once per customer."""
  oncePerCustomer: Boolean = false

  """
  The number of the entitled items must fall within this range for the price rule to be applicable.
  """
  prerequisiteQuantityRange: PriceRuleQuantityRangeInput

  """
  The shipping cost must fall within this range for the price rule to be applicable.
  """
  prerequisiteShippingPriceRange: PriceRuleMoneyRangeInput

  """
  The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
  """
  prerequisiteSubtotalRange: PriceRuleMoneyRangeInput

  """
  Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
  """
  prerequisiteToEntitlementQuantityRatio: PriceRulePrerequisiteToEntitlementQuantityRatioInput

  """The shipping lines to which the price rule applies."""
  shippingEntitlements: PriceRuleShippingEntitlementsInput

  """
  The type of lines (line_item or shipping_line) to which the price rule applies.
  """
  target: PriceRuleTarget

  """Title of the price rule."""
  title: String

  """The maximum number of times that the price rule can be used in total."""
  usageLimit: Int

  """PriceRuleValidityPeriod for the price rule."""
  validityPeriod: PriceRuleValidityPeriodInput

  """The value of the price rule."""
  value: PriceRuleValueInput
}

"""
The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned.
"""
type PriceRuleItemEntitlements {
  """The collections to which the price rule applies."""
  collections(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CollectionConnection!

  """The product variants to which the price rule applies."""
  productVariants(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductVariantConnection!

  """The products to which the price rule applies."""
  products(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductConnection!

  """Whether the price rule applies to all line items."""
  targetAllLineItems: Boolean!
}

"""
Specifies the input fields to update a price rule line item entitlement.
"""
input PriceRuleItemEntitlementsInput {
  """The collections to which the price rule applies."""
  collectionIds: [ID!]

  """The products to which the price rule applies."""
  productIds: [ID!]

  """The product variants to which the price rule applies."""
  productVariantIds: [ID!]

  """Whether the price rule applies to all items."""
  targetAllLineItems: Boolean = false
}

"""
Specifies the input fields to update a price rule's item prerequisites.
"""
input PriceRuleItemPrerequisitesInput {
  """The collections needed for the price rule to be applied."""
  collectionIds: [ID!]

  """The products needed for the price rule to be applied."""
  productIds: [ID!]

  """The product variants needed for the price rule to be applied."""
  productVariantIds: [ID!]
}

"""
Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination.
"""
type PriceRuleLineItemPrerequisites {
  """The collections required for the price rule to be applicable."""
  collections(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CollectionConnection!

  """The product variants required for the price rule to be applicable."""
  productVariants(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductVariantConnection!

  """The products required for the price rule to be applicable."""
  products(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductConnection!
}

"""A money range within which the price rule is applicable."""
type PriceRuleMoneyRange {
  """The lower bound of the money range."""
  greaterThan: Money

  """The lower bound or equal of the money range."""
  greaterThanOrEqualTo: Money

  """The upper bound of the money range."""
  lessThan: Money

  """The upper bound or equal of the money range."""
  lessThanOrEqualTo: Money
}

"Specifies the input fields to update the money range within which the price rule is applicable.\n"
input PriceRuleMoneyRangeInput {
  """The lower bound of the money range."""
  greaterThan: Money

  """The lower or equal bound of the money range."""
  greaterThanOrEqualTo: Money

  """The upper bound of the money range."""
  lessThan: Money

  """The upper or equal bound of the money range."""
  lessThanOrEqualTo: Money
}

"""The value of a percent price rule."""
type PriceRulePercentValue {
  """The percent value of the price rule."""
  percentage: Float!
}

"""
Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
"""
type PriceRulePrerequisiteToEntitlementQuantityRatio {
  """The quantity of entitled items in the ratio."""
  entitlementQuantity: Int!

  """The quantity of prerequisite items in the ratio."""
  prerequisiteQuantity: Int!
}

"""
Specifies the quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
"""
input PriceRulePrerequisiteToEntitlementQuantityRatioInput {
  """The quantity of entitled items in the ratio."""
  entitlementQuantity: Int

  """The quantity of prerequisite items in the ratio."""
  prerequisiteQuantity: Int
}

"""A quantity range within which the price rule is applicable."""
type PriceRuleQuantityRange {
  """The lower bound of the quantity range."""
  greaterThan: Int

  """The lower bound or equal of the quantity range."""
  greaterThanOrEqualTo: Int

  """The upper bound of the quantity range."""
  lessThan: Int

  """The upper bound or equal of the quantity range."""
  lessThanOrEqualTo: Int
}

"Specifies the input fields to update the quantity range within which the price rule is applicable.\n"
input PriceRuleQuantityRangeInput {
  """The lower bound of the quantity range."""
  greaterThan: Int

  """The lower or equal bound of the quantity range."""
  greaterThanOrEqualTo: Int

  """The upper bound of the quantity range."""
  lessThan: Int

  """The upper or equal bound of the quantity range."""
  lessThanOrEqualTo: Int
}

"""Shareable URL for the discount code associated with the price rule."""
type PriceRuleShareableUrl {
  """
  The image URL of the item (product or collection) to which the discount applies.
  """
  targetItemImage: Image

  """The type of page that's associated with the URL."""
  targetType: PriceRuleShareableUrlTargetType!

  """The title of the page that's associated with the URL."""
  title: String!

  """The URL for the discount code."""
  url: URL!
}

"""The type of page where a shareable price rule URL lands."""
enum PriceRuleShareableUrlTargetType {
  """The URL lands on a collection page."""
  COLLECTION

  """The URL lands on a home page."""
  HOME

  """The URL lands on a product page."""
  PRODUCT
}

"""
Specifies the input fields to update a price rule shipping entitlement.
"""
input PriceRuleShippingEntitlementsInput {
  """The codes for the countries to which the price rule applies to."""
  countryCodes: [CountryCode!]

  """
  Whether the price rule is applicable to countries that have not been defined in the shop's shipping zones.
  """
  includeRestOfWorld: Boolean = false

  """Whether the price rule applies to all shipping lines."""
  targetAllShippingLines: Boolean = false
}

"""The shipping lines to which the price rule applies to."""
type PriceRuleShippingLineEntitlements {
  """The codes for the countries to which the price rule applies to."""
  countryCodes: [CountryCode!]!

  """
  Whether the price rule is applicable to countries that have not been defined in the shop's shipping zones.
  """
  includeRestOfWorld: Boolean!

  """Whether the price rule applies to all shipping lines."""
  targetAllShippingLines: Boolean!
}

"""The set of valid sort keys for the PriceRule query."""
enum PriceRuleSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `ends_at` value."""
  ENDS_AT

  """Sort by the `id` value."""
  ID

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE

  """Sort by the `starts_at` value."""
  STARTS_AT

  """Sort by the `title` value."""
  TITLE

  """Sort by the `updated_at` value."""
  UPDATED_AT
}

"""The status of the price rule."""
enum PriceRuleStatus {
  """The price rule is active."""
  ACTIVE

  """The price rule is expired."""
  EXPIRED

  """The price rule is scheduled."""
  SCHEDULED
}

"""
The type of lines (line_item or shipping_line) to which the price rule applies.
"""
enum PriceRuleTarget {
  """The price rule applies to line items."""
  LINE_ITEM

  """The price rule applies to shipping lines."""
  SHIPPING_LINE
}

"""The list of features that can be supported by a price rule."""
enum PriceRuleTrait {
  """The price rule supports bulk discounts."""
  BULK

  """The price rule supports Buy X, Get Y (BXGY) discounts."""
  BUY_ONE_GET_ONE

  """
  The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit.
  """
  BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT

  """The price rule supports discounts that require a quantity."""
  QUANTITY_DISCOUNTS

  """The price rule targets specific customers."""
  SPECIFIC_CUSTOMERS
}

"""Return type for `priceRuleUpdate` mutation."""
type PriceRuleUpdatePayload {
  """The updated price rule."""
  priceRule: PriceRule

  """The updated discount code."""
  priceRuleDiscountCode: PriceRuleDiscountCode

  """The list of errors that occurred from executing the mutation."""
  priceRuleUserErrors: [PriceRuleUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead")
}

"""
Represents an error that happens during execution of a price rule mutation.
"""
type PriceRuleUserError implements DisplayableError {
  """Error code to uniquely identify the error."""
  code: PriceRuleErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""A time period during which a price rule is applicable."""
type PriceRuleValidityPeriod {
  """The time after which the price rule becomes invalid."""
  end: DateTime

  """The time after which the price rule is valid."""
  start: DateTime!
}

"""
Specifies the input fields to update the validity period of a price rule.
"""
input PriceRuleValidityPeriodInput {
  """The time after which the price rule becomes invalid."""
  end: DateTime

  """The time after which the price rule is valid."""
  start: DateTime!
}

"""
The type of the price rule value. The price rule value might be a percentage value, or a fixed amount.
"""
union PriceRuleValue = PriceRuleFixedAmountValue | PriceRulePercentValue

"""Specifies the input fields to update a price rule."""
input PriceRuleValueInput {
  """The fixed amount value of the price rule."""
  fixedAmountValue: Money

  """The percentage value of the price rule."""
  percentageValue: Float
}

"""The value of the percentage pricing object."""
type PricingPercentageValue {
  """The percentage value of the object."""
  percentage: Float!
}

"""
The type of value given to a customer when a discount is applied to an order. For example, the application of the discount might give the customer a percentage off a specified item. Alternatively, the application of the discount might give the customer a monetary value in a given currency off an order.
"""
union PricingValue = MoneyV2 | PricingPercentageValue

"Private metafields represent custom metadata that is attached to a resource.\nPrivate metafields are accessible only by the application that created them and only from the GraphQL Admin API.\n\nAn application can create a maximum of 10 private metafields per shop resource.\n"
type PrivateMetafield implements Node {
  """The date and time when the private metafield was created."""
  createdAt: DateTime!

  """The id of the private metafield."""
  id: ID!

  """The key name of the private metafield."""
  key: String!

  """The namespace of the private metafield."""
  namespace: String!

  """The date and time when the private metafield was updated."""
  updatedAt: DateTime!

  """The value of a private metafield."""
  value: String!

  """Represents the private metafield value type."""
  valueType: PrivateMetafieldValueType!
}

"An auto-generated type for paginating through multiple PrivateMetafields.\n"
type PrivateMetafieldConnection {
  """A list of edges."""
  edges: [PrivateMetafieldEdge!]!

  """A list of the nodes contained in PrivateMetafieldEdge."""
  nodes: [PrivateMetafield!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"The input fields for the private metafield to delete.\n"
input PrivateMetafieldDeleteInput {
  """The key of the private metafield."""
  key: String!

  """The namespace of the private metafield."""
  namespace: String!

  """
  The ID of the resource that owns the metafield. If the field is blank, then the `Shop` resource owns the metafield.
  """
  owner: ID
}

"""Return type for `privateMetafieldDelete` mutation."""
type PrivateMetafieldDeletePayload {
  """The ID of private metafield that was deleted."""
  deletedPrivateMetafieldId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type which holds one PrivateMetafield and a cursor during pagination.\n"
type PrivateMetafieldEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PrivateMetafieldEdge."""
  node: PrivateMetafield!
}

"The input fields for a private metafield.\n"
input PrivateMetafieldInput {
  """The key of the private metafield."""
  key: String!

  """The namespace of the private metafield."""
  namespace: String!

  """
  The resource that owns the metafield. If the field is blank, then the `Shop` resource owns the metafield.
  """
  owner: ID

  """
  The `value` and `valueType` of the private metafield, wrapped in a `ValueInput` object.
  """
  valueInput: PrivateMetafieldValueInput!
}

"""Return type for `privateMetafieldUpsert` mutation."""
type PrivateMetafieldUpsertPayload {
  """The private metafield that was created or updated."""
  privateMetafield: PrivateMetafield

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"The value input contains the value and value type of the private metafield.\n"
input PrivateMetafieldValueInput {
  """The value of a private metafield."""
  value: String!

  """Represents the private metafield value type."""
  valueType: PrivateMetafieldValueType!
}

"""Supported private metafield value types."""
enum PrivateMetafieldValueType {
  """An integer metafield."""
  INTEGER

  """A JSON string metafield."""
  JSON_STRING

  """A string metafield."""
  STRING
}

"""
The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
"""
type Product implements HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & LegacyInteroperability & Navigable & Node & OnlineStorePreviewable & Publishable {
  """
  The number of publications a resource is published to without feedback errors.
  """
  availablePublicationCount: Int!

  """The description of the product, complete with HTML formatting."""
  bodyHtml: String @deprecated(reason: "Use `descriptionHtml` instead")

  """A list of the collections that include the product."""
  collections(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `collection_type`\n - `publishable_status`\n - `published_status`\n - `title`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: CollectionSortKeys = ID
  ): CollectionConnection!

  """The pricing that applies for a customer in a given context."""
  contextualPricing(
    """The context used to generate contextual pricing for the variant."""
    context: ContextualPricingContext!
  ): ProductContextualPricing!

  "The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created.\n"
  createdAt: DateTime!

  """The custom product type specified by the merchant."""
  customProductType: String

  "A default cursor that returns the single next record, sorted ascending by ID.\n"
  defaultCursor: String!

  """
  A stripped description of the product, single line with HTML tags removed.
  """
  description(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """The description of the product, complete with HTML formatting."""
  descriptionHtml: HTML!

  "Stripped description of the product, single line with HTML tags removed.\nTruncated to 60 characters.\n"
  descriptionPlainSummary: String! @deprecated(reason: "Use `description` instead")

  """The featured image for the product."""
  featuredImage: Image

  """The featured media for the product."""
  featuredMedia: Media

  """
  Information about the product that's provided through resource feedback.
  """
  feedback: ResourceFeedback

  """The theme template used when viewing the gift card in a store."""
  giftCardTemplateSuffix: String

  """A unique human-friendly string of the product's title."""
  handle: String!

  """
  Whether the product has only a single variant with the default option and value.
  """
  hasOnlyDefaultVariant: Boolean!

  """Whether the product has out of stock variants."""
  hasOutOfStockVariants: Boolean!

  """A globally-unique identifier."""
  id: ID!

  """The images associated with the product."""
  images(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductImageSortKeys = POSITION
  ): ImageConnection!

  """Whether the product is in a given collection."""
  inCollection(
    """The ID of the collection to check."""
    id: ID!
  ): Boolean!

  """Whether the product is a gift card."""
  isGiftCard: Boolean!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """
  The media associated with the product. This can include images, 3D models, or videos.
  """
  media(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductMediaSortKeys = POSITION
  ): MediaConnection!

  """Total count of media belonging to a product."""
  mediaCount: Int!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The key for the metafield."""
    key: String!

    """The namespace for the metafield."""
    namespace: String!
  ): Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    "Supported filter parameters:\n - `created_at`\n - `key`\n - `namespace`\n - `owner_type`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The metafield namespace to filter by."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  """The online store preview URL."""
  onlineStorePreviewUrl: URL

  "The online store URL for the product.\nA value of `null` indicates that the product is not published to the Online Store sales channel.\n"
  onlineStoreUrl: URL

  """
  A list of product options. The limit is specified by Shop.resourceLimits.maxProductOptions.
  """
  options(
    """Truncate the array result to this size."""
    first: Int
  ): [ProductOption!]!

  """The price range of the product."""
  priceRange: ProductPriceRange! @deprecated(reason: "Deprecated in API version 2020-10. Use `priceRangeV2` instead.")

  """The price range of the product with prices formatted as decimals."""
  priceRangeV2: ProductPriceRangeV2!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The key for the private metafield."""
    key: String!

    """The namespace for the private metafield."""
    namespace: String!
  ): PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter the private metafields by namespace."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PrivateMetafieldConnection!

  """A list of the channels where the product is published."""
  productPublications(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductPublicationConnection! @deprecated(reason: "Use `resourcePublications` instead")

  """The product type specified by the merchant."""
  productType: String!

  """The number of publications a resource is published on."""
  publicationCount(
    """
    Include only the resource's publications that are published. If false, then return all the resource's publications including future publications.
    """
    onlyPublished: Boolean = true
  ): Int!

  """A list of the channels where the product is published."""
  publications(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """
    Return only the publications that are published. If false, then return all publications.
    """
    onlyPublished: Boolean = true

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductPublicationConnection! @deprecated(reason: "Use `resourcePublications` instead")

  "The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was published to the Online Store.\n"
  publishedAt: DateTime

  """Check to see whether the resource is published to a given channel."""
  publishedOnChannel(
    """The ID of the channel to check."""
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead")

  """
  Check to see whether the resource is published to the calling app's channel.
  """
  publishedOnCurrentChannel: Boolean! @deprecated(reason: "Use `publishedOnCurrentPublication` instead")

  """
  Check to see whether the resource is published to the calling app's publication.
  """
  publishedOnCurrentPublication: Boolean!

  """Check to see whether the resource is published to a given publication."""
  publishedOnPublication(
    """The ID of the publication to check."""
    publicationId: ID!
  ): Boolean!

  """
  Whether the product can only be purchased with a selling plan (subscription). Products that are sold on subscription (`requiresSellingPlan: true`) can be updated only for online stores. If you update a product to be subscription only, then the product is unpublished from all channels except the online store.
  """
  requiresSellingPlan: Boolean!

  """
  The resource that is either published or staged to be published to the calling app's publication. Requires the `read_product_listings` scope.
  """
  resourcePublicationOnCurrentPublication: ResourcePublicationV2

  """The list of resources that are published to a publication."""
  resourcePublications(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Whether to return only the resources that are currently published. If false, then also returns the resources that are scheduled to be published.\n"
    onlyPublished: Boolean = true

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """
  The list of resources that are either published or staged to be published to a publication.
  """
  resourcePublicationsV2(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Whether to return only the resources that are currently published. If false, then also returns the resources that are scheduled or staged to be published.\n"
    onlyPublished: Boolean = true

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ResourcePublicationV2Connection!

  """Count of selling plan groups associated with the product."""
  sellingPlanGroupCount: Int!

  """
  A list of all selling plan groups defined in the current shop associated with the product either directly or through any of its variants.
  """
  sellingPlanGroups(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SellingPlanGroupConnection!

  """SEO information of the product."""
  seo: SEO!

  """The standardized product type in the Shopify product taxonomy."""
  standardizedProductType: StandardizedProductType

  """The product status. This controls visibility across all channels."""
  status: ProductStatus!

  "The Storefront GraphQL API ID of the `Product`.\n\nAs of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.\n"
  storefrontId: StorefrontID! @deprecated(reason: "Use `id` instead")

  "A comma separated list of tags associated with the product. Updating `tags` overwrites\nany existing tags that were previously added to the product. To add new tags without overwriting\nexisting tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)\nmutation.\n"
  tags: [String!]!

  """The theme template used when viewing the product in a store."""
  templateSuffix: String

  """The title of the product."""
  title: String!

  """The quantity of inventory in stock."""
  totalInventory: Int!

  """The number of variants that are associated with the product."""
  totalVariants: Int!

  """Whether inventory tracking has been enabled for the product."""
  tracksInventory: Boolean!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [PublishedTranslation!]!

  """The list of channels that the resource is not published to."""
  unpublishedChannels(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ChannelConnection! @deprecated(reason: "Use `unpublishedPublications` instead")

  """The list of publications that the resource is not published to."""
  unpublishedPublications(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PublicationConnection!

  "The date and time when the product was last modified.\nA product's `updatedAt` value can change for different reasons. For example, if an order\nis placed for a product that has inventory tracking set up, then the inventory adjustment\nis counted as an update.\n"
  updatedAt: DateTime!

  """A list of variants associated with the product."""
  variants(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductVariantSortKeys = POSITION
  ): ProductVariantConnection!

  """The name of the product's vendor."""
  vendor: String!
}

"""Specifies product images to append."""
input ProductAppendImagesInput {
  """The ID of the product."""
  id: ID!

  """The images to be appended to the product."""
  images: [ImageInput!]!
}

"""Return type for `productAppendImages` mutation."""
type ProductAppendImagesPayload {
  """List of new images appended to the product."""
  newImages: [Image!]

  """The product object."""
  product: Product

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `productChangeStatus` mutation."""
type ProductChangeStatusPayload {
  """The product object."""
  product: Product

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ProductChangeStatusUserError!]!
}

"""An error that occurs during the execution of `ProductChangeStatus`."""
type ProductChangeStatusUserError implements DisplayableError {
  """The error code."""
  code: ProductChangeStatusUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `ProductChangeStatusUserError`.
"""
enum ProductChangeStatusUserErrorCode {
  """Product could not be found."""
  PRODUCT_NOT_FOUND
}

"""The set of valid sort keys for the ProductCollection query."""
enum ProductCollectionSortKeys {
  """Sort by the `best-selling` value."""
  BEST_SELLING

  """Sort by the `collection-default` value."""
  COLLECTION_DEFAULT

  """Sort by the `created` value."""
  CREATED

  """Sort by the `id` value."""
  ID

  """Sort by the `manual` value."""
  MANUAL

  """Sort by the `price` value."""
  PRICE

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE

  """Sort by the `title` value."""
  TITLE
}

"An auto-generated type for paginating through multiple Products.\n"
type ProductConnection {
  """A list of edges."""
  edges: [ProductEdge!]!

  """A list of the nodes contained in ProductEdge."""
  nodes: [Product!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"The price of a product in a specific country.\nPrices vary between countries.\n"
type ProductContextualPricing {
  """
  The pricing of the variant with the highest price in the given context.
  """
  maxVariantPricing: ProductVariantContextualPricing

  """The pricing of the variant with the lowest price in the given context."""
  minVariantPricing: ProductVariantContextualPricing

  """The price range of the product with prices formatted as decimals."""
  priceRange: ProductPriceRangeV2!
}

"""Return type for `productCreateMedia` mutation."""
type ProductCreateMediaPayload {
  """The newly created media."""
  media: [Media!]

  """The list of errors that occurred from executing the mutation."""
  mediaUserErrors: [MediaUserError!]!

  """The product associated with the media."""
  product: Product

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `mediaUserErrors` instead")
}

"""Return type for `productCreate` mutation."""
type ProductCreatePayload {
  """The product object."""
  product: Product

  """The shop associated with the product."""
  shop: Shop!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `productDeleteImages` mutation."""
type ProductDeleteImagesPayload {
  """This is an array of IDs of images to delete."""
  deletedImageIds: [ID!]!

  """This is the product object."""
  product: Product

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the product to delete."""
input ProductDeleteInput {
  """The ID of the product."""
  id: ID!
}

"""Return type for `productDeleteMedia` mutation."""
type ProductDeleteMediaPayload {
  """List of media IDs which were deleted."""
  deletedMediaIds: [ID!]

  """List of product image IDs which were deleted."""
  deletedProductImageIds: [ID!]

  """The list of errors that occurred from executing the mutation."""
  mediaUserErrors: [MediaUserError!]!

  """The product which media was deleted from."""
  product: Product

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `mediaUserErrors` instead")
}

"""Return type for `productDelete` mutation."""
type ProductDeletePayload {
  """The ID of the deleted product."""
  deletedProductId: ID

  """The shop associated with the product."""
  shop: Shop!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `productDuplicate` mutation."""
type ProductDuplicatePayload {
  """The asynchronous job duplicating the product images."""
  imageJob: Job

  """The duplicated product."""
  newProduct: Product

  """The user's shop."""
  shop: Shop!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type which holds one Product and a cursor during pagination.\n"
type ProductEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductEdge."""
  node: Product!
}

"""The set of valid sort keys for the ProductImage query."""
enum ProductImageSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  """Sort by the `position` value."""
  POSITION

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"""Return type for `productImageUpdate` mutation."""
type ProductImageUpdatePayload {
  """Image updated."""
  image: Image

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the input fields required to create a product."""
input ProductInput {
  """The IDs of the collections that this product will be added to."""
  collectionsToJoin: [ID!]

  """The IDs of collections that will no longer include the product."""
  collectionsToLeave: [ID!]

  """The custom product type specified by the merchant."""
  customProductType: String

  """The description of the product, complete with HTML formatting."""
  descriptionHtml: String

  """Whether the product is a gift card."""
  giftCard: Boolean

  """The theme template used when viewing the gift card in a store."""
  giftCardTemplateSuffix: String

  "A unique human-friendly string for the product. Automatically generated from the product's title.\n"
  handle: String

  """
  Specifies the product to update in productUpdate or creates a new product if absent in productCreate.
  """
  id: ID

  """The images to associate with the product."""
  images: [ImageInput!]

  """The metafields to associate with this product."""
  metafields: [MetafieldInput!]

  """List of custom product options (maximum of 3 per product)."""
  options: [String!]

  """The private metafields to associate with this product."""
  privateMetafields: [PrivateMetafieldInput!]

  """The product type specified by the merchant."""
  productType: String

  "Whether a redirect is required after a new handle has been provided.\nIf true, then the old handle is redirected to the new one automatically.\n"
  redirectNewHandle: Boolean = false

  """
  Whether the product can only be purchased with a selling plan (subscription). Products that are sold exclusively on subscription can only be created on online stores. If set to `true` on an already existing product, then the product will be marked unavailable on channels that don't support subscriptions.
  """
  requiresSellingPlan: Boolean

  """The SEO information associated with the product."""
  seo: SEOInput

  """The standardized product type in the Shopify product taxonomy."""
  standardizedProductType: StandardizedProductTypeInput

  """The status of the product."""
  status: ProductStatus

  """A comma separated list tags that have been added to the product."""
  tags: [String!]

  """The theme template used when viewing the product in a store."""
  templateSuffix: String

  """The title of the product."""
  title: String

  """A list of variants associated with the product."""
  variants: [ProductVariantInput!]

  """The name of the product's vendor."""
  vendor: String
}

"""Return type for `productJoinSellingPlanGroups` mutation."""
type ProductJoinSellingPlanGroupsPayload {
  """The product object."""
  product: Product

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SellingPlanGroupUserError!]!
}

"""Return type for `productLeaveSellingPlanGroups` mutation."""
type ProductLeaveSellingPlanGroupsPayload {
  """The product object."""
  product: Product

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SellingPlanGroupUserError!]!
}

"""The set of valid sort keys for the ProductMedia query."""
enum ProductMediaSortKeys {
  """Sort by the `id` value."""
  ID

  """Sort by the `position` value."""
  POSITION

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"Product property names like \"Size\", \"Color\", and \"Material\".\nVariants are selected based on permutations of these options.\n255 characters limit each.\n"
type ProductOption implements HasPublishedTranslations & Node {
  """A globally-unique identifier."""
  id: ID!

  """The product option’s name."""
  name: String!

  """The product option's position."""
  position: Int!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [PublishedTranslation!]!

  """The corresponding value to the product option name."""
  values: [String!]!
}

"""The price range of the product."""
type ProductPriceRange {
  """The highest variant's price."""
  maxVariantPrice: MoneyV2!

  """The lowest variant's price."""
  minVariantPrice: MoneyV2!
}

"""The price range of the product."""
type ProductPriceRangeV2 {
  """The highest variant's price."""
  maxVariantPrice: MoneyV2!

  """The lowest variant's price."""
  minVariantPrice: MoneyV2!
}

"""Represents the channels where a product is published."""
type ProductPublication {
  """The channel where the product was or is published."""
  channel: Channel!

  """Whether the publication is published or not."""
  isPublished: Boolean!

  """The product that was or is going to be published on the channel."""
  product: Product!

  """
  The date that the product was or is going to be published on the channel.
  """
  publishDate: DateTime
}

"An auto-generated type for paginating through multiple ProductPublications.\n"
type ProductPublicationConnection {
  """A list of edges."""
  edges: [ProductPublicationEdge!]!

  """A list of the nodes contained in ProductPublicationEdge."""
  nodes: [ProductPublication!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one ProductPublication and a cursor during pagination.\n"
type ProductPublicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductPublicationEdge."""
  node: ProductPublication!
}

"""Specifies a publication to which a product will be published."""
input ProductPublicationInput {
  """ID of the publication."""
  publicationId: ID

  """The date and time that the product was (or will be) published."""
  publishDate: DateTime
}

"""Specifies a product to publish and the channels to publish it to."""
input ProductPublishInput {
  """The product to create or update publications for."""
  id: ID!

  """The publication that the product is published to."""
  productPublications: [ProductPublicationInput!]!
}

"""Return type for `productPublish` mutation."""
type ProductPublishPayload {
  """The product that has been published."""
  product: Product

  """The channels where the product is published."""
  productPublications: [ProductPublication!] @deprecated(reason: "Use Product.publications instead.")

  """The user's shop."""
  shop: Shop!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `productReorderImages` mutation."""
type ProductReorderImagesPayload {
  """The asynchronous job reordering the images."""
  job: Job

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `productReorderMedia` mutation."""
type ProductReorderMediaPayload {
  """The asynchronous job reordering the media."""
  job: Job

  """The list of errors that occurred from executing the mutation."""
  mediaUserErrors: [MediaUserError!]!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `mediaUserErrors` instead")
}

"Reports the status of product for a Sales Channel or Storefront API.\nThis might include why a product is not available in a Sales Channel\nand how a merchant might fix this.\n"
type ProductResourceFeedback {
  "The time when the feedback was generated. Used to help determine whether\nincoming feedback is outdated compared to existing feedback.\n"
  feedbackGeneratedAt: DateTime!

  """The feedback messages presented to the merchant."""
  messages: [String!]!

  """The ID of the product associated with the feedback."""
  productId: ID!

  """The timestamp of the product associated with the feedback."""
  productUpdatedAt: DateTime!

  """
  Conveys the state of the feedback and whether it requires merchant action or not.
  """
  state: ResourceFeedbackState!
}

"""The input fields used to create a product feedback."""
input ProductResourceFeedbackInput {
  "The date and time when the payload is constructed.\nUsed to help determine whether incoming feedback is outdated compared to feedback already received, and if it should be ignored upon arrival.\n"
  feedbackGeneratedAt: DateTime!

  "A concise set of copy strings to be displayed to merchants. Used to guide merchants in resolving problems that your app encounters when trying to make use of their products.\nYou can specify up to four messages. Each message is limited to 100 characters.\n"
  messages: [String!]

  """The ID of the product that the feedback was created on."""
  productId: ID!

  """The timestamp of the product associated with the feedback."""
  productUpdatedAt: DateTime!

  """Whether the merchant needs to take action on the product."""
  state: ResourceFeedbackState!
}

"""A sale associated with a product."""
type ProductSale implements Sale {
  """The type of order action that the sale represents."""
  actionType: SaleActionType!

  """The unique identifier for the sale."""
  id: ID!

  """The line item for the associated sale."""
  lineItem: LineItem!

  """The line type assocated with the sale."""
  lineType: SaleLineType!

  """The number of units either ordered or intended to be returned."""
  quantity: Int

  """All individual taxes associated with the sale."""
  taxes: [SaleTax!]!

  """The total sale amount after taxes and discounts."""
  totalAmount: MoneyBag!

  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: MoneyBag!

  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """The total amount of taxes for the sale."""
  totalTaxAmount: MoneyBag!
}

"""The set of valid sort keys for the Product query."""
enum ProductSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  """Sort by the `inventory_total` value."""
  INVENTORY_TOTAL

  """Sort by the `product_type` value."""
  PRODUCT_TYPE

  """Sort by the `published_at` value."""
  PUBLISHED_AT

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE

  """Sort by the `title` value."""
  TITLE

  """Sort by the `updated_at` value."""
  UPDATED_AT

  """Sort by the `vendor` value."""
  VENDOR
}

"""The possible product statuses."""
enum ProductStatus {
  """
  The product is ready to sell and is available to customers on the online store, sales channels, and apps. By default, existing products are set to active.
  """
  ACTIVE

  """
  The product is no longer being sold and isn't available to customers on sales channels and apps.
  """
  ARCHIVED

  """
  The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft.
  """
  DRAFT
}

"""
Represents a [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) node.
"""
type ProductTaxonomyNode implements Node {
  """
  The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.
  """
  fullName: String!

  """The ID of the product taxonomy node."""
  id: ID!

  """Whether the node is a leaf node."""
  isLeaf: Boolean!

  """Whether the node is a root node."""
  isRoot: Boolean!

  """The name of the product taxonomy node. For example, Dog Beds."""
  name: String!
}

"""
Specifies a product to unpublish from a channel and the sales channels to unpublish it from.
"""
input ProductUnpublishInput {
  """The ID of the product to create or update publications for."""
  id: ID!

  """The channels to unpublish the product from."""
  productPublications: [ProductPublicationInput!]!
}

"""Return type for `productUnpublish` mutation."""
type ProductUnpublishPayload {
  """The product that has been unpublished."""
  product: Product

  """The user's shop."""
  shop: Shop!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `productUpdateMedia` mutation."""
type ProductUpdateMediaPayload {
  """The updated media."""
  media: [Media!]

  """The list of errors that occurred from executing the mutation."""
  mediaUserErrors: [MediaUserError!]!

  """The product which media was updated on."""
  product: Product

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `mediaUserErrors` instead")
}

"""Return type for `productUpdate` mutation."""
type ProductUpdatePayload {
  """The updated product."""
  product: Product

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Represents a product variant."""
type ProductVariant implements HasMetafieldDefinitions & HasMetafields & HasPublishedTranslations & LegacyInteroperability & Navigable & Node {
  """Whether the product variant is available for sale."""
  availableForSale: Boolean!

  """The value of the barcode associated with the product."""
  barcode: String

  """The compare-at price of the variant in the default shop currency."""
  compareAtPrice: Money

  """The pricing that applies for a customer in a given context."""
  contextualPricing(
    """The context used to generate contextual pricing for the variant."""
    context: ContextualPricingContext!
  ): ProductVariantContextualPricing!

  """The date and time when the variant was created."""
  createdAt: DateTime!

  "A default cursor that returns the single next record, sorted ascending by ID.\n"
  defaultCursor: String!

  """The delivery profile for the variant."""
  deliveryProfile: DeliveryProfile

  """
  Display name of the variant, based on product's title + variant's title.
  """
  displayName: String!

  """The fulfillment service associated with the product."""
  fulfillmentService: FulfillmentService @deprecated(reason: "Multi-managed inventory introduced a breaking change to this field, therefore this field will no longer be supported. Fulfillment services will all be opted into SKU sharing in 2023-04. Once opted into sku sharing, a product variant could be linked to multiple fulfillment services. To see all associated fulfillment services use [InventoryLevelConnection#locations](https://shopify.dev/api/admin-graphql/latest/connections/InventoryLevelConnection#field-location-inventorylevels).")

  """
  Whether changes to the fulfillment service for the product variant are allowed.
  """
  fulfillmentServiceEditable: EditableProperty!

  """The Harmonized System Code (or HS Tariff Code) for the variant."""
  harmonizedSystemCode: String @deprecated(reason: "Use `InventoryItem.harmonizedSystemCode` instead.")

  """A globally-unique identifier."""
  id: ID!

  """The featured image for the variant."""
  image: Image

  """The inventory item, which is used to query for inventory information."""
  inventoryItem: InventoryItem!

  """
  The fulfillment service that tracks the number of items in stock for the product variant.
  """
  inventoryManagement: ProductVariantInventoryManagement! @deprecated(reason: "Use tracked attribute on `inventoryItem` instead.")

  """
  Whether customers are allowed to place an order for the product variant when it's out of stock.
  """
  inventoryPolicy: ProductVariantInventoryPolicy!

  """The total sellable quantity of the variant."""
  inventoryQuantity: Int

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The media associated with the product variant."""
  media(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MediaConnection!

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The key for the metafield."""
    key: String!

    """The namespace for the metafield."""
    namespace: String!
  ): Metafield

  """List of metafield definitions."""
  metafieldDefinitions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter metafield definitions by namespace."""
    namespace: String

    """Filter by the definition's pinned status."""
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    "Supported filter parameters:\n - `created_at`\n - `key`\n - `namespace`\n - `owner_type`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection!

  """List of metafields that belong to the resource."""
  metafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The metafield namespace to filter by."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  "The order of the product variant in the list of product variants. The first position in the list is 1.\n"
  position: Int!

  """
  List of prices and compare-at prices in the presentment currencies for this shop.
  """
  presentmentPrices(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The presentment currencies prices should return in."""
    presentmentCurrencies: [CurrencyCode!]

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductVariantPricePairConnection! @deprecated(reason: "Use `contextualPricing` instead")

  """The price of the product variant in the default shop currency."""
  price: Money!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The key for the private metafield."""
    key: String!

    """The namespace for the private metafield."""
    namespace: String!
  ): PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter the private metafields by namespace."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PrivateMetafieldConnection!

  """The product that this variant belongs to."""
  product: Product!

  "Whether a customer needs to provide a shipping address when placing an order for the product variant.\n"
  requiresShipping: Boolean! @deprecated(reason: "Use `InventoryItem.requiresShipping` instead.")

  """List of product options applied to the variant."""
  selectedOptions: [SelectedOption!]!

  "The total sellable quantity of the variant for online channels.\nThis doesn't represent the total available inventory or capture\n[limitations based on customer location](https://help.shopify.com/manual/markets/inventory_and_fulfillment).\n"
  sellableOnlineQuantity: Int!

  """Count of selling plan groups associated with the product variant."""
  sellingPlanGroupCount: Int!

  """
  A list of all selling plan groups defined in the current shop associated with the product variant.
  """
  sellingPlanGroups(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SellingPlanGroupConnection!

  "An identifier for the product variant in the shop. Required in order to connect to a fulfillment service.\n"
  sku: String

  "The Storefront GraphQL API ID of the `ProductVariant`.\n\nAs of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.\n"
  storefrontId: StorefrontID! @deprecated(reason: "Use `id` instead")

  """The tax code for the product variant."""
  taxCode: String

  """Whether a tax is charged when the product variant is sold."""
  taxable: Boolean!

  """The title of the product variant."""
  title: String!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [PublishedTranslation!]!

  "The date and time (ISO 8601 format) when the product variant was last modified.\n"
  updatedAt: DateTime!

  """
  The weight of the product variant in the unit system specified with weight_unit.
  """
  weight: Float

  "The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: `g`, `kg`, `oz`, `lb`.\n"
  weightUnit: WeightUnit!
}

"""
Specifies the input fields required to append media to a single variant.
"""
input ProductVariantAppendMediaInput {
  """Specifies the media to append to the variant."""
  mediaIds: [ID!]!

  """Specifies the variant to which media will be appended."""
  variantId: ID!
}

"""Return type for `productVariantAppendMedia` mutation."""
type ProductVariantAppendMediaPayload {
  """The product associated with the variants and media."""
  product: Product

  """The product variants that were updated."""
  productVariants: [ProductVariant!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [MediaUserError!]!
}

"An auto-generated type for paginating through multiple ProductVariants.\n"
type ProductVariantConnection {
  """A list of edges."""
  edges: [ProductVariantEdge!]!

  """A list of the nodes contained in ProductVariantEdge."""
  nodes: [ProductVariant!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"The price of a product variant in a specific country.\nPrices vary between countries.\n"
type ProductVariantContextualPricing {
  """The final compare-at price after all adjustments are applied."""
  compareAtPrice: MoneyV2

  """The final price after all adjustments are applied."""
  price: MoneyV2!
}

"""Return type for `productVariantCreate` mutation."""
type ProductVariantCreatePayload {
  """The product associated with the variant."""
  product: Product

  """The successfully created variant."""
  productVariant: ProductVariant

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `productVariantDelete` mutation."""
type ProductVariantDeletePayload {
  """ID of the deleted product variant."""
  deletedProductVariantId: ID

  """Product of the deleted product variant."""
  product: Product

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""
Specifies the input fields required to detach media from a single variant.
"""
input ProductVariantDetachMediaInput {
  """Specifies the media to detach from the variant."""
  mediaIds: [ID!]!

  """Specifies the variant from which media will be detached."""
  variantId: ID!
}

"""Return type for `productVariantDetachMedia` mutation."""
type ProductVariantDetachMediaPayload {
  """The product associated with the variants and media."""
  product: Product

  """The product variants that were updated."""
  productVariants: [ProductVariant!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [MediaUserError!]!
}

"An auto-generated type which holds one ProductVariant and a cursor during pagination.\n"
type ProductVariantEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductVariantEdge."""
  node: ProductVariant!
}

"""Specifies a product variant to create or update."""
input ProductVariantInput {
  """The value of the barcode associated with the product."""
  barcode: String

  """The compare-at price of the variant."""
  compareAtPrice: Money

  """The Harmonized System Code (or HS Tariff Code) for the variant."""
  harmonizedSystemCode: String

  """
  Specifies the product variant to update or create a new variant if absent.
  """
  id: ID

  """The ID of the image that's associated with the variant."""
  imageId: ID

  "The URL of an image to associate with the variant.  This field can only be used through mutations that create product images and must match one of the URLs being created on the product.\n"
  imageSrc: String

  """Inventory Item associated with the variant, used for unit cost."""
  inventoryItem: InventoryItemInput

  """
  Whether customers are allowed to place an order for the product variant when it's out of stock.
  """
  inventoryPolicy: ProductVariantInventoryPolicy

  """
  Create only field. The inventory quantities at each location where the variant is stocked.
  """
  inventoryQuantities: [InventoryLevelInput!]

  """
  The URL of the media to associate with the variant. This field can only be used in mutations that create media images and must match one of the URLs being created on the product. This field only accepts one value.
  """
  mediaSrc: [String!]

  """Additional customizable information about the product variant."""
  metafields: [MetafieldInput!]

  """
  The custom properties that a shop owner uses to define product variants.
  """
  options: [String!]

  "The order of the product variant in the list of product variants. The first position in the list is 1.\n"
  position: Int

  """The price of the variant."""
  price: Money

  """The private metafields to associated with this product."""
  privateMetafields: [PrivateMetafieldInput!]

  """
  Create only required field. Specifies the product on which to create the variant.
  """
  productId: ID

  """Whether the variant requires shipping."""
  requiresShipping: Boolean

  """The SKU for the variant."""
  sku: String

  """The tax code associated with the variant."""
  taxCode: String

  """Whether the variant is taxable."""
  taxable: Boolean

  """The weight of the variant."""
  weight: Float

  """The unit of weight that's used to measure the variant."""
  weightUnit: WeightUnit
}

"""
The valid values for the method of inventory tracking for a product variant.
"""
enum ProductVariantInventoryManagement {
  """
  This product variant's inventory is tracked by a third-party fulfillment service.
  """
  FULFILLMENT_SERVICE

  """This product variant's inventory is not tracked."""
  NOT_MANAGED

  """
  This product variant's inventory is tracked by Shopify. In the unstable API version, this product variant's inventory could also be tracked by both Shopify and a third-party fulfillment service.
  """
  SHOPIFY
}

"The valid values for the inventory policy of a product variant once it is out of stock.\n"
enum ProductVariantInventoryPolicy {
  """Customers can buy this product variant after it's out of stock."""
  CONTINUE

  """Customers can't buy this product variant after it's out of stock."""
  DENY
}

"""Return type for `productVariantJoinSellingPlanGroups` mutation."""
type ProductVariantJoinSellingPlanGroupsPayload {
  """The product variant object."""
  productVariant: ProductVariant

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SellingPlanGroupUserError!]!
}

"""Return type for `productVariantLeaveSellingPlanGroups` mutation."""
type ProductVariantLeaveSellingPlanGroupsPayload {
  """The product variant object."""
  productVariant: ProductVariant

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SellingPlanGroupUserError!]!
}

"""Represents a product variant position."""
input ProductVariantPositionInput {
  """Specifies the ID of the product variant to update."""
  id: ID!

  """
  The order of the product variant in the list of product variants. The first position in the list is 1.
  """
  position: Int!
}

"The compare-at price and price of a variant sharing a currency.\n"
type ProductVariantPricePair {
  """The compare-at price of the variant with associated currency."""
  compareAtPrice: MoneyV2

  """The price of the variant with associated currency."""
  price: MoneyV2!
}

"An auto-generated type for paginating through multiple ProductVariantPricePairs.\n"
type ProductVariantPricePairConnection {
  """A list of edges."""
  edges: [ProductVariantPricePairEdge!]!

  """A list of the nodes contained in ProductVariantPricePairEdge."""
  nodes: [ProductVariantPricePair!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination.\n"
type ProductVariantPricePairEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductVariantPricePairEdge."""
  node: ProductVariantPricePair!
}

"""The set of valid sort keys for the ProductVariant query."""
enum ProductVariantSortKeys {
  """Sort by the `full_title` value."""
  FULL_TITLE

  """Sort by the `id` value."""
  ID

  """Sort by the `inventory_levels.available` value."""
  INVENTORY_LEVELS_AVAILABLE

  """Sort by the `inventory_management` value."""
  INVENTORY_MANAGEMENT

  """Sort by the `inventory_policy` value."""
  INVENTORY_POLICY

  """Sort by the `inventory_quantity` value."""
  INVENTORY_QUANTITY

  """Sort by the `name` value."""
  NAME

  """Sort by the `popular` value."""
  POPULAR

  """Sort by the `position` value."""
  POSITION

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE

  """Sort by the `sku` value."""
  SKU

  """Sort by the `title` value."""
  TITLE
}

"""Return type for `productVariantUpdate` mutation."""
type ProductVariantUpdatePayload {
  """The product associated with the variant."""
  product: Product

  """The updated variant."""
  productVariant: ProductVariant

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `productVariantsBulkCreate` mutation."""
type ProductVariantsBulkCreatePayload {
  """The updated product object."""
  product: Product

  """The newly created variants."""
  productVariants: [ProductVariant!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ProductVariantsBulkCreateUserError!]!
}

"""Error codes for failed product variant bulk create mutations."""
type ProductVariantsBulkCreateUserError implements DisplayableError {
  """The error code."""
  code: ProductVariantsBulkCreateUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `ProductVariantsBulkCreateUserError`.
"""
enum ProductVariantsBulkCreateUserErrorCode {
  """Variant price must be greater than or equal to zero."""
  GREATER_THAN_OR_EQUAL_TO

  """Invalid input detected."""
  INVALID

  """Input must be for this product."""
  MUST_BE_FOR_THIS_PRODUCT

  """Variant options are not enough."""
  NEED_TO_ADD_OPTION_VALUES

  """Price cannot take a negative value."""
  NEGATIVE_PRICE_VALUE

  """Input is not defined for this shop."""
  NOT_DEFINED_FOR_SHOP

  """On create, this key cannot be used."""
  NO_KEY_ON_CREATE

  """Variant options are more than the product options."""
  OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS

  """Product does not exist."""
  PRODUCT_DOES_NOT_EXIST

  """You reached the limit of available SKUs in your current plan."""
  SUBSCRIPTION_VIOLATION

  """Inventory locations cannot exceed the allowed resource limit or 10."""
  TOO_MANY_INVENTORY_LOCATIONS

  """Quantity could not be set. The location was not found."""
  TRACKED_VARIANT_LOCATION_NOT_FOUND

  """Variant already exists."""
  VARIANT_ALREADY_EXISTS

  """Variant options already exist. Please change the variant option(s)."""
  VARIANT_ALREADY_EXISTS_CHANGE_OPTION_VALUE
}

"""Return type for `productVariantsBulkDelete` mutation."""
type ProductVariantsBulkDeletePayload {
  """The updated product object."""
  product: Product

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ProductVariantsBulkDeleteUserError!]!
}

"""Error codes for failed bulk variant delete mutations."""
type ProductVariantsBulkDeleteUserError implements DisplayableError {
  """The error code."""
  code: ProductVariantsBulkDeleteUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `ProductVariantsBulkDeleteUserError`.
"""
enum ProductVariantsBulkDeleteUserErrorCode {
  """The variant does not exist."""
  AT_LEAST_ONE_VARIANT_DOES_NOT_BELONG_TO_THE_PRODUCT

  """Cannot delete default variant."""
  CANNOT_DELETE_LAST_VARIANT

  """Product does not exist."""
  PRODUCT_DOES_NOT_EXIST
}

"""
Specifies a product variant to create as part of a variant bulk mutation.
"""
input ProductVariantsBulkInput {
  """The value of the barcode associated with the product variant."""
  barcode: String

  """The compare-at price of the variant."""
  compareAtPrice: Money

  """The Harmonized System Code (or HS Tariff Code) for the variant."""
  harmonizedSystemCode: String

  """Specifies the product variant to update or delete."""
  id: ID

  """The ID of the image that's associated with the variant."""
  imageId: ID

  "The URL of an image to associate with the variant.  This field can only be used through mutations that create product images and must match one of the URLs being created on the product.\n"
  imageSrc: String

  """The inventory item associated with the variant, used for unit cost."""
  inventoryItem: InventoryItemInput

  """
  Whether customers are allowed to place an order for the variant when it's out of stock.
  """
  inventoryPolicy: ProductVariantInventoryPolicy

  "Create only field. The inventory quantities at each location where the variant is stocked. The number of elements\nin the array of inventory quantities cannot exceed 10 and the amount specified for the plan.\n"
  inventoryQuantities: [InventoryLevelInput!]

  """The URL of the media to associate with the variant."""
  mediaSrc: [String!]

  """The additional customizable information about the product variant."""
  metafields: [MetafieldInput!]

  """
  The custom properties that a shop owner uses to define product variants.
  """
  options: [String!]

  """The price of the variant."""
  price: Money

  """The private metafields to associated with this product."""
  privateMetafields: [PrivateMetafieldInput!]

  """Whether the variant requires shipping."""
  requiresShipping: Boolean

  """The SKU for the variant."""
  sku: String

  """The tax code associated with the variant."""
  taxCode: String

  """Whether the variant is taxable."""
  taxable: Boolean

  """The weight of the variant."""
  weight: Float

  """The unit of weight that's used to measure the variant."""
  weightUnit: WeightUnit
}

"""Return type for `productVariantsBulkReorder` mutation."""
type ProductVariantsBulkReorderPayload {
  """The updated product."""
  product: Product

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ProductVariantsBulkReorderUserError!]!
}

"""Error codes for failed bulk product variants reorder operation."""
type ProductVariantsBulkReorderUserError implements DisplayableError {
  """The error code."""
  code: ProductVariantsBulkReorderUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `ProductVariantsBulkReorderUserError`.
"""
enum ProductVariantsBulkReorderUserErrorCode {
  """Product Variant ids must be uniqe."""
  DUPLICATED_VARIANT_ID

  """Product Variant position can not be zero or negative number."""
  INVALID_POSITION

  """Product Variant does not exist."""
  MISSING_VARIANT

  """Product does not exist."""
  PRODUCT_DOES_NOT_EXIST
}

"""Return type for `productVariantsBulkUpdate` mutation."""
type ProductVariantsBulkUpdatePayload {
  """The updated product object."""
  product: Product

  """The updated variants."""
  productVariants: [ProductVariant!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ProductVariantsBulkUpdateUserError!]!
}

"""Error codes for failed variant bulk update mutations."""
type ProductVariantsBulkUpdateUserError implements DisplayableError {
  """The error code."""
  code: ProductVariantsBulkUpdateUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `ProductVariantsBulkUpdateUserError`.
"""
enum ProductVariantsBulkUpdateUserErrorCode {
  """The price of the variant must be greater than or equal to zero."""
  GREATER_THAN_OR_EQUAL_TO

  """Variant options are not enough."""
  NEED_TO_ADD_OPTION_VALUES

  """Price cannot take a negative value."""
  NEGATIVE_PRICE_VALUE

  """Inventory_quanties cannot be provided during update."""
  NO_INVENTORY_QUANTITES_DURING_UPDATE

  """Inventory quantities cannot be updated with variants API."""
  NO_INVENTORY_QUANTITIES_ON_VARIANTS_UPDATE

  """Variant options are more than the product options."""
  OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS

  """Product does not exist."""
  PRODUCT_DOES_NOT_EXIST

  """Product variant does not exist."""
  PRODUCT_VARIANT_DOES_NOT_EXIST

  """Product variant is missing ID attribute."""
  PRODUCT_VARIANT_ID_MISSING

  """You reached the limit of available SKUs in your current plan."""
  SUBSCRIPTION_VIOLATION

  """The variant already exists."""
  VARIANT_ALREADY_EXISTS
}

"""The set of valid sort keys for the ProfileItem query."""
enum ProfileItemSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  """Sort by the `inventory_total` value."""
  INVENTORY_TOTAL

  """Sort by the `product_type` value."""
  PRODUCT_TYPE

  """Sort by the `published_at` value."""
  PUBLISHED_AT

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE

  """Sort by the `title` value."""
  TITLE

  """Sort by the `updated_at` value."""
  UPDATED_AT

  """Sort by the `vendor` value."""
  VENDOR
}

"""The protected content type."""
enum ProtectedContent {
  """Address."""
  ADDRESS

  """Email."""
  EMAIL

  """Name."""
  NAME

  """Phone."""
  PHONE
}

"""The protected subject type."""
enum ProtectedSubject {
  """A customer."""
  CUSTOMER
}

"""Return type for `pubSubWebhookSubscriptionCreate` mutation."""
type PubSubWebhookSubscriptionCreatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [PubSubWebhookSubscriptionCreateUserError!]!

  """The webhook subscription that was created."""
  webhookSubscription: WebhookSubscription
}

"""
An error that occurs during the execution of `PubSubWebhookSubscriptionCreate`.
"""
type PubSubWebhookSubscriptionCreateUserError implements DisplayableError {
  """The error code."""
  code: PubSubWebhookSubscriptionCreateUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `PubSubWebhookSubscriptionCreateUserError`.
"""
enum PubSubWebhookSubscriptionCreateUserErrorCode {
  """Invalid parameters provided."""
  INVALID_PARAMETERS
}

"Specifies the input fields for a PubSub webhook subscription.\n"
input PubSubWebhookSubscriptionInput {
  """The format in which the webhook subscription should send the data."""
  format: WebhookSubscriptionFormat

  """The list of fields to be included in the webhook subscription."""
  includeFields: [String!]

  """
  The list of namespaces for any metafields that should be included in the webhook subscription.
  """
  metafieldNamespaces: [String!]

  """The Pub/Sub project ID."""
  pubSubProject: String!

  """The Pub/Sub topic ID."""
  pubSubTopic: String!
}

"""Return type for `pubSubWebhookSubscriptionUpdate` mutation."""
type PubSubWebhookSubscriptionUpdatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [PubSubWebhookSubscriptionUpdateUserError!]!

  """The webhook subscription that was updated."""
  webhookSubscription: WebhookSubscription
}

"""
An error that occurs during the execution of `PubSubWebhookSubscriptionUpdate`.
"""
type PubSubWebhookSubscriptionUpdateUserError implements DisplayableError {
  """The error code."""
  code: PubSubWebhookSubscriptionUpdateUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `PubSubWebhookSubscriptionUpdateUserError`.
"""
enum PubSubWebhookSubscriptionUpdateUserErrorCode {
  """Invalid parameters provided."""
  INVALID_PARAMETERS
}

"A publication is a group of products and collections that is published to an app.\n"
type Publication implements Node {
  """The app associated with the publication."""
  app: App!

  """
  The collection publications for the list of collections published to the publication.
  """
  collectionPublicationsV3(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """The list of collections published to the publication."""
  collections(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CollectionConnection!

  """Whether the collection is available to the publication."""
  hasCollection(
    """Collection ID to check."""
    id: ID!
  ): Boolean!

  """A globally-unique identifier."""
  id: ID!

  """Name of the publication."""
  name: String!

  """
  The product publications for the list of products published to the publication.
  """
  productPublicationsV3(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """The list of products published to the publication."""
  products(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductConnection!

  """Whether the publication supports future publishing."""
  supportsFuturePublishing: Boolean!
}

"An auto-generated type for paginating through multiple Publications.\n"
type PublicationConnection {
  """A list of edges."""
  edges: [PublicationEdge!]!

  """A list of the nodes contained in PublicationEdge."""
  nodes: [Publication!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one Publication and a cursor during pagination.\n"
type PublicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PublicationEdge."""
  node: Publication!
}

"""Specifies the input fields required to publish a resource."""
input PublicationInput {
  """ID of the publication."""
  publicationId: ID

  "The date and time that the resource was published. Setting this to a date in the future will schedule\nthe resource to be published. Only online store channels support future publishing.\n"
  publishDate: DateTime
}

"Represents a resource that can be published to a channel.\nA publishable resource can be either a Product or Collection.\n"
interface Publishable {
  """
  The number of publications a resource is published to without feedback errors.
  """
  availablePublicationCount: Int!

  """The number of publications a resource is published on."""
  publicationCount(
    """
    Include only the resource's publications that are published. If false, then return all the resource's publications including future publications.
    """
    onlyPublished: Boolean = true
  ): Int!

  """Check to see whether the resource is published to a given channel."""
  publishedOnChannel(
    """The ID of the channel to check."""
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead")

  """
  Check to see whether the resource is published to the calling app's channel.
  """
  publishedOnCurrentChannel: Boolean! @deprecated(reason: "Use `publishedOnCurrentPublication` instead")

  """
  Check to see whether the resource is published to the calling app's publication.
  """
  publishedOnCurrentPublication: Boolean!

  """Check to see whether the resource is published to a given publication."""
  publishedOnPublication(
    """The ID of the publication to check."""
    publicationId: ID!
  ): Boolean!

  """The list of resources that are published to a publication."""
  resourcePublications(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Whether to return only the resources that are currently published. If false, then also returns the resources that are scheduled to be published.\n"
    onlyPublished: Boolean = true

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """
  The list of resources that are either published or staged to be published to a publication.
  """
  resourcePublicationsV2(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Whether to return only the resources that are currently published. If false, then also returns the resources that are scheduled or staged to be published.\n"
    onlyPublished: Boolean = true

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ResourcePublicationV2Connection!

  """The list of channels that the resource is not published to."""
  unpublishedChannels(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ChannelConnection! @deprecated(reason: "Use `unpublishedPublications` instead")

  """The list of publications that the resource is not published to."""
  unpublishedPublications(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PublicationConnection!
}

"""Return type for `publishablePublish` mutation."""
type PublishablePublishPayload {
  """Resource that has been published."""
  publishable: Publishable

  """The user's shop."""
  shop: Shop!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `publishablePublishToCurrentChannel` mutation."""
type PublishablePublishToCurrentChannelPayload {
  """Resource that has been published."""
  publishable: Publishable

  """The user's shop."""
  shop: Shop!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `publishableUnpublish` mutation."""
type PublishableUnpublishPayload {
  """Resource that has been unpublished."""
  publishable: Publishable

  """The user's shop."""
  shop: Shop!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `publishableUnpublishToCurrentChannel` mutation."""
type PublishableUnpublishToCurrentChannelPayload {
  """Resource that has been unpublished."""
  publishable: Publishable

  """The user's shop."""
  shop: Shop!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Published translation of a field of a resource."""
type PublishedTranslation {
  """The resource field that is being translated."""
  key: String!

  """The locale of this translation."""
  locale: String!

  """The translation value."""
  value: String
}

"""
The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start.
"""
type QueryRoot {
  """Lookup an App by ID or return the currently authenticated App."""
  app(
    """The ID to lookup the App by."""
    id: ID
  ): App

  "Fetches app by handle.\nReturns null if the app doesn't exist.\n"
  appByHandle(
    """Handle of the App."""
    handle: String!
  ): App

  "Fetches app by apiKey.\nReturns null if the app doesn't exist.\n"
  appByKey(
    """API key of the App."""
    apiKey: String!
  ): App

  "An app discount type.\n"
  appDiscountType(
    """The ID for the function providing the app discount type."""
    functionId: String!
  ): AppDiscountType

  "A list of app discount types installed by apps.\n"
  appDiscountTypes: [AppDiscountType!]!

  """
  Lookup an AppInstallation by ID or return the AppInstallation for the currently authenticated App.
  """
  appInstallation(
    """ID used to lookup AppInstallation."""
    id: ID
  ): AppInstallation

  """List of app installations."""
  appInstallations(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """The category of app installations to fetch."""
    category: AppInstallationCategory

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The privacy level of app installations to fetch."""
    privacy: AppInstallationPrivacy = PUBLIC

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: AppInstallationSortKeys = INSTALLED_AT
  ): AppInstallationConnection!

  """Returns an automatic discount resource by ID."""
  automaticDiscount(
    """The ID of the DiscountAutomatic to return."""
    id: ID!
  ): DiscountAutomatic @deprecated(reason: "Use `automaticDiscountNode` instead")

  """Returns an automatic discount resource by ID."""
  automaticDiscountNode(
    """The ID of the DiscountAutomaticNode to return."""
    id: ID!
  ): DiscountAutomaticNode

  """List of automatic discounts."""
  automaticDiscountNodes(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `status`\n - `type`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: AutomaticDiscountSortKeys = CREATED_AT
  ): DiscountAutomaticNodeConnection!

  """List of the shop's automatic discount saved searches."""
  automaticDiscountSavedSearches(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection!

  """List of automatic discounts."""
  automaticDiscounts(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `status`\n - `type`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: AutomaticDiscountSortKeys = CREATED_AT
  ): DiscountAutomaticConnection! @deprecated(reason: "Use `automaticDiscountNodes` instead")

  """
  Returns a list of activated carrier services and associated shop locations that support them.
  """
  availableCarrierServices: [DeliveryCarrierServiceAndLocations!]!

  """Returns a list of available locales."""
  availableLocales: [Locale!]!

  """Returns a `DeliveryCarrierService` object by ID."""
  carrierService(
    """The ID of the DeliveryCarrierService to return."""
    id: ID!
  ): DeliveryCarrierService

  """Lookup a channel by ID."""
  channel(
    """The ID of the Channel to return."""
    id: ID!
  ): Channel @deprecated(reason: "Use `publication` instead")

  """List of the active sales channels."""
  channels(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ChannelConnection! @deprecated(reason: "Use `publications` instead")

  """Returns a code discount resource by ID."""
  codeDiscountNode(
    """The ID of the DiscountCodeNode to return."""
    id: ID!
  ): DiscountCodeNode

  """Returns a code discount identified by its code."""
  codeDiscountNodeByCode(
    """The case-insensitive code of the `DiscountCodeNode` to return."""
    code: String!
  ): DiscountCodeNode

  """
  List of code discounts. Special fields for query params:
   * status: active, expired, scheduled
   * discount_type: bogo, fixed_amount, free_shipping, percentage.
  """
  codeDiscountNodes(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `created_at`\n - `discount_type`\n - `ends_at`\n - `starts_at`\n - `status`\n - `times_used`\n - `type`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: CodeDiscountSortKeys = CREATED_AT
  ): DiscountCodeNodeConnection!

  """List of the shop's code discount saved searches."""
  codeDiscountSavedSearches(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection!

  """Returns a Collection resource by ID."""
  collection(
    """The ID of the Collection to return."""
    id: ID!
  ): Collection

  """Return a collection by its handle."""
  collectionByHandle(
    """The handle of the collection."""
    handle: String!
  ): Collection

  """
  A list of rule conditions to define how collections with rules can be created.
  """
  collectionRulesConditions: [CollectionRuleConditions!]!

  """List of the shop's collection saved searches."""
  collectionSavedSearches(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection!

  """List of collections."""
  collections(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `collection_type`\n - `publishable_status`\n - `published_status`\n - `title`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: CollectionSortKeys = ID
  ): CollectionConnection!

  """Return the AppInstallation for the currently authenticated App."""
  currentAppInstallation: AppInstallation!

  """
  Returns the current app's most recent BulkOperation. Apps can run one bulk query and one bulk mutation operation at a time, by shop.
  """
  currentBulkOperation(
    """The current bulk operation's type."""
    type: BulkOperationType = QUERY
  ): BulkOperation

  """Returns a Customer resource by ID."""
  customer(
    """The ID of the Customer to return."""
    id: ID!
  ): Customer

  """Returns a CustomerPaymentMethod resource by ID."""
  customerPaymentMethod(
    """The ID of the CustomerPaymentMethod to return."""
    id: ID!

    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
  ): CustomerPaymentMethod

  """
  The list of members, such as customers, that's associated with an individual segment.
  """
  customerSegmentMembers(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The query that's used to filter the members."""
    query: String

    """
    Reverse the order of the list. The sorting behaviour defaults to ascending order.
    """
    reverse: Boolean = false

    """The ID of the segment."""
    segmentId: ID

    """Sort the list by a given key."""
    sortKey: String

    """
    The timezone that's used to interpret relative date arguments. The timezone defaults to UTC if the timezone isn't provided.
    """
    timezone: String
  ): CustomerSegmentMemberConnection!

  """Whether a member, which is a customer, belongs to a segment."""
  customerSegmentMembership(
    """The ID of the customer that has the membership."""
    customerId: ID!

    """The segments to evaluate for the given customer."""
    segmentIds: [ID!]!
  ): SegmentMembershipResponse!

  """List of customers."""
  customers(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `accepts_marketing`\n - `country`\n - `customer_date`\n - `email`\n - `last_abandoned_order_date`\n - `order_date`\n - `orders_count`\n - `phone`\n - `state`\n - `tag`\n - `tag_not`\n - `total_spent`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: CustomerSortKeys = ID
  ): CustomerConnection!

  """The paginated list of deletion events."""
  deletionEvents(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `occurred_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: DeletionEventSortKeys = ID

    """List of subject types to filter by."""
    subjectTypes: [DeletionEventSubjectType!]
  ): DeletionEventConnection!

  """Returns a Delivery Profile resource by ID."""
  deliveryProfile(
    """The ID of the DeliveryProfile to return."""
    id: ID!
  ): DeliveryProfile

  """Returns a list of saved delivery profiles."""
  deliveryProfiles(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """
    If `true`, returns only delivery profiles that were created by the merchant.
    """
    merchantOwnedOnly: Boolean

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): DeliveryProfileConnection!

  """Returns the shop-wide shipping settings."""
  deliverySettings: DeliverySetting

  """The total number of discount codes for the shop."""
  discountCodeCount(
    """
    Supported filter parameters:
     * times_used.
    """
    query: String
  ): Int!

  """Returns a discount resource by ID."""
  discountNode(
    """The ID of the DiscountNode to return."""
    id: ID!
  ): DiscountNode

  """List of discounts."""
  discountNodes(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `combines_with [PRODUCT_DISCOUNTS|ORDER_DISCOUNTS|SHIPPING_DISCOUNTS]`\n - `discount_class [PRODUCT|ORDER|SHIPPING]`\n - `method`\n - `starts_at`\n - `status`\n - `times_used`\n - `type`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: DiscountSortKeys = CREATED_AT
  ): DiscountNodeConnection!

  """Returns a bulk code creation resource by ID."""
  discountRedeemCodeBulkCreation(
    """The ID of the DiscountRedeemCodeBulkCreation to return."""
    id: ID!
  ): DiscountRedeemCodeBulkCreation

  """List of the shop's redeemed discount code saved searches."""
  discountRedeemCodeSavedSearches(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `times_used`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: DiscountCodeSortKeys = ID
  ): SavedSearchConnection!

  """Returns dispute details based on ID."""
  dispute(
    """The ID of the ShopifyPaymentsDispute to return."""
    id: ID!
  ): ShopifyPaymentsDispute

  """Returns dispute evidence details based on ID."""
  disputeEvidence(
    """The ID of the ShopifyPaymentsDisputeEvidence to return."""
    id: ID!
  ): ShopifyPaymentsDisputeEvidence

  """Lookup a Domain by ID."""
  domain(
    """The ID of the Domain to return."""
    id: ID!
  ): Domain

  """Returns a DraftOrder resource by ID."""
  draftOrder(
    """The ID of the DraftOrder to return."""
    id: ID!
  ): DraftOrder

  """List of the shop's draft order saved searches."""
  draftOrderSavedSearches(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection!

  """List of saved draft orders."""
  draftOrders(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `created_at`\n - `customer_id`\n - `source`\n - `status`\n - `tag`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: DraftOrderSortKeys = ID
  ): DraftOrderConnection!

  """A list of the shop's file saved searches."""
  fileSavedSearches(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection!

  """Returns a paginated list of files that have been uploaded to Shopify."""
  files(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `created_at`\n - `filename`\n - `media_type`\n - `original_upload_size`\n - `status`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: FileSortKeys = ID
  ): FileConnection!

  """Returns a Fulfillment resource by ID."""
  fulfillment(
    """The ID of the Fulfillment to return."""
    id: ID!
  ): Fulfillment

  """Returns a Fulfillment order resource by ID."""
  fulfillmentOrder(
    """The ID of the FulfillmentOrder to return."""
    id: ID!
  ): FulfillmentOrder

  """Returns a FulfillmentService resource by ID."""
  fulfillmentService(
    """The ID of the FulfillmentService to return."""
    id: ID!
  ): FulfillmentService

  """Returns a gift card resource by ID."""
  giftCard(
    """The ID of the GiftCard to return."""
    id: ID!
  ): GiftCard

  """Returns a list of gift cards."""
  giftCards(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `balance_status`\n - `created_at`\n - `expires_on`\n - `initial_value`\n - `source`\n - `status`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: GiftCardSortKeys = ID
  ): GiftCardConnection!

  """The total number of gift cards issued for the shop."""
  giftCardsCount(
    """Whether to count enabled or disabled or all gift cards."""
    enabled: Boolean
  ): UnsignedInt64!

  """Returns an `InventoryItem` object by ID."""
  inventoryItem(
    """The ID of the InventoryItem to return."""
    id: ID!
  ): InventoryItem

  """Returns a list of inventory items."""
  inventoryItems(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `created_at`\n - `id`\n - `sku`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): InventoryItemConnection!

  """Returns an `InventoryLevel` object by ID."""
  inventoryLevel(
    """The ID of the InventoryLevel to return."""
    id: ID!
  ): InventoryLevel

  "Returns a Job resource by ID. Used to check the status of internal jobs and any applicable changes.\n"
  job(
    """ID of the job to query."""
    id: ID!
  ): Job

  """Returns an inventory Location resource by ID."""
  location(
    """
    The ID of the location to return. If no ID is provided, the primary location of the Shop is returned.
    """
    id: ID
  ): Location

  """Returns a list of active inventory locations."""
  locations(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """If true, also include the locations that are deactivated."""
    includeInactive: Boolean = false

    """If true, also include the legacy locations of fulfillment services."""
    includeLegacy: Boolean = false

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `active`\n - `address1`\n - `address2`\n - `city`\n - `country`\n - `legacy`\n - `name`\n - `province`\n - `zip`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: LocationSortKeys = NAME
  ): LocationConnection!

  """
  Returns a list of all origin locations available for a delivery profile.
  """
  locationsAvailableForDeliveryProfiles: [Location!] @deprecated(reason: "Use `locationsAvailableForDeliveryProfilesConnection` instead")

  """
  Returns a list of all origin locations available for a delivery profile.
  """
  locationsAvailableForDeliveryProfilesConnection(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): LocationConnection!

  """Returns a market resource by ID."""
  market(
    """The ID of the Market to return."""
    id: ID!
  ): Market

  """
  Returns the applicable market for a customer based on where they are in the world.
  """
  marketByGeography(
    """The code for the country where the customer is."""
    countryCode: CountryCode!
  ): Market

  """A list of marketing activities associated with the marketing app."""
  marketingActivities(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `app_id`\n - `created_at`\n - `marketing_campaign_id`\n - `scheduled_to_end_at`\n - `scheduled_to_start_at`\n - `tactic`\n - `title`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: MarketingActivitySortKeys = CREATED_AT
  ): MarketingActivityConnection!

  """Returns a MarketingActivity resource by ID."""
  marketingActivity(
    """The ID of the MarketingActivity to return."""
    id: ID!
  ): MarketingActivity

  """Returns a MarketingEvent resource by ID."""
  marketingEvent(
    """The ID of the MarketingEvent to return."""
    id: ID!
  ): MarketingEvent

  """A list of marketing events associated with the marketing app."""
  marketingEvents(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `app_id`\n - `description`\n - `started_at`\n - `type`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: MarketingEventSortKeys = ID
  ): MarketingEventConnection!

  """The markets configured for the shop."""
  markets(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MarketConnection!

  """Returns a metafield by ID."""
  metafield(
    """The ID of the Metafield to return."""
    id: ID!
  ): Metafield

  """Returns a metafield definition by ID."""
  metafieldDefinition(
    """The ID of the MetafieldDefinition to return."""
    id: ID!
  ): MetafieldDefinition

  "Each metafield definition has a type, which defines the type of information that it can store.\nThis type is enforced across every instance of the resource that owns the metafield definition.\n\nRefer to the [list of supported metafield types](https://shopify.dev/apps/metafields/types).\n"
  metafieldDefinitionTypes: [MetafieldDefinitionType!]!

  """List of metafield definitions."""
  metafieldDefinitions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Filter metafield definition by key."""
    key: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter metafield definition by namespace."""
    namespace: String

    """Filter the metafield definition by the specific owner type."""
    ownerType: MetafieldOwnerType!

    """Filter the metafield definition by the pinned status."""
    pinnedStatus: MetafieldDefinitionPinnedStatus = ANY

    "Supported filter parameters:\n - `created_at`\n - `key`\n - `namespace`\n - `owner_type`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: MetafieldDefinitionSortKeys = ID
  ): MetafieldDefinitionConnection!

  """List of the `MetafieldStorefrontVisibility` records."""
  metafieldStorefrontVisibilities(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter the visible metafields by namespace."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldStorefrontVisibilityConnection!

  "Returns a `MetafieldStorefrontVisibility` record by ID. A `MetafieldStorefrontVisibility` record lists the\nmetafields to make visible in the Storefront API.\n"
  metafieldStorefrontVisibility(
    """The ID of the MetafieldStorefrontVisibility to return."""
    id: ID!
  ): MetafieldStorefrontVisibility

  "Returns a specific node (any object that implements the\n[Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)\ninterface) by ID, in accordance with the\n[Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).\nThis field is commonly used for refetching an object.\n"
  node(
    """The ID of the Node to return."""
    id: ID!
  ): Node

  "Returns the list of nodes (any objects that implement the\n[Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)\ninterface) with the given IDs, in accordance with the\n[Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).\n"
  nodes(
    """The IDs of the Nodes to return."""
    ids: [ID!]!
  ): [Node]!

  """Returns an Order resource by ID."""
  order(
    """The ID of the Order to return."""
    id: ID!
  ): Order

  """
  Returns a payment status by payment reference ID. Used to check the status of a deferred payment.
  """
  orderPaymentStatus(
    """ID of the order for which the payment was initiated."""
    orderId: ID!

    """Unique identifier returned by orderCreatePayment."""
    paymentReferenceId: String!
  ): OrderPaymentStatus

  """List of the shop's order saved searches."""
  orderSavedSearches(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection!

  """Returns a list of orders placed."""
  orders(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `cart_token`\n - `channel`\n - `channel_id`\n - `chargeback_status`\n - `checkout_token`\n - `created_at`\n - `credit_card_last4`\n - `customer_id`\n - `delivery_method`\n - `discount_code`\n - `earliest_fulfill_by`\n - `email`\n - `financial_status`\n - `fraud_protection_level`\n - `fulfillment_location_id`\n - `fulfillment_status`\n - `gateway`\n - `location_id`\n - `name`\n - `payment_provider_id`\n - `processed_at`\n - `reference_location_id`\n - `return_status`\n - `risk_level`\n - `sales_channel`\n - `source_identifier`\n - `source_name`\n - `status`\n - `tag`\n - `tag_not`\n - `test`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: OrderSortKeys = PROCESSED_AT
  ): OrderConnection!

  """The list of payment terms templates eligible for all shops and users."""
  paymentTermsTemplates(
    """The payment terms type to filter the payment terms templates list."""
    paymentTermsType: PaymentTermsType
  ): [PaymentTermsTemplate!]!

  """Returns a price list resource by ID."""
  priceList(
    """The ID of the `PriceList` to return."""
    id: ID!
  ): PriceList

  """All price lists for a shop."""
  priceLists(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The context that the price list applies to."""
    matchRule: PriceListContext

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: PriceListSortKeys = ID
  ): PriceListConnection!

  """Lookup a price rule by ID."""
  priceRule(
    """The ID of the PriceRule to return."""
    id: ID!
  ): PriceRule

  """List of the shop's price rule saved searches."""
  priceRuleSavedSearches(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection!

  """List of price rules."""
  priceRules(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `created_at`\n - `discount_type`\n - `ends_at`\n - `starts_at`\n - `status`\n - `times_used`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: PriceRuleSortKeys = ID
  ): PriceRuleConnection!

  """The primary market of the shop."""
  primaryMarket: Market!

  "Returns a private metafield by ID.\nPrivate metafields are accessible only by the application that created them.\n"
  privateMetafield(
    """The ID of the PrivateMetafield to return."""
    id: ID!
  ): PrivateMetafield

  "Returns a list of private metafields associated to a resource.\n"
  privateMetafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter the private metafields by namespace."""
    namespace: String

    """
    Retrieve the private metafields of a certain resource, specified by the resource ID.
    """
    owner: ID!

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PrivateMetafieldConnection!

  """Returns a Product resource by ID."""
  product(
    """The ID of the Product to return."""
    id: ID!
  ): Product

  """Return a product by its handle."""
  productByHandle(
    """The handle of the product."""
    handle: String!
  ): Product

  """The product resource feedback for the currently authenticated app."""
  productResourceFeedback(
    """The product associated with the resource feedback."""
    id: ID!
  ): ProductResourceFeedback

  """List of the shop's product saved searches."""
  productSavedSearches(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection!

  """Returns a ProductVariant resource by ID."""
  productVariant(
    """The ID of the ProductVariant to return."""
    id: ID!
  ): ProductVariant

  """List of the product variants."""
  productVariants(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `barcode`\n - `collection`\n - `delivery_profile_id`\n - `exclude_composite`\n - `gift_card`\n - `inventory_quantity`\n - `location_id`\n - `managed`\n - `managed_by`\n - `product_id`\n - `product_status`\n - `product_type`\n - `publishable_status`\n - `published_status`\n - `sku`\n - `tag`\n - `tag_not`\n - `taxable`\n - `title`\n - `updated_at`\n - `vendor`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: ProductVariantSortKeys = ID
  ): ProductVariantConnection!

  """List of products."""
  products(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `barcode`\n - `created_at`\n - `delivery_profile_id`\n - `error_feedback`\n - `gift_card`\n - `has_only_composites`\n - `has_only_default_variant`\n - `id`\n - `inventory_total`\n - `is_price_reduced`\n - `out_of_stock_somewhere`\n - `price`\n - `product_type`\n - `publishable_status`\n - `published_status`\n - `sku`\n - `status`\n - `tag`\n - `tag_not`\n - `title`\n - `updated_at`\n - `vendor`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: ProductSortKeys = ID
  ): ProductConnection!

  """
  The list of publicly-accessible Admin API versions, including supported versions, the release candidate, and unstable versions.
  """
  publicApiVersions: [ApiVersion!]!

  """Lookup a publication by ID."""
  publication(
    """The ID of the Publication to return."""
    id: ID!
  ): Publication

  """List of the active publications."""
  publications(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PublicationConnection!

  """Returns a Refund resource by ID."""
  refund(
    """The ID of the Refund to return."""
    id: ID!
  ): Refund

  """Lookup a script tag resource by ID."""
  scriptTag(
    """The ID of the ScriptTag to return."""
    id: ID!
  ): ScriptTag

  """A list of script tags."""
  scriptTags(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """The source URL of the script tag to filter by."""
    src: URL
  ): ScriptTagConnection!

  """The Customer Segment."""
  segment(
    """Find a segment by ID."""
    id: ID!
  ): Segment

  """The number of segments for a shop."""
  segmentCount: Int!

  """
  A list of filter suggestions associated with a segment. A segment is a group of members (commonly customers) that meet specific criteria.
  """
  segmentFilterSuggestions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the first `n` elements from the list."""
    first: Int!

    """Returns the elements of a list by keyword or term."""
    search: String!
  ): SegmentFilterConnection!

  """A list of filters."""
  segmentFilters(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int
  ): SegmentFilterConnection!

  """A list of a shop's segment migrations."""
  segmentMigrations(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Search a segment migration by its saved search ID."""
    savedSearchId: ID
  ): SegmentMigrationConnection!

  """
  The list of suggested values that's associated with an individual segment.A segment is a group of members, such as customers, that meet specific criteria.
  """
  segmentValueSuggestions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns the elements of a list by filter handle."""
    filterQueryName: String!

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements of a list by keyword or term."""
    search: String!
  ): SegmentValueConnection!

  """A list of a shop's segments."""
  segments(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `name`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: SegmentSortKeys = CREATION_DATE
  ): SegmentConnection!

  """Returns a Selling Plan Group resource by ID."""
  sellingPlanGroup(
    """The ID of the SellingPlanGroup to return."""
    id: ID!
  ): SellingPlanGroup

  """List Selling Plan Groups."""
  sellingPlanGroups(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `delivery_frequency`\n - `percentage_off`\n - `name`\n - `created_at`\n - `app_id [CURRENT|ALL|App ID number]` default: `CURRENT`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax).\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: SellingPlanGroupSortKeys = ID
  ): SellingPlanGroupConnection!

  "Returns the Shop resource corresponding to the access token used in the request. The Shop resource contains\nbusiness and store management settings for the shop.\n"
  shop: Shop!

  """List of locales available on a shop."""
  shopLocales(
    """Return only published locales."""
    published: Boolean = false
  ): [ShopLocale!]!

  """Shopify Payments account information, including balances and payouts."""
  shopifyPaymentsAccount: ShopifyPaymentsAccount

  """The StaffMember resource, by ID."""
  staffMember(
    """
    The ID of the staff member to return. If no ID is provided, then the staff member making the query (if any) is returned.
    """
    id: ID
  ): StaffMember

  "Standard metafield definitions are intended for specific, common use cases. Their namespace and keys reflect these use cases and are reserved.\n\nRefer to all available [`Standard Metafield Definition Templates`](https://shopify.dev/api/admin-graphql/latest/objects/StandardMetafieldDefinitionTemplate).\n"
  standardMetafieldDefinitionTemplates(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): StandardMetafieldDefinitionTemplateConnection!

  """Returns a SubscriptionBillingAttempt by ID."""
  subscriptionBillingAttempt(
    """The ID of the SubscriptionBillingAttempt to return."""
    id: ID!
  ): SubscriptionBillingAttempt

  """Returns a Subscription Contract resource by ID."""
  subscriptionContract(
    """The ID of the Subscription Contract to return."""
    id: ID!
  ): SubscriptionContract

  """List Subscription Contracts."""
  subscriptionContracts(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SubscriptionContractConnection!

  """Returns a Subscription Draft resource by ID."""
  subscriptionDraft(
    """The ID of the Subscription Draft to return."""
    id: ID!
  ): SubscriptionDraft

  """Returns a list of TenderTransactions associated with the shop."""
  tenderTransactions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `point_of_sale_device_id`\n - `processed_at`\n - `test`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): TenderTransactionConnection!

  """Translatable resource."""
  translatableResource(
    """Find a translatable resource by ID."""
    resourceId: ID!
  ): TranslatableResource

  """List of translatable resources."""
  translatableResources(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Return only resources of a type."""
    resourceType: TranslatableResourceType!

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): TranslatableResourceConnection!

  """A list of translatable resources by IDs."""
  translatableResourcesByIds(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Return only resources for given IDs."""
    resourceIds: [ID!]!

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): TranslatableResourceConnection!

  """Returns a redirect resource by ID."""
  urlRedirect(
    """The ID of the UrlRedirect to return."""
    id: ID!
  ): UrlRedirect

  """Returns a redirect import resource by ID."""
  urlRedirectImport(
    """The ID of the UrlRedirectImport to return."""
    id: ID!
  ): UrlRedirectImport

  """A list of the shop's URL redirect saved searches."""
  urlRedirectSavedSearches(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection!

  """A list of redirects for a shop."""
  urlRedirects(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `created_at`\n - `path`\n - `target`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: UrlRedirectSortKeys = ID
  ): UrlRedirectConnection!

  """Returns a webhook subscription by ID."""
  webhookSubscription(
    """The ID of the WebhookSubscription to return."""
    id: ID!
  ): WebhookSubscription

  """Returns a list of webhook subscriptions."""
  webhookSubscriptions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Callback URL to filter by."""
    callbackUrl: URL

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Response format to filter by."""
    format: WebhookSubscriptionFormat

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `created_at`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: WebhookSubscriptionSortKeys = CREATED_AT

    """List of webhook subscription topics to filter by."""
    topics: [WebhookSubscriptionTopic!]
  ): WebhookSubscriptionConnection!
}

"""
The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items.
"""
type Refund implements LegacyInteroperability & Node {
  """The date and time when the refund was created."""
  createdAt: DateTime

  """A list of the refunded duties as part of this refund."""
  duties: [RefundDuty!]

  """A globally-unique identifier."""
  id: ID!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The optional note associated with the refund."""
  note: String

  """The order associated with the refund."""
  order: Order!

  """The `RefundLineItem` resources attached to the refund."""
  refundLineItems(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): RefundLineItemConnection!

  """The staff member who created the refund."""
  staffMember: StaffMember

  """The total amount across all transactions for the refund."""
  totalRefunded: MoneyV2! @deprecated(reason: "Use `totalRefundedSet` instead")

  """
  The total amount across all transactions for the refund, in shop and presentment currencies.
  """
  totalRefundedSet: MoneyBag!

  """The transactions associated with the refund."""
  transactions(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): OrderTransactionConnection!

  """The date and time when the refund was updated."""
  updatedAt: DateTime!
}

"""
An agreement between the merchant and customer to refund all or a portion of the order.
"""
type RefundAgreement implements SalesAgreement {
  """The application that created the agreement."""
  app: App

  """The date and time at which the agreement occured."""
  happenedAt: DateTime!

  """The unique identifier for the agreement."""
  id: ID!

  """The reason the agremeent was created."""
  reason: OrderActionType!

  """The refund associated with the agreement."""
  refund: Refund!

  """The sales associated with the agreement."""
  sales(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SaleConnection!

  """The staff member associated with the agreement."""
  user: StaffMember
}

"""Return type for `refundCreate` mutation."""
type RefundCreatePayload {
  """The order associated with the created refund."""
  order: Order

  """The created refund."""
  refund: Refund

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Represents a refunded duty."""
type RefundDuty {
  """The amount of a refunded duty in shop and presentment currencies."""
  amountSet: MoneyBag!

  """The duty associated with this refunded duty."""
  originalDuty: Duty
}

"""The fields required to reimburse duties on a refund."""
input RefundDutyInput {
  """The ID of the duty in the refund."""
  dutyId: ID!

  """The type of refund for this duty."""
  refundType: RefundDutyRefundType
}

"""The type of refund to perform for a particular refund duty."""
enum RefundDutyRefundType {
  """The duty is fully refunded."""
  FULL

  """
  The duty is proportionally refunded based on the quantity of the refunded line item.
  """
  PROPORTIONAL
}

"""The input fields to create a refund."""
input RefundInput {
  """
  The currency that is used to refund the order. This must be the presentment currency, which is the currency used by the customer. This is a required field for orders where the currency and presentment currency differ.
  """
  currency: CurrencyCode

  """An optional note that is attached to the refund."""
  note: String

  """Whether to send a refund notification to the customer."""
  notify: Boolean

  """The ID of the order that is being refunded."""
  orderId: ID!

  """A list of duties to refund."""
  refundDuties: [RefundDutyInput!]

  """A list of line items to refund."""
  refundLineItems: [RefundLineItemInput!]

  """The input fields that are required to reimburse shipping costs."""
  shipping: ShippingRefundInput

  """A list of transactions involved in the refund."""
  transactions: [OrderTransactionInput!]
}

"""A line item that's included in a refund."""
type RefundLineItem {
  """The `LineItem` resource associated to the refunded line item."""
  lineItem: LineItem!

  """The inventory restock location."""
  location: Location

  """The price of a refunded line item."""
  price: Money! @deprecated(reason: "Use `priceSet` instead")

  """The price of a refunded line item in shop and presentment currencies."""
  priceSet: MoneyBag!

  """The quantity of a refunded line item."""
  quantity: Int!

  """The type of restock for the refunded line item."""
  restockType: RefundLineItemRestockType!

  """
  Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund.
  """
  restocked: Boolean!

  """The subtotal price of a refunded line item."""
  subtotal: Money! @deprecated(reason: "Use `subtotalSet` instead")

  """
  The subtotal price of a refunded line item in shop and presentment currencies.
  """
  subtotalSet: MoneyBag!

  """The total tax charged on a refunded line item."""
  totalTax: Money! @deprecated(reason: "Use `totalTaxSet` instead")

  """
  The total tax charged on a refunded line item in shop and presentment currencies.
  """
  totalTaxSet: MoneyBag!
}

"An auto-generated type for paginating through multiple RefundLineItems.\n"
type RefundLineItemConnection {
  """A list of edges."""
  edges: [RefundLineItemEdge!]!

  """A list of the nodes contained in RefundLineItemEdge."""
  nodes: [RefundLineItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one RefundLineItem and a cursor during pagination.\n"
type RefundLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of RefundLineItemEdge."""
  node: RefundLineItem!
}

"""The fields required to reimburse line items on a refund."""
input RefundLineItemInput {
  """The ID of the line item in the refund."""
  lineItemId: ID!

  """
  The intended location for restocking. If the `restockType` is set to `NO_RESTOCK`, then this value is empty.`
  """
  locationId: ID

  """The quantity of the associated line item to be refunded."""
  quantity: Int!

  """The type of restock for this line item."""
  restockType: RefundLineItemRestockType
}

"""The type of restock performed for a particular refund line item."""
enum RefundLineItemRestockType {
  """
  The refund line item was canceled. Use this when restocking unfulfilled line items.
  """
  CANCEL

  """
  Deprecated. The refund line item was restocked, without specifically beingidentified as a return or cancelation. This value is not accepted when creating new refunds.
  """
  LEGACY_RESTOCK

  """Refund line item was not restocked."""
  NO_RESTOCK

  """
  The refund line item was returned. Use this when restocking line items that were fulfilled.
  """
  RETURN
}

"Input for a remote Authorize.net customer payment profile.\n"
input RemoteAuthorizeNetCustomerPaymentProfileInput {
  "The customerPaymentProfileId value from the Authorize.net API.\n"
  customerPaymentProfileId: String

  "The customerProfileId value from the Authorize.net API.\n"
  customerProfileId: String!
}

"The input fields for a remote Braintree customer payment profile.\n"
input RemoteBraintreePaymentMethodInput {
  "The `customer_id` value from the Braintree API.\n"
  customerId: String!

  "The `payment_method_token` value from the Braintree API.\n"
  paymentMethodToken: String
}

"Input for a remote stripe payment method.\n"
input RemoteStripePaymentMethodInput {
  "The customer_id value from the Stripe API.\n"
  customerId: String!

  "The payment_method_id value from the Stripe API.\n"
  paymentMethodId: String
}

"An alert message that appears in the Shopify admin about a problem with a store resource, with 1 or more actions to take. For example, you could use an alert to indicate that you're not charging taxes on some product variants.\nThey can optionally have a specific icon and be dismissed by merchants.\n"
type ResourceAlert {
  "Buttons in the alert that link to related information.\nFor example, _Edit variants_.\n"
  actions: [ResourceAlertAction!]!

  "The secondary text in the alert that includes further information or instructions about how to solve a problem.\n"
  content: HTML!

  "Unique identifier that appears when an alert is manually closed by the merchant.\nMost alerts cannot be manually closed.\n"
  dismissibleHandle: String

  """An icon that is optionally displayed with the alert."""
  icon: ResourceAlertIcon

  """Indication of how important the alert is."""
  severity: ResourceAlertSeverity!

  """
  The primary text in the alert that includes information or describes the problem.
  """
  title: String!
}

"""An action associated to a resource alert, such as editing variants."""
type ResourceAlertAction {
  """Whether the action appears as a button or as a link."""
  primary: Boolean!

  """Resource for the action to show."""
  show: String

  """The text for the button in the alert. For example, _Edit variants_."""
  title: String!

  """The target URL that the button links to."""
  url: URL!
}

"""The available icons for resource alerts."""
enum ResourceAlertIcon {
  """A checkmark inside a circle."""
  CHECKMARK_CIRCLE

  """A lowercase `i` inside a circle."""
  INFORMATION_CIRCLE
}

"""The possible severity levels for a resource alert."""
enum ResourceAlertSeverity {
  """Indicates a critical alert. For example, a blocked app."""
  CRITICAL

  """Indicates a neutral alert. For example, an accepted dispute."""
  DEFAULT
  ERROR @deprecated(reason: "`ERROR` severity is being deprecated in favour of `WARNING` or `CRITICAL` instead.")

  """Indicates an informative alert. For example, an escalated dispute."""
  INFO

  """Indicates a success alert. For example, a winning a dispute."""
  SUCCESS

  """Indicates an informative alert. For example, a new dispute."""
  WARNING
}

"Represents feedback from apps about a resource, and the steps required to set up the apps on the shop.\n"
type ResourceFeedback {
  """
  Feedback from an app about the steps a merchant needs to take to set up the app on their store.
  """
  appFeedback: [AppFeedback!]! @deprecated(reason: "Use `details` instead")

  """List of AppFeedback detailing issues regarding a resource."""
  details: [AppFeedback!]!

  """Summary of resource feedback pertaining to the resource."""
  summary: String!
}

"""The state of the resource feedback."""
enum ResourceFeedbackState {
  """No action required from merchant."""
  ACCEPTED

  """The merchant needs to resolve an issue with the resource."""
  REQUIRES_ACTION
}

"""A resource limit represents the limits that the resource has."""
type ResourceLimit {
  """Whether the resource is available."""
  available: Boolean!

  """Quantity available. If null the quantity available is unlimited."""
  quantityAvailable: Int

  """Quantity limit of the resource. If null the quantity is unlimited."""
  quantityLimit: Int

  """
  Quantity used of the resource. If null the quantity used cannot be retrieved.
  """
  quantityUsed: Int
}

"""
A resource publication represents that a resource has been published to a publication.
"""
type ResourcePublication {
  """The channel the resource publication is published to."""
  channel: Channel! @deprecated(reason: "Use `publication` instead")

  "Whether the resource publication is published. Also returns true if the resource publication is scheduled to be published.\nIf false, then the resource publication is neither published nor scheduled to be published.\n"
  isPublished: Boolean!

  """The publication the resource publication is published to."""
  publication: Publication!

  """
  The date that the resource publication was or is going to be published to the publication.
  """
  publishDate: DateTime!

  """The resource published to the publication."""
  publishable: Publishable!
}

"An auto-generated type for paginating through multiple ResourcePublications.\n"
type ResourcePublicationConnection {
  """A list of edges."""
  edges: [ResourcePublicationEdge!]!

  """A list of the nodes contained in ResourcePublicationEdge."""
  nodes: [ResourcePublication!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one ResourcePublication and a cursor during pagination.\n"
type ResourcePublicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ResourcePublicationEdge."""
  node: ResourcePublication!
}

"A resource publication represents that a resource either has been published or will be published to a publication.\n"
type ResourcePublicationV2 {
  "Whether the resource publication is published. If true, then the resource publication is published to the publication.\nIf false, then the resource publication is staged to be published to the publication.\n"
  isPublished: Boolean!

  """The publication the resource publication is published to."""
  publication: Publication!

  """
  The date that the resource publication was or is going to be published to the publication.
  """
  publishDate: DateTime

  """The resource published to the publication."""
  publishable: Publishable!
}

"An auto-generated type for paginating through multiple ResourcePublicationV2s.\n"
type ResourcePublicationV2Connection {
  """A list of edges."""
  edges: [ResourcePublicationV2Edge!]!

  """A list of the nodes contained in ResourcePublicationV2Edge."""
  nodes: [ResourcePublicationV2!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one ResourcePublicationV2 and a cursor during pagination.\n"
type ResourcePublicationV2Edge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ResourcePublicationV2Edge."""
  node: ResourcePublicationV2!
}

"""SEO information."""
type SEO {
  """SEO Description."""
  description: String

  """SEO Title."""
  title: String
}

"""SEO information."""
input SEOInput {
  """SEO description of the product."""
  description: String

  """SEO title of the product."""
  title: String
}

"""An individual sale record associated with a sales agreement."""
interface Sale {
  """The type of order action that the sale represents."""
  actionType: SaleActionType!

  """The unique identifier for the sale."""
  id: ID!

  """The line type assocated with the sale."""
  lineType: SaleLineType!

  """The number of units either ordered or intended to be returned."""
  quantity: Int

  """All individual taxes associated with the sale."""
  taxes: [SaleTax!]!

  """The total sale amount after taxes and discounts."""
  totalAmount: MoneyBag!

  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: MoneyBag!

  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """The total amount of taxes for the sale."""
  totalTaxAmount: MoneyBag!
}

"""The possible order action types for a sale."""
enum SaleActionType {
  """A purchase or charge."""
  ORDER

  """A removal or return."""
  RETURN

  """
  An unknown order action. Represents new actions that may be added in future versions.
  """
  UNKNOWN

  """A change to the price, taxes, or discounts for a prior purchase."""
  UPDATE
}

"An auto-generated type for paginating through multiple Sales.\n"
type SaleConnection {
  """A list of edges."""
  edges: [SaleEdge!]!

  """A list of the nodes contained in SaleEdge."""
  nodes: [Sale!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one Sale and a cursor during pagination.\n"
type SaleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SaleEdge."""
  node: Sale!
}

"""The possible line types for a sale record."""
enum SaleLineType {
  """A sale adjustment."""
  ADJUSTMENT

  """A duty charge."""
  DUTY

  """A gift card."""
  GIFT_CARD

  """A product purchased, returned or exchanged."""
  PRODUCT

  """A shipping cost."""
  SHIPPING

  """A tip added by the customer."""
  TIP

  """
  An unknown sale line. Represents new types that may be added in future versions.
  """
  UNKNOWN
}

"""The tax allocated to a sale from a single tax line."""
type SaleTax {
  """
  The portion of the total tax amount on the related sale that comes from the associated tax line.
  """
  amount: MoneyBag!

  """The unique identifier for the sale tax."""
  id: ID!

  """The tax line associated with the sale."""
  taxLine: TaxLine!
}

"""
An addition, removal, modification, or other sale commitment associated with an order.
"""
interface SalesAgreement {
  """The application that created the agreement."""
  app: App

  """The date and time at which the agreement occured."""
  happenedAt: DateTime!

  """The unique identifier for the agreement."""
  id: ID!

  """The reason the agremeent was created."""
  reason: OrderActionType!

  """The sales associated with the agreement."""
  sales(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SaleConnection!

  """The staff member associated with the agreement."""
  user: StaffMember
}

"An auto-generated type for paginating through multiple SalesAgreements.\n"
type SalesAgreementConnection {
  """A list of edges."""
  edges: [SalesAgreementEdge!]!

  """A list of the nodes contained in SalesAgreementEdge."""
  nodes: [SalesAgreement!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one SalesAgreement and a cursor during pagination.\n"
type SalesAgreementEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SalesAgreementEdge."""
  node: SalesAgreement!
}

"""
A saved search is a representation of a search query saved in the admin.
"""
type SavedSearch implements LegacyInteroperability & Node {
  """The filters of a saved search."""
  filters: [SearchFilter!]!

  """A globally-unique identifier."""
  id: ID!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The name of a saved search."""
  name: String!

  """
  The query string of a saved search. This includes search terms and filters.
  """
  query: String!

  """The type of resource this saved search is searching in."""
  resourceType: SearchResultType!

  """The search terms of a saved search."""
  searchTerms: String!
}

"An auto-generated type for paginating through multiple SavedSearches.\n"
type SavedSearchConnection {
  """A list of edges."""
  edges: [SavedSearchEdge!]!

  """A list of the nodes contained in SavedSearchEdge."""
  nodes: [SavedSearch!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Specifies the fields required to create a saved search."""
input SavedSearchCreateInput {
  """A descriptive name of the saved search."""
  name: String!

  """
  The query string of a saved search. This includes search terms and filters.
  """
  query: String!

  """The type of resource this saved search is searching in."""
  resourceType: SearchResultType!
}

"""Return type for `savedSearchCreate` mutation."""
type SavedSearchCreatePayload {
  """The saved search that was created."""
  savedSearch: SavedSearch

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the fields to delete a saved search."""
input SavedSearchDeleteInput {
  """ID of the saved search to delete."""
  id: ID!
}

"""Return type for `savedSearchDelete` mutation."""
type SavedSearchDeletePayload {
  """The id of the saved search that was deleted."""
  deletedSavedSearchId: ID

  """The shop of the saved search that was deleted."""
  shop: Shop!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type which holds one SavedSearch and a cursor during pagination.\n"
type SavedSearchEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SavedSearchEdge."""
  node: SavedSearch!
}

"""Specifies the fields required to update a saved search."""
input SavedSearchUpdateInput {
  """ID of the saved search to update."""
  id: ID!

  """A descriptive name of the saved search."""
  name: String

  """
  The query string of a saved search. This included search terms and filters.
  """
  query: String
}

"""Return type for `savedSearchUpdate` mutation."""
type SavedSearchUpdatePayload {
  """The saved search that was updated."""
  savedSearch: SavedSearch

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"Script discount applications capture the intentions of a discount that\nwas created by a Shopify Script for an order's line item or shipping line.\n\nDiscount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.\n"
type ScriptDiscountApplication implements DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """The description of the application as defined by the Script."""
  description: String! @deprecated(reason: "Use `title` instead")

  "An ordered index that can be used to identify the discount application and indicate the precedence\nof the discount application for calculations.\n"
  index: Int!

  """How the discount amount is distributed on the discounted lines."""
  targetSelection: DiscountApplicationTargetSelection!

  """Whether the discount is applied on line items or shipping lines."""
  targetType: DiscountApplicationTargetType!

  """The title of the application as defined by the Script."""
  title: String!

  """The value of the discount application."""
  value: PricingValue!
}

"A script tag represents remote JavaScript code that is loaded into the pages of a shop's storefront or the order status page of checkout.\n"
type ScriptTag implements LegacyInteroperability & Node {
  "Whether the Shopify CDN can cache and serve the script tag.\nIf `true`, then the script will be cached and served by the CDN.\nThe cache expires 15 minutes after the script tag is successfully returned.\nIf `false`, then the script will be served as is.\n"
  cache: Boolean!

  """The date and time when the script tag was created."""
  createdAt: DateTime!

  """
  The page or pages on the online store that the script should be included.
  """
  displayScope: ScriptTagDisplayScope!

  """A globally-unique identifier."""
  id: ID!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The URL to the remote script."""
  src: URL!

  """The date and time when the script tag was last updated."""
  updatedAt: DateTime!
}

"An auto-generated type for paginating through multiple ScriptTags.\n"
type ScriptTagConnection {
  """A list of edges."""
  edges: [ScriptTagEdge!]!

  """A list of the nodes contained in ScriptTagEdge."""
  nodes: [ScriptTag!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `scriptTagCreate` mutation."""
type ScriptTagCreatePayload {
  """The script tag that was created."""
  scriptTag: ScriptTag

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `scriptTagDelete` mutation."""
type ScriptTagDeletePayload {
  """The ID of the deleted script tag."""
  deletedScriptTagId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"The page or pages on the online store where the script should be included.\n"
enum ScriptTagDisplayScope {
  """
  Include the script on both the web storefront and the order status page.
  """
  ALL

  """Include the script only on the web storefront."""
  ONLINE_STORE

  """Include the script only on the order status page."""
  ORDER_STATUS
}

"An auto-generated type which holds one ScriptTag and a cursor during pagination.\n"
type ScriptTagEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ScriptTagEdge."""
  node: ScriptTag!
}

"The input fields for a script tag. This input object is used when creating or updating\na script tag to specify its URL, where it should be included, and how it will be cached.\n"
input ScriptTagInput {
  "Whether the Shopify CDN can cache and serve the script tag.\nIf `true`, then the script will be cached and served by the CDN.\nThe cache expires 15 minutes after the script tag is successfully returned.\nIf `false`, then the script is served as is.\nThe default value is `false`.\n"
  cache: Boolean = false

  """
  The page or pages on the online store where the script should be included.
  """
  displayScope: ScriptTagDisplayScope

  """
  The URL of the remote script. For example: `https://example.com/path/to/script.js`.
  """
  src: URL
}

"""Return type for `scriptTagUpdate` mutation."""
type ScriptTagUpdatePayload {
  """The script tag that was updated."""
  scriptTag: ScriptTag

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""A filter in a search query represented by a key value pair."""
type SearchFilter {
  """The key of the search filter."""
  key: String!

  """The value of the search filter."""
  value: String!
}

"""
A list of search filters along with their specific options in value and label pair for filtering.
"""
type SearchFilterOptions {
  """A list of options that can be use to filter product availability."""
  productAvailability: [FilterOption!]!
}

"""Represents an individual result returned from a search."""
type SearchResult {
  """Returns the search result description text."""
  description: String

  """Returns the Image resource presented to accompany a search result."""
  image: Image

  """Returns the ID of the resource returned in the search result."""
  reference: Node!

  """Returns the resource title."""
  title: String!

  """Returns the absolute URL to the resource in the search result."""
  url: URL!
}

"""The connection type for SearchResult."""
type SearchResultConnection {
  """A list of edges."""
  edges: [SearchResultEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  resultsAfterCount: Int! @deprecated(reason: "The provided information is not accurate.")
}

"An auto-generated type which holds one SearchResult and a cursor during pagination.\n"
type SearchResultEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SearchResultEdge."""
  node: SearchResult!
}

"""Specifies the type of resources to be returned from a search."""
enum SearchResultType {
  COLLECTION
  CUSTOMER

  """A code discount redeem code."""
  DISCOUNT_REDEEM_CODE
  DRAFT_ORDER

  """A file."""
  FILE
  ONLINE_STORE_ARTICLE
  ONLINE_STORE_BLOG
  ONLINE_STORE_PAGE
  ORDER
  PRICE_RULE
  PRODUCT

  """A URL redirect."""
  URL_REDIRECT
}

"A dynamic collection of customers based on specific criteria.\n"
type Segment implements Node {
  """The date and time when the segment was added to the store."""
  creationDate: DateTime!

  """A globally-unique identifier."""
  id: ID!

  """The date and time when the segment was last updated."""
  lastEditDate: DateTime!

  """The name of the segment."""
  name: String!

  """
  A precise definition of the segment. The definition is composed of a combination of conditions on facts about customers.
  """
  query: String!
}

"""
A filter that takes a value that's associated with an object. For example, the `tags` field is associated with the [`Customer`](/api/admin-graphql/latest/objects/Customer) object.
"""
type SegmentAssociationFilter implements SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!

  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!

  """The query name of the filter."""
  queryName: String!

  """A list of values for an association segment filter."""
  values(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int
  ): SegmentAssociationFilterValueConnection!
}

"""The values for an association segment filter."""
type SegmentAssociationFilterValue {
  """The localized name of the value."""
  localizedName: String!

  """The query name of the value."""
  queryName: String!
}

"An auto-generated type for paginating through multiple SegmentAssociationFilterValues.\n"
type SegmentAssociationFilterValueConnection {
  """A list of edges."""
  edges: [SegmentAssociationFilterValueEdge!]!

  """A list of the nodes contained in SegmentAssociationFilterValueEdge."""
  nodes: [SegmentAssociationFilterValue!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one SegmentAssociationFilterValue and a cursor during pagination.\n"
type SegmentAssociationFilterValueEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SegmentAssociationFilterValueEdge."""
  node: SegmentAssociationFilterValue!
}

"""The statistics of a given attribute."""
type SegmentAttributeStatistics {
  """The average of a given attribute."""
  average: Float!

  """The sum of a given attribute."""
  sum: Float!
}

"""A filter with a Boolean value that's been added to a segment query."""
type SegmentBooleanFilter implements SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!

  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!

  """The query name of the filter."""
  queryName: String!
}

"An auto-generated type for paginating through multiple Segments.\n"
type SegmentConnection {
  """A list of edges."""
  edges: [SegmentEdge!]!

  """A list of the nodes contained in SegmentEdge."""
  nodes: [Segment!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `segmentCreate` mutation."""
type SegmentCreatePayload {
  """The newly created segment."""
  segment: Segment

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""A filter with a date value that's been added to a segment query."""
type SegmentDateFilter implements SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!

  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!

  """The query name of the filter."""
  queryName: String!
}

"""Return type for `segmentDelete` mutation."""
type SegmentDeletePayload {
  """ID of the deleted segment."""
  deletedSegmentId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type which holds one Segment and a cursor during pagination.\n"
type SegmentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SegmentEdge."""
  node: Segment!
}

"""
A filter with a set of possible values that's been added to a segment query.
"""
type SegmentEnumFilter implements SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!

  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!

  """The query name of the filter."""
  queryName: String!

  """A list of values for an enum segment filter."""
  values(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int
  ): SegmentEnumFilterValueConnection!
}

"""The values for an enum segment filter."""
type SegmentEnumFilterValue {
  """The localized name of the value."""
  localizedName: String!

  """The query name of the value."""
  queryName: String!
}

"An auto-generated type for paginating through multiple SegmentEnumFilterValues.\n"
type SegmentEnumFilterValueConnection {
  """A list of edges."""
  edges: [SegmentEnumFilterValueEdge!]!

  """A list of the nodes contained in SegmentEnumFilterValueEdge."""
  nodes: [SegmentEnumFilterValue!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one SegmentEnumFilterValue and a cursor during pagination.\n"
type SegmentEnumFilterValueEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SegmentEnumFilterValueEdge."""
  node: SegmentEnumFilterValue!
}

"""
A filter that's used to segment customers based on the date that an event occured. For example, the `product_bought` event filter allows you to segment customers based on what products they've bought.
"""
type SegmentEventFilter implements SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!

  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!

  """The parameters for an event segment filter."""
  parameters: [SegmentEventFilterParameter!]!

  """The query name of the filter."""
  queryName: String!

  """The return value type for an event segment filter."""
  returnValueType: String!

  """A list of values for an event segment filter."""
  values(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int
  ): SegmentEventFilterValueConnection!
}

"""The parameters for an event segment filter."""
type SegmentEventFilterParameter {
  """The localized description of the parameter."""
  localizedDescription: String!

  """The localized name of the parameter."""
  localizedName: String!

  """Whether the parameter is optional."""
  optional: Boolean!

  """The type of the parameter."""
  parameterType: String!

  """The query name of the parameter."""
  queryName: String!
}

"""The values for an event segment filter."""
type SegmentEventFilterValue {
  """The localized name of the value."""
  localizedName: String!

  """The query name of the value."""
  queryName: String!
}

"An auto-generated type for paginating through multiple SegmentEventFilterValues.\n"
type SegmentEventFilterValueConnection {
  """A list of edges."""
  edges: [SegmentEventFilterValueEdge!]!

  """A list of the nodes contained in SegmentEventFilterValueEdge."""
  nodes: [SegmentEventFilterValue!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one SegmentEventFilterValue and a cursor during pagination.\n"
type SegmentEventFilterValueEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SegmentEventFilterValueEdge."""
  node: SegmentEventFilterValue!
}

"""The filters used in segment queries associated with a shop."""
interface SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!

  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!

  """The query name of the filter."""
  queryName: String!
}

"An auto-generated type for paginating through multiple SegmentFilters.\n"
type SegmentFilterConnection {
  """A list of edges."""
  edges: [SegmentFilterEdge!]!

  """A list of the nodes contained in SegmentFilterEdge."""
  nodes: [SegmentFilter!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one SegmentFilter and a cursor during pagination.\n"
type SegmentFilterEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SegmentFilterEdge."""
  node: SegmentFilter!
}

"""
A filter with a double-precision, floating-point value that's been added to a segment query.
"""
type SegmentFloatFilter implements SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!

  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!

  """The query name of the filter."""
  queryName: String!
}

"""A filter with an integer that's been added to a segment query."""
type SegmentIntegerFilter implements SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!

  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!

  """The query name of the filter."""
  queryName: String!
}

"The response type for the `segmentMembership` object.\n"
type SegmentMembership {
  """
  A Boolean that indicates whether or not the customer in the query is a member of the segment, which is identified using the `segmentId`.
  """
  isMember: Boolean!

  """A `segmentId` that is used for testing membership."""
  segmentId: ID!
}

"A list of maps that contain `segmentId` IDs and `isMember` Booleans. The maps represent segment memberships.\n"
type SegmentMembershipResponse {
  """The membership status for the given list of segments."""
  memberships: [SegmentMembership!]!
}

"A segment and its corresponding saved search. \nFor example, you can use `SegmentMigration` to retrieve the segment ID that corresponds to a saved search ID.\n"
type SegmentMigration {
  """A globally-unique identifier."""
  id: ID!

  """The ID of the saved search."""
  savedSearchId: ID!

  """The ID of the segment."""
  segmentId: ID
}

"An auto-generated type for paginating through multiple SegmentMigrations.\n"
type SegmentMigrationConnection {
  """A list of edges."""
  edges: [SegmentMigrationEdge!]!

  """A list of the nodes contained in SegmentMigrationEdge."""
  nodes: [SegmentMigration!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one SegmentMigration and a cursor during pagination.\n"
type SegmentMigrationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SegmentMigrationEdge."""
  node: SegmentMigration!
}

"""The set of valid sort keys for the Segment query."""
enum SegmentSortKeys {
  """Sort by the `creation_date` value."""
  CREATION_DATE

  """Sort by the `id` value."""
  ID

  """Sort by the `last_edit_date` value."""
  LAST_EDIT_DATE

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"""The statistics of a given segment."""
type SegmentStatistics {
  """The statistics of a given attribute."""
  attributeStatistics(
    """The attribute that statistics are retrieved for."""
    attributeName: String!
  ): SegmentAttributeStatistics!

  """The total number of members in a given segment."""
  totalCount: Int!
}

"""A filter with a string that's been added to a segment query."""
type SegmentStringFilter implements SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!

  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!

  """The query name of the filter."""
  queryName: String!

  """A list of values for a string segment filter."""
  values(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int
  ): SegmentStringFilterValueConnection!
}

"""The values for a string segment filter."""
type SegmentStringFilterValue {
  """The localized name of the value."""
  localizedName: String!

  """The query name of the value."""
  queryName: String!
}

"An auto-generated type for paginating through multiple SegmentStringFilterValues.\n"
type SegmentStringFilterValueConnection {
  """A list of edges."""
  edges: [SegmentStringFilterValueEdge!]!

  """A list of the nodes contained in SegmentStringFilterValueEdge."""
  nodes: [SegmentStringFilterValue!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one SegmentStringFilterValue and a cursor during pagination.\n"
type SegmentStringFilterValueEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SegmentStringFilterValueEdge."""
  node: SegmentStringFilterValue!
}

"""Return type for `segmentUpdate` mutation."""
type SegmentUpdatePayload {
  """The updated segment."""
  segment: Segment

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"A list of suggested values associated with an individual segment. A\nsegment is a group of members, such as customers, that meet specific\ncriteria.\n"
type SegmentValue {
  """
  The localized version of the value's name. This name is displayed to the merchant.
  """
  localizedValue: String!

  """The name of the query associated with the suggestion."""
  queryName: String!
}

"An auto-generated type for paginating through multiple SegmentValues.\n"
type SegmentValueConnection {
  """A list of edges."""
  edges: [SegmentValueEdge!]!

  """A list of the nodes contained in SegmentValueEdge."""
  nodes: [SegmentValue!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one SegmentValue and a cursor during pagination.\n"
type SegmentValueEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SegmentValueEdge."""
  node: SegmentValue!
}

"Properties used by customers to select a product variant.\nProducts can have multiple options, like different sizes or colors.\n"
type SelectedOption {
  """The product option’s name."""
  name: String!

  """The product option’s value."""
  value: String!
}

"Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups\nand policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing\nup these records if you need to restore them later.\n\nFor more information on selling plans, refer to\n[*Creating and managing selling plans*](https://shopify.dev/apps/subscriptions/selling-plans).\n"
type SellingPlan implements Node {
  """A selling plan policy which describes the recurring billing details."""
  billingPolicy: SellingPlanBillingPolicy!

  """The category used to classify the selling plan for reporting purposes."""
  category: SellingPlanCategory

  """The date and time when the selling plan was created."""
  createdAt: DateTime!

  """A selling plan policy which describes the delivery details."""
  deliveryPolicy: SellingPlanDeliveryPolicy!

  """Buyer facing string which describes the selling plan commitment."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """When to reserve inventory for a selling plan."""
  inventoryPolicy: SellingPlanInventoryPolicy

  "A customer-facing description of the selling plan.\n\nIf your store supports multiple currencies, then don't include country-specific pricing content, such as \"Buy monthly, get 10$ CAD off\". This field won't be converted to reflect different currencies.\n"
  name: String!

  """
  The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
  """
  options: [String!]!

  """
  Relative position of the selling plan for display. A lower position will be displayed before a higher position.
  """
  position: Int

  """Selling plan pricing details."""
  pricingPolicies: [SellingPlanPricingPolicy!]!
}

"""Represents a selling plan policy anchor."""
type SellingPlanAnchor {
  "The cutoff day for the anchor.\n\nIf `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets\nthe days of the week according to ISO 8601, where 1 is Monday.\n\nIf `type` is MONTHDAY, then the value must be between 1-31.\n\nIf `type` is YEARDAY, then the value must be null.\n"
  cutoffDay: Int

  "The day of the anchor.\n\nIf `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets\nthe days of the week according to ISO 8601, where 1 is Monday.\n\nIf `type` is not WEEKDAY, then the value must be between 1-31.\n"
  day: Int!

  "The month of the anchor. If type is different than YEARDAY, this field must be null, otherwise it must be\nbetween 1-12.\n"
  month: Int

  "Represents the anchor type, it can be one one of WEEKDAY, MONTHDAY, YEARDAY.\n"
  type: SellingPlanAnchorType!
}

"""
Specifies the input fields required to create or update a selling plan anchor.
"""
input SellingPlanAnchorInput {
  "The cutoff day of the anchor.\n\nIf `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets\nthe days of the week according to ISO 8601, where 1 is Monday.\n\nIf `type` is MONTHDAY, then the value must be between 1-31.\n\nIf `type` is YEARDAY, then the value must be null.\n\nThis field should only be set if the cutoff field for the delivery policy is null.\n"
  cutoffDay: Int

  "The day of the anchor.\n\nIf `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets\nthe days of the week according to ISO 8601, where 1 is Monday.\n\nIf `type` is not WEEKDAY, then the value must be between 1-31.\n"
  day: Int

  "The month of the anchor. If type is different than YEARDAY, this field must be null, otherwise it must be\nbetween 1-12.\n"
  month: Int

  "Represents the anchor type, must be one of WEEKDAY, MONTHDAY, YEARDAY.\n"
  type: SellingPlanAnchorType
}

"""Represents the anchor type."""
enum SellingPlanAnchorType {
  """Which day of the month, between 1-31."""
  MONTHDAY

  """Which day of the week, between 1-7."""
  WEEKDAY

  """
  Which days of the month and year, month between 1-12, and day between 1-31.
  """
  YEARDAY
}

"Represents the billing frequency associated to the selling plan (for example, bill every week, or bill every\nthree months). The selling plan billing policy and associated records (selling plan groups, selling plans, pricing\npolicies, and delivery policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.\nWe recommend backing up these records if you need to restore them later.\n"
union SellingPlanBillingPolicy = SellingPlanFixedBillingPolicy | SellingPlanRecurringBillingPolicy

"""
The input fields that are required to create or update a billing policy type.
"""
input SellingPlanBillingPolicyInput {
  """The fixed billing policy details."""
  fixed: SellingPlanFixedBillingPolicyInput

  """The recurring billing policy details."""
  recurring: SellingPlanRecurringBillingPolicyInput
}

"""The category of the selling plan."""
enum SellingPlanCategory {
  """The selling plan is for anything not in one of the other categories."""
  OTHER

  """The selling plan is for pre-orders."""
  PRE_ORDER

  """The selling plan is for subscriptions."""
  SUBSCRIPTION

  """The selling plan is for try-before-you-buy."""
  TRY_BEFORE_YOU_BUY
}

"""
The amount charged at checkout when the full amount isn't charged at checkout.
"""
type SellingPlanCheckoutCharge {
  """The charge type for the checkout charge."""
  type: SellingPlanCheckoutChargeType!

  """The charge value for the checkout charge."""
  value: SellingPlanCheckoutChargeValue!
}

"""
The input fields that are required to create or update a checkout charge.
"""
input SellingPlanCheckoutChargeInput {
  """The checkout charge type defined by the policy."""
  type: SellingPlanCheckoutChargeType

  """The checkout charge value defined by the policy."""
  value: SellingPlanCheckoutChargeValueInput
}

"""The percentage value of the price used for checkout charge."""
type SellingPlanCheckoutChargePercentageValue {
  """The percentage value of the price used for checkout charge."""
  percentage: Float!
}

"""The checkout charge when the full amount isn't charged at checkout."""
enum SellingPlanCheckoutChargeType {
  """The checkout charge is a percentage of the product or variant price."""
  PERCENTAGE

  """The checkout charge is a fixed price amount."""
  PRICE
}

"""The portion of the price to be charged at checkout."""
union SellingPlanCheckoutChargeValue = MoneyV2 | SellingPlanCheckoutChargePercentageValue

"""
The input fields required to create or update an checkout charge value.
"""
input SellingPlanCheckoutChargeValueInput {
  """The fixed value for an checkout charge."""
  fixedValue: Decimal

  """The percentage value."""
  percentage: Float
}

"An auto-generated type for paginating through multiple SellingPlans.\n"
type SellingPlanConnection {
  """A list of edges."""
  edges: [SellingPlanEdge!]!

  """A list of the nodes contained in SellingPlanEdge."""
  nodes: [SellingPlan!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"Represents the delivery frequency associated to the selling plan (for example, deliver every month, or deliver\nevery other week). The selling plan delivery policy and associated records (selling plan groups, selling plans,\npricing policies, and billing policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.\nWe recommend backing up these records if you need to restore them later.\n"
union SellingPlanDeliveryPolicy = SellingPlanFixedDeliveryPolicy | SellingPlanRecurringDeliveryPolicy

"""
The input fields that are required to create or update a delivery policy.
"""
input SellingPlanDeliveryPolicyInput {
  """The fixed delivery policy details."""
  fixed: SellingPlanFixedDeliveryPolicyInput

  """The recurring delivery policy details."""
  recurring: SellingPlanRecurringDeliveryPolicyInput
}

"An auto-generated type which holds one SellingPlan and a cursor during pagination.\n"
type SellingPlanEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SellingPlanEdge."""
  node: SellingPlan!
}

"""The fixed selling plan billing policy."""
type SellingPlanFixedBillingPolicy {
  """The checkout charge when the full amount isn't charged at checkout."""
  checkoutCharge: SellingPlanCheckoutCharge!

  """The exact time when to capture the full payment."""
  remainingBalanceChargeExactTime: DateTime

  "The period after remaining_balance_charge_trigger, before capturing the full payment. Expressed as an ISO8601 duration.\n"
  remainingBalanceChargeTimeAfterCheckout: String

  """When to capture payment for amount due."""
  remainingBalanceChargeTrigger: SellingPlanRemainingBalanceChargeTrigger!
}

"""The input fields required to create or update a fixed billing policy."""
input SellingPlanFixedBillingPolicyInput {
  """The checkout charge policy for the selling plan."""
  checkoutCharge: SellingPlanCheckoutChargeInput

  """The date and time to capture the full payment."""
  remainingBalanceChargeExactTime: DateTime

  """
  The period after capturing the payment for the amount due (`remainingBalanceChargeTrigger`), and before capturing the full payment. Expressed as an ISO8601 duration.
  """
  remainingBalanceChargeTimeAfterCheckout: String

  """When to capture the payment for the amount due."""
  remainingBalanceChargeTrigger: SellingPlanRemainingBalanceChargeTrigger
}

"""Represents a fixed selling plan delivery policy."""
type SellingPlanFixedDeliveryPolicy {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [SellingPlanAnchor!]!

  """A buffer period for orders to be included in next fulfillment anchor."""
  cutoff: Int

  """The date and time when the fulfillment should trigger."""
  fulfillmentExactTime: DateTime

  """
  What triggers the fulfillment. The value must be one of ANCHOR, ASAP, EXACT_TIME, or UNKNOWN.
  """
  fulfillmentTrigger: SellingPlanFulfillmentTrigger!

  "Whether the delivery policy is merchant or buyer-centric.\nBuyer-centric delivery policies state the time when the buyer will receive the goods.\nMerchant-centric delivery policies state the time when the fulfillment should be started.\nCurrently, only merchant-centric delivery policies are supported.\n"
  intent: SellingPlanFixedDeliveryPolicyIntent!

  """
  The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`.
  """
  preAnchorBehavior: SellingPlanFixedDeliveryPolicyPreAnchorBehavior!
}

"""The input fields required to create or update a fixed billing policy."""
input SellingPlanFixedDeliveryPolicyInput {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [SellingPlanAnchorInput!]

  """A buffer period for orders to be included in a cycle."""
  cutoff: Int

  """The date and time when the fulfillment should trigger."""
  fulfillmentExactTime: DateTime

  """What triggers the fulfillment."""
  fulfillmentTrigger: SellingPlanFulfillmentTrigger

  """Whether the delivery policy is merchant or buyer-centric."""
  intent: SellingPlanFixedDeliveryPolicyIntent

  """The pre-anchor behavior."""
  preAnchorBehavior: SellingPlanFixedDeliveryPolicyPreAnchorBehavior
}

"""Possible intentions of a Delivery Policy."""
enum SellingPlanFixedDeliveryPolicyIntent {
  "A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment.\n"
  FULFILLMENT_BEGIN
}

"""
The fulfillment or delivery behavior of the first fulfillment when the orderis placed before the anchor.
"""
enum SellingPlanFixedDeliveryPolicyPreAnchorBehavior {
  "Orders placed can be fulfilled / delivered immediately. Orders placed inside a cutoff can be fulfilled / delivered at the next anchor.\n"
  ASAP

  "Orders placed can be fulfilled / delivered at the next anchor date.\nOrders placed inside a cutoff will skip the next anchor and can be fulfilled /\ndelivered at the following anchor.\n"
  NEXT
}

"""Represents a fixed selling plan pricing policy."""
type SellingPlanFixedPricingPolicy implements SellingPlanPricingPolicyBase {
  """The price adjustment type."""
  adjustmentType: SellingPlanPricingPolicyAdjustmentType!

  """The price adjustment value."""
  adjustmentValue: SellingPlanPricingPolicyAdjustmentValue!

  """
  The date and time when the fixed selling plan pricing policy was created.
  """
  createdAt: DateTime!
}

"""
Specifies the input fields required to create or update a fixed selling plan pricing policy.
"""
input SellingPlanFixedPricingPolicyInput {
  """Price adjustment type defined by the policy."""
  adjustmentType: SellingPlanPricingPolicyAdjustmentType

  """Price adjustment value defined by the policy."""
  adjustmentValue: SellingPlanPricingPolicyValueInput

  """ID of the pricing policy."""
  id: ID
}

"""Describes what triggers fulfillment."""
enum SellingPlanFulfillmentTrigger {
  """Use the anchor values to calculate fulfillment date."""
  ANCHOR

  """As soon as possible."""
  ASAP

  """At an exact time defined by the fulfillment_exact_time field."""
  EXACT_TIME

  """Unknown. Usually to be determined in the future."""
  UNKNOWN
}

"Represents a selling method (for example, \"Subscribe and save\" or \"Pre-paid\"). Selling plan groups\nand associated records (selling plans and policies) are deleted 48 hours after a merchant\nuninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.\n"
type SellingPlanGroup implements Node {
  """The identifier for app, exposed in Liquid and product JSON."""
  appId: String

  """
  Whether the given product is directly associated to the selling plan group.
  """
  appliesToProduct(
    """The ID of the product."""
    productId: ID!
  ): Boolean!

  """
  Whether the given product variant is directly associated to the selling plan group.
  """
  appliesToProductVariant(
    """The ID of the product."""
    productVariantId: ID!
  ): Boolean!

  "Whether any of the product variants of the given product are associated to the selling plan group.\n"
  appliesToProductVariants(
    """The ID of the product."""
    productId: ID!
  ): Boolean!

  """The date and time when the selling plan group was created."""
  createdAt: DateTime!

  """The merchant-facing description of the selling plan group."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """The merchant-facing label of the selling plan group."""
  merchantCode: String!

  """The buyer-facing label of the selling plan group."""
  name: String!

  """
  The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
  """
  options: [String!]!

  """The relative position of the selling plan group for display."""
  position: Int

  """A count of products associated to the selling plan group."""
  productCount: Int!

  """A count of product variants associated to the selling plan group."""
  productVariantCount(
    """The ID of the product to scope the count to."""
    productId: ID
  ): Int!

  """Product variants associated to the selling plan group."""
  productVariants(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filters the product variants by a product ID."""
    productId: ID

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductVariantConnection!

  """Products associated to the selling plan group."""
  products(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductConnection!

  """Selling plans associated to the selling plan group."""
  sellingPlans(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SellingPlanConnection!

  """A summary of the policies associated to the selling plan group."""
  summary: String
}

"""Return type for `sellingPlanGroupAddProductVariants` mutation."""
type SellingPlanGroupAddProductVariantsPayload {
  """The updated selling plan group."""
  sellingPlanGroup: SellingPlanGroup

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SellingPlanGroupUserError!]!
}

"""Return type for `sellingPlanGroupAddProducts` mutation."""
type SellingPlanGroupAddProductsPayload {
  """The updated selling plan group."""
  sellingPlanGroup: SellingPlanGroup

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SellingPlanGroupUserError!]!
}

"An auto-generated type for paginating through multiple SellingPlanGroups.\n"
type SellingPlanGroupConnection {
  """A list of edges."""
  edges: [SellingPlanGroupEdge!]!

  """A list of the nodes contained in SellingPlanGroupEdge."""
  nodes: [SellingPlanGroup!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `sellingPlanGroupCreate` mutation."""
type SellingPlanGroupCreatePayload {
  """The created selling plan group object."""
  sellingPlanGroup: SellingPlanGroup

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SellingPlanGroupUserError!]!
}

"""Return type for `sellingPlanGroupDelete` mutation."""
type SellingPlanGroupDeletePayload {
  """The id of the deleted selling plan group object."""
  deletedSellingPlanGroupId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SellingPlanGroupUserError!]!
}

"An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.\n"
type SellingPlanGroupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SellingPlanGroupEdge."""
  node: SellingPlanGroup!
}

"""
Specifies the input fields required to create or update a selling plan group.
"""
input SellingPlanGroupInput {
  """Identifier for app, exposed in Liquid and product JSON."""
  appId: String

  """Merchant facing description of the selling plan group."""
  description: String

  """Merchant facing label of the selling plan group."""
  merchantCode: String

  """Buyer facing label of the selling plan group."""
  name: String

  """
  The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
  """
  options: [String!]

  """
  Relative value for display purposes of the selling plan group. A lower position will be displayed before a higher one.
  """
  position: Int

  """List of selling plans to create."""
  sellingPlansToCreate: [SellingPlanInput!]

  """List of selling plans ids to delete."""
  sellingPlansToDelete: [ID!]

  """List of selling plans to update."""
  sellingPlansToUpdate: [SellingPlanInput!]
}

"""Return type for `sellingPlanGroupRemoveProductVariants` mutation."""
type SellingPlanGroupRemoveProductVariantsPayload {
  """The removed product variant ids."""
  removedProductVariantIds: [ID!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SellingPlanGroupUserError!]!
}

"""Return type for `sellingPlanGroupRemoveProducts` mutation."""
type SellingPlanGroupRemoveProductsPayload {
  """The removed product ids."""
  removedProductIds: [ID!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SellingPlanGroupUserError!]!
}

"""Specifies resource association with a Selling Plan Group."""
input SellingPlanGroupResourceInput {
  """The IDs of the Products to add to the Selling Plan Group."""
  productIds: [ID!]

  """The IDs of the Variants to add to the Selling Plan Group."""
  productVariantIds: [ID!]
}

"""The set of valid sort keys for the SellingPlanGroup query."""
enum SellingPlanGroupSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  """Sort by the `name` value."""
  NAME

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE

  """Sort by the `updated_at` value."""
  UPDATED_AT
}

"""Return type for `sellingPlanGroupUpdate` mutation."""
type SellingPlanGroupUpdatePayload {
  """The IDs of the deleted Subscription Plans."""
  deletedSellingPlanIds: [ID!]

  """The updated Selling Plan Group."""
  sellingPlanGroup: SellingPlanGroup

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SellingPlanGroupUserError!]!
}

"Represents a selling plan group custom error.\n"
type SellingPlanGroupUserError implements DisplayableError {
  """The error code."""
  code: SellingPlanGroupUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `SellingPlanGroupUserError`.
"""
enum SellingPlanGroupUserErrorCode {
  """Billing and delivery policy types must be the same."""
  BILLING_AND_DELIVERY_POLICY_TYPES_MUST_BE_THE_SAME

  """The input value is blank."""
  BLANK

  """A fixed billing policy's checkout charge value and type must match."""
  CHECKOUT_CHARGE_VALUE_AND_TYPE_MUST_MATCH

  """The input value should be equal to the value allowed."""
  EQUAL_TO

  """Could not add the resource to the selling plan group."""
  ERROR_ADDING_RESOURCE_TO_GROUP

  """
  A fixed billing policy's fulfillment_exact_time must not be present when the fulfillment_trigger isn't EXACT_TIME.
  """
  FULFILLMENT_EXACT_TIME_NOT_ALLOWED

  """
  A fixed billing policy's fulfillment_exact_time can't be blank when the fulfillment_trigger is EXACT_TIME.
  """
  FULFILLMENT_EXACT_TIME_REQUIRED

  """The input value should be greater than the minimum allowed value."""
  GREATER_THAN

  """
  The input value should be greater than or equal to the minimum value allowed.
  """
  GREATER_THAN_OR_EQUAL_TO

  """Selling plan group could not be deleted."""
  GROUP_COULD_NOT_BE_DELETED

  """Selling plan group does not exist."""
  GROUP_DOES_NOT_EXIST

  """The input value isn't included in the list."""
  INCLUSION

  """The input value is invalid."""
  INVALID

  """The input value should be less than the maximum value allowed."""
  LESS_THAN

  """
  The input value should be less than or equal to the maximum value allowed.
  """
  LESS_THAN_OR_EQUAL_TO

  """The input value is not a number."""
  NOT_A_NUMBER

  """The record with the ID used as the input value couldn't be found."""
  NOT_FOUND

  """Only one billing policy type can be defined."""
  ONLY_NEED_ONE_BILLING_POLICY_TYPE

  """A fixed billing policy's checkout charge can have at most one value."""
  ONLY_NEED_ONE_CHECKOUT_CHARGE_VALUE

  """Only one delivery policy type can be defined."""
  ONLY_NEED_ONE_DELIVERY_POLICY_TYPE

  """Only one pricing policy type can be defined."""
  ONLY_NEED_ONE_PRICING_POLICY_TYPE

  """Only one pricing policy adjustment value type can be defined."""
  ONLY_NEED_ONE_PRICING_POLICY_VALUE

  """A selling plan can't have both fixed and recurring billing policies."""
  ONLY_ONE_OF_FIXED_OR_RECURRING_BILLING

  """A selling plan can't have both fixed and recurring delivery policies."""
  ONLY_ONE_OF_FIXED_OR_RECURRING_DELIVERY

  """Selling plan does not exist."""
  PLAN_DOES_NOT_EXIST

  """Selling plan ID must be specified to update."""
  PLAN_ID_MUST_BE_SPECIFIED_TO_UPDATE

  """The input value needs to be blank."""
  PRESENT

  """Pricing policy's adjustment value and adjustment type must match."""
  PRICING_POLICY_ADJUSTMENT_VALUE_AND_TYPE_MUST_MATCH

  """Product does not exist."""
  PRODUCT_DOES_NOT_EXIST

  """Product variant does not exist."""
  PRODUCT_VARIANT_DOES_NOT_EXIST

  """
  A fixed billing policy's remaining_balance_charge_exact_time must not be present when the remaining_balance_charge_trigger isn't EXACT_TIME.
  """
  REMAINING_BALANCE_CHARGE_EXACT_TIME_NOT_ALLOWED

  """
  A fixed billing policy's remaining_balance_charge_exact_time can't be blank when the remaining_balance_charge_trigger is EXACT_TIME.
  """
  REMAINING_BALANCE_CHARGE_EXACT_TIME_REQUIRED

  """
  A fixed billing policy's remaining_balance_charge_time_after_checkout must be present and greater than zero when the remaining_balance_charge_trigger is TIME_AFTER_CHECKOUT.
  """
  REMAINING_BALANCE_CHARGE_TIME_AFTER_CHECKOUT_MUST_BE_GREATER_THAN_ZERO

  """
  A fixed billing policy's remaining_balance_charge_trigger can't be NO_REMAINING_BALANCE when the checkout_charge_type is PERCENTAGE and checkout_charge_value is less than 100.
  """
  REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PARTIAL_PERCENTAGE_CHECKOUT_CHARGE

  """
  A fixed billing policy's remaining_balance_charge_trigger can't be NO_REMAINING_BALANCE when the checkout_charge_type is PRICE.
  """
  REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PRICE_CHECKOUT_CHARGE

  """
  A fixed billing policy's remaining_balance_charge_trigger must be NO_REMAINING_BALANCE when the checkout_charge_type is PERCENTAGE and checkout_charge_value is 100.
  """
  REMAINING_BALANCE_CHARGE_TRIGGER_ON_FULL_CHECKOUT

  """The selling plan list provided contains 1 or more invalid IDs."""
  RESOURCE_LIST_CONTAINS_INVALID_IDS

  """
  A fixed delivery policy's anchors must not be present when the fulfillment_trigger isn't ANCHOR.
  """
  SELLING_PLAN_ANCHORS_NOT_ALLOWED

  """
  A fixed delivery policy's anchors must be present when the fulfillment_trigger is ANCHOR.
  """
  SELLING_PLAN_ANCHORS_REQUIRED

  """Selling plan's billing and delivery policies anchors must be equal."""
  SELLING_PLAN_BILLING_AND_DELIVERY_POLICY_ANCHORS_MUST_BE_EQUAL

  """Selling plan's billing cycle must be a multiple of delivery cycle."""
  SELLING_PLAN_BILLING_CYCLE_MUST_BE_A_MULTIPLE_OF_DELIVERY_CYCLE

  """Missing billing policy."""
  SELLING_PLAN_BILLING_POLICY_MISSING

  """Must include at least one selling plan."""
  SELLING_PLAN_COUNT_LOWER_BOUND

  """Exceeded the selling plan limit (20)."""
  SELLING_PLAN_COUNT_UPPER_BOUND

  """Missing delivery policy."""
  SELLING_PLAN_DELIVERY_POLICY_MISSING

  """Cannot have multiple selling plans with the same name."""
  SELLING_PLAN_DUPLICATE_NAME

  """Cannot have multiple selling plans with the same options."""
  SELLING_PLAN_DUPLICATE_OPTIONS

  """A fixed selling plan can have at most one pricing policy."""
  SELLING_PLAN_FIXED_PRICING_POLICIES_LIMIT

  """
  Selling plan's billing policy max cycles must be greater than min cycles.
  """
  SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES

  """
  Cannot define option2 on this selling plan as there's no label on the parent selling plan group.
  """
  SELLING_PLAN_MISSING_OPTION2_LABEL_ON_PARENT_GROUP

  """
  Cannot define option3 on this selling plan as there's no label on the parent selling plan group.
  """
  SELLING_PLAN_MISSING_OPTION3_LABEL_ON_PARENT_GROUP

  """Selling plan's option2 is required because option2 exists."""
  SELLING_PLAN_OPTION2_REQUIRED_AS_DEFINED_ON_PARENT_GROUP

  """Selling plan's option3 is required because option3 exists."""
  SELLING_PLAN_OPTION3_REQUIRED_AS_DEFINED_ON_PARENT_GROUP

  """Selling plans can't have more than 2 pricing policies."""
  SELLING_PLAN_PRICING_POLICIES_LIMIT

  """Selling plan's pricing policies must contain one fixed pricing policy."""
  SELLING_PLAN_PRICING_POLICIES_MUST_CONTAIN_A_FIXED_PRICING_POLICY

  """The input value is already taken."""
  TAKEN

  """The input value is too big."""
  TOO_BIG

  """The input value is too long."""
  TOO_LONG

  """The input value is too short."""
  TOO_SHORT

  """The input value is the wrong length."""
  WRONG_LENGTH
}

"""Specifies the input fields to create or update a selling plan."""
input SellingPlanInput {
  """Selling plan policy which describes the billing details."""
  billingPolicy: SellingPlanBillingPolicyInput

  """
  The category used to classify this selling plan for reporting purposes.
  """
  category: SellingPlanCategory

  """A selling plan policy which describes the delivery details."""
  deliveryPolicy: SellingPlanDeliveryPolicyInput

  """Buyer facing string which describes the selling plan commitment."""
  description: String

  """ID of the selling plan."""
  id: ID

  """A selling plan policy which describes the inventory details."""
  inventoryPolicy: SellingPlanInventoryPolicyInput

  """Buyer facing string which describes the selling plan content."""
  name: String

  """
  The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they are created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
  """
  options: [String!]

  """
  Relative value for display purposes of this plan. A lower position will be displayed before a higher one.
  """
  position: Int

  "The pricing policies which describe the pricing details. Each selling plan\ncan only contain a maximum of 2 pricing policies.\n"
  pricingPolicies: [SellingPlanPricingPolicyInput!]
}

"""Represents valid selling plan interval."""
enum SellingPlanInterval {
  """Day interval."""
  DAY

  """Month interval."""
  MONTH

  """Week interval."""
  WEEK

  """Year interval."""
  YEAR
}

"""The selling plan inventory policy."""
type SellingPlanInventoryPolicy {
  """When to reserve inventory for the order."""
  reserve: SellingPlanReserve!
}

"""The input fields required to create or update an inventory policy."""
input SellingPlanInventoryPolicyInput {
  """
  When to reserve inventory for the order. The value must be ON_FULFILLMENT or ON_SALE.
  """
  reserve: SellingPlanReserve
}

"Represents the type of pricing associated to the selling plan (for example, a $10 or 20% discount that is set\nfor a limited period or that is fixed for the duration of the subscription). Selling plan pricing policies and\nassociated records (selling plan groups, selling plans, billing policy, and delivery policy) are deleted 48\nhours after a merchant uninstalls their subscriptions app. We recommend backing up these records if you need\nto restore them later.\n"
union SellingPlanPricingPolicy = SellingPlanFixedPricingPolicy | SellingPlanRecurringPricingPolicy

"""Represents a selling plan pricing policy adjustment type."""
enum SellingPlanPricingPolicyAdjustmentType {
  """Fixed amount off adjustment."""
  FIXED_AMOUNT

  """Percentage off adjustment."""
  PERCENTAGE

  """Price of the policy."""
  PRICE
}

"""Represents a selling plan pricing policy adjustment value type."""
union SellingPlanPricingPolicyAdjustmentValue = MoneyV2 | SellingPlanPricingPolicyPercentageValue

"""Represents selling plan pricing policy common fields."""
interface SellingPlanPricingPolicyBase {
  """The price adjustment type."""
  adjustmentType: SellingPlanPricingPolicyAdjustmentType!

  """The price adjustment value."""
  adjustmentValue: SellingPlanPricingPolicyAdjustmentValue!
}

"""
Specifies the input fields required to create or update a selling plan pricing policy.
"""
input SellingPlanPricingPolicyInput {
  """Fixed pricing policy details."""
  fixed: SellingPlanFixedPricingPolicyInput

  """Recurring pricing policy details."""
  recurring: SellingPlanRecurringPricingPolicyInput
}

"""The percentage value of a selling plan pricing policy percentage type."""
type SellingPlanPricingPolicyPercentageValue {
  """The percentage value."""
  percentage: Float!
}

"""
The input fields required to create or update a pricing policy adjustment value.
"""
input SellingPlanPricingPolicyValueInput {
  """The fixed value for an fixed amount off or a new policy price."""
  fixedValue: Decimal

  """The percentage value."""
  percentage: Float
}

"""Represents a recurring selling plan billing policy."""
type SellingPlanRecurringBillingPolicy {
  """
  Specific anchor dates upon which the billing interval calculations should be made.
  """
  anchors: [SellingPlanAnchor!]!

  """The date and time when the selling plan billing policy was created."""
  createdAt: DateTime!

  """The billing frequency, it can be either: day, week, month or year."""
  interval: SellingPlanInterval!

  """The number of intervals between billings."""
  intervalCount: Int!

  """Maximum number of billing iterations."""
  maxCycles: Int

  """Minimum number of billing iterations."""
  minCycles: Int
}

"""
Specifies the input fields required to create or update a recurring billing policy.
"""
input SellingPlanRecurringBillingPolicyInput {
  """
  Specific anchor dates upon which the billing interval calculations should be made.
  """
  anchors: [SellingPlanAnchorInput!]

  """The billing frequency, it can be either: day, week, month or year."""
  interval: SellingPlanInterval

  """The number of intervals between billings."""
  intervalCount: Int

  """Maximum number of billing iterations."""
  maxCycles: Int

  """Minimum number of billing iterations."""
  minCycles: Int
}

"""Represents a recurring selling plan delivery policy."""
type SellingPlanRecurringDeliveryPolicy {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [SellingPlanAnchor!]!

  """The date and time when the selling plan delivery policy was created."""
  createdAt: DateTime!

  """A buffer period for orders to be included in a cycle."""
  cutoff: Int

  "Whether the delivery policy is merchant or buyer-centric.\nBuyer-centric delivery policies state the time when the buyer will receive the goods.\nMerchant-centric delivery policies state the time when the fulfillment should be started.\nCurrently, only merchant-centric delivery policies are supported.\n"
  intent: SellingPlanRecurringDeliveryPolicyIntent!

  """The delivery frequency, it can be either: day, week, month or year."""
  interval: SellingPlanInterval!

  """The number of intervals between deliveries."""
  intervalCount: Int!

  """
  The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`.
  """
  preAnchorBehavior: SellingPlanRecurringDeliveryPolicyPreAnchorBehavior!
}

"""
Specifies the input fields to create or update a recurring delivery policy.
"""
input SellingPlanRecurringDeliveryPolicyInput {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [SellingPlanAnchorInput!]

  """A buffer period for orders to be included in a cycle."""
  cutoff: Int

  """
  Intention of this delivery policy, it can be either: delivery or fulfillment.
  """
  intent: SellingPlanRecurringDeliveryPolicyIntent

  """The delivery frequency, it can be either: day, week, month or year."""
  interval: SellingPlanInterval

  """The number of intervals between deliveries."""
  intervalCount: Int

  """The pre-anchor behavior. It can be either: asap or next."""
  preAnchorBehavior: SellingPlanRecurringDeliveryPolicyPreAnchorBehavior
}

"""Whether the delivery policy is merchant or buyer-centric."""
enum SellingPlanRecurringDeliveryPolicyIntent {
  "A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment.\n"
  FULFILLMENT_BEGIN
}

"""
The fulfillment or delivery behaviors of the first fulfillment when the orderis placed before the anchor.
"""
enum SellingPlanRecurringDeliveryPolicyPreAnchorBehavior {
  "The orders placed can be fulfilled or delivered immediately. The orders placed inside a cutoff can be fulfilled or delivered at the next anchor.\n"
  ASAP

  "The orders placed can be fulfilled or delivered at the next anchor date.\nThe orders placed inside a cutoff will skip the next anchor and can be fulfilled or\ndelivered at the following anchor.\n"
  NEXT
}

"""Represents a recurring selling plan pricing policy."""
type SellingPlanRecurringPricingPolicy implements SellingPlanPricingPolicyBase {
  """The price adjustment type."""
  adjustmentType: SellingPlanPricingPolicyAdjustmentType!

  """The price adjustment value."""
  adjustmentValue: SellingPlanPricingPolicyAdjustmentValue!

  """Cycle after which this pricing policy applies."""
  afterCycle: Int

  """
  The date and time when the recurring selling plan pricing policy was created.
  """
  createdAt: DateTime!
}

"""
Specifies the input fields required to create or update a recurring selling plan pricing policy.
"""
input SellingPlanRecurringPricingPolicyInput {
  """Price adjustment type defined by the policy."""
  adjustmentType: SellingPlanPricingPolicyAdjustmentType

  """Price adjustment value defined by the policy."""
  adjustmentValue: SellingPlanPricingPolicyValueInput

  """Cycle after which the pricing policy applies."""
  afterCycle: Int!

  """ID of the pricing policy."""
  id: ID
}

"""When to capture the payment for the remaining amount due."""
enum SellingPlanRemainingBalanceChargeTrigger {
  """
  At an exact time defined by the remaining_balance_charge_exact_time field.
  """
  EXACT_TIME

  """When there's no remaining balance to be charged after checkout."""
  NO_REMAINING_BALANCE

  """
  After the duration defined by the remaining_balance_charge_time_after_checkout field.
  """
  TIME_AFTER_CHECKOUT
}

"""When to reserve inventory for a selling plan."""
enum SellingPlanReserve {
  """Reserve inventory when order is fulfilled."""
  ON_FULFILLMENT

  """Reserve inventory at time of sale."""
  ON_SALE
}

"""The class of the discount for combining purposes."""
enum ShippingDiscountClass {
  """Combined as a shipping discount."""
  SHIPPING
}

"""
Represents the shipping details that the customer chose for their order.
"""
type ShippingLine {
  "A reference to the carrier service that provided the rate.\nPresent when the rate was computed by a third-party carrier service.\n"
  carrierIdentifier: String

  """A reference to the shipping method."""
  code: String

  """Whether the shipping line is custom or not."""
  custom: Boolean!

  """The general classification of the delivery method."""
  deliveryCategory: String

  "The discounts that have been allocated to the shipping line.\n"
  discountAllocations: [DiscountAllocation!]!

  """The pre-tax shipping price with discounts applied."""
  discountedPrice: MoneyV2! @deprecated(reason: "Use `discountedPriceSet` instead")

  """The pre-tax shipping price with discounts applied."""
  discountedPriceSet: MoneyBag!

  """A globally-unique identifier."""
  id: ID

  """The pre-tax shipping price without any discounts applied."""
  originalPrice: MoneyV2! @deprecated(reason: "Use `originalPriceSet` instead")

  """The pre-tax shipping price without any discounts applied."""
  originalPriceSet: MoneyBag!

  """The phone number at the shipping address."""
  phone: String

  """Returns the price of the shipping line."""
  price: Money! @deprecated(reason: "Use `originalPriceSet` instead")

  "The fulfillment service requested for the shipping method.\nPresent if the shipping method requires processing by a third party fulfillment service.\n"
  requestedFulfillmentService: FulfillmentService

  """
  A unique identifier for the shipping rate. The format can change without notice and is not meant to be shown to users.
  """
  shippingRateHandle: String

  """Returns the rate source for the shipping line."""
  source: String

  """The TaxLine objects connected to this shipping line."""
  taxLines: [TaxLine!]!

  """Returns the title of the shipping line."""
  title: String!
}

"An auto-generated type for paginating through multiple ShippingLines.\n"
type ShippingLineConnection {
  """A list of edges."""
  edges: [ShippingLineEdge!]!

  """A list of the nodes contained in ShippingLineEdge."""
  nodes: [ShippingLine!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one ShippingLine and a cursor during pagination.\n"
type ShippingLineEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ShippingLineEdge."""
  node: ShippingLine!
}

"""Specifies the shipping details for the order."""
input ShippingLineInput {
  """Price of the shipping rate."""
  price: Money

  """A unique identifier for the shipping rate."""
  shippingRateHandle: String

  """Title of the shipping rate."""
  title: String
}

"""A sale associated with a shipping charge."""
type ShippingLineSale implements Sale {
  """The type of order action that the sale represents."""
  actionType: SaleActionType!

  """The unique identifier for the sale."""
  id: ID!

  """The line type assocated with the sale."""
  lineType: SaleLineType!

  """The number of units either ordered or intended to be returned."""
  quantity: Int

  """
  The shipping line item for the associated sale. `shippingLine` is not available if the `SaleActionType` is a return.
  """
  shippingLine: ShippingLine

  """All individual taxes associated with the sale."""
  taxes: [SaleTax!]!

  """The total sale amount after taxes and discounts."""
  totalAmount: MoneyBag!

  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: MoneyBag!

  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """The total amount of taxes for the sale."""
  totalTaxAmount: MoneyBag!
}

"The shipping method for the delivery. Customers will see applicable shipping methods in the shipping section of checkout.\n"
type ShippingMethod {
  """A unique code associated with the rate. For example: `expedited_mail`"""
  code: String!

  "A description of the rate, which customers will see at checkout.\nFor example: `Local delivery`, `Free Express Worldwide`, `Includes tracking and insurance`.\n"
  label: String!
}

"""Return type for `shippingPackageDelete` mutation."""
type ShippingPackageDeletePayload {
  """The ID of the deleted shipping package."""
  deletedId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `shippingPackageMakeDefault` mutation."""
type ShippingPackageMakeDefaultPayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `shippingPackageUpdate` mutation."""
type ShippingPackageUpdatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""
A shipping rate is an additional cost added to the cost of the products that were ordered.
"""
type ShippingRate {
  """Human-readable unique identifier for this shipping rate."""
  handle: String!

  """The cost associated with the shipping rate."""
  price: MoneyV2!

  """The name of the shipping rate."""
  title: String!
}

"""Represents the shipping costs refunded on the Refund."""
type ShippingRefund {
  """The monetary value of the shipping fees to be refunded."""
  amount: Money! @deprecated(reason: "Use `amountSet` instead")

  """
  The monetary value of the shipping fees to be refunded in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """The maximum amount of shipping fees currently refundable."""
  maximumRefundable: Money! @deprecated(reason: "Use `maximumRefundableSet` instead")

  """
  The maximum amount of shipping fees currently refundable in shop and presentment currencies.
  """
  maximumRefundableSet: MoneyBag!

  """
  The monetary value of the tax allocated to shipping fees to be refunded.
  """
  tax: Money! @deprecated(reason: "Use `taxSet` instead")

  """
  The monetary value of the tax allocated to shipping fees to be refunded in shop and presentment currencies.
  """
  taxSet: MoneyBag!
}

"""The input fields that are required to reimburse shipping costs."""
input ShippingRefundInput {
  """The monetary value of the shipping fees to be reimbursed."""
  amount: Money

  """Whether a full refund is provided."""
  fullRefund: Boolean
}

"Represents a collection of the general settings and information about the shop.\n"
type Shop implements HasMetafields & HasPublishedTranslations & Node {
  """
  A list of the shop's active alert messages that appear in the Shopify admin.
  """
  alerts: [ShopAlert!]!

  """The token required to query the shop's reports or dashboards."""
  analyticsToken: String! @deprecated(reason: "Not supported anymore.")

  """
  The paginated list of fulfillment orders assigned to fulfillment services.
  """
  assignedFulfillmentOrders(
    """Returns the elements that come after the specified cursor."""
    after: String

    """
    The assigment status of the fulfillment orders that should be returned.
    """
    assignmentStatus: FulfillmentOrderAssignmentStatus

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """
    Returns fulfillment orders only for certain locations, specified by a list of location IDs.
    """
    locationIds: [ID!]

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: FulfillmentOrderSortKeys = ID
  ): FulfillmentOrderConnection!

  """The list of sales channels not currently installed on the shop."""
  availableChannelApps(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): AppConnection!

  """The shop's billing address information."""
  billingAddress: MailingAddress!

  """Exposes the number of channels."""
  channelCount: Int! @deprecated(reason: "Use `publicationCount` instead")

  """List of all channel definitions associated with a shop."""
  channelDefinitionsForInstalledChannels: [AvailableChannelDefinitionsByChannel!]!

  """List of the shop's active sales channels."""
  channels(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ChannelConnection! @deprecated(reason: "Use `QueryRoot.channels` instead.")

  """Specifies whether the shop supports checkouts via Checkout API."""
  checkoutApiSupported: Boolean!

  """Return a collection by its handle."""
  collectionByHandle(
    """The handle of the collection."""
    handle: String!
  ): Collection @deprecated(reason: "Use `QueryRoot.collectionByHandle` instead.")

  """List of the shop's collection saved searches."""
  collectionSavedSearches(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.collectionSavedSearches` instead.")

  """List of the shop's collections."""
  collections(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `collection_type`\n - `publishable_status`\n - `published_status`\n - `title`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: CollectionSortKeys = ID
  ): CollectionConnection! @deprecated(reason: "Use `QueryRoot.collections` instead.")

  "The public-facing contact email address for the shop.\nCustomers will use this email to communicate with the shop owner.\n"
  contactEmail: String!

  """Countries that have been defined in shipping zones for the shop."""
  countriesInShippingZones: CountriesInShippingZones!

  """The three letter code for the shop's currency."""
  currencyCode: CurrencyCode!

  """How currencies are displayed on your store."""
  currencyFormats: CurrencyFormats!

  """
  The presentment currency settings for the shop excluding the shop's own currency.
  """
  currencySettings(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CurrencySettingConnection!

  """
  Whether customer accounts are required, optional, or disabled for the shop.
  """
  customerAccounts: ShopCustomerAccountsSetting!

  """List of the shop's customer saved searches."""
  customerSavedSearches(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `name`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: CustomerSavedSearchSortKeys = ID
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.customerSavedSearches` instead.")

  """A list of tags that have been added to customer accounts."""
  customerTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): StringConnection!

  """Customer accounts associated to the shop."""
  customers(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `accepts_marketing`\n - `country`\n - `customer_date`\n - `email`\n - `last_abandoned_order_date`\n - `order_date`\n - `orders_count`\n - `phone`\n - `state`\n - `tag`\n - `tag_not`\n - `total_spent`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: CustomerSortKeys = ID
  ): CustomerConnection! @deprecated(reason: "Use `QueryRoot.customers` instead.")

  """The shop's meta description used in search engine results."""
  description: String

  """The domains configured for the shop."""
  domains: [Domain!]!

  """List of the shop's draft order saved searches."""
  draftOrderSavedSearches(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.draftOrderSavedSearches` instead.")

  """A list of tags that have been added to draft orders."""
  draftOrderTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): StringConnection!

  """List of saved draft orders on the shop."""
  draftOrders(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `created_at`\n - `customer_id`\n - `source`\n - `status`\n - `tag`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: DraftOrderSortKeys = ID
  ): DraftOrderConnection! @deprecated(reason: "Use `QueryRoot.draftOrders` instead.")

  "The shop owner's email address.\nShopify will use this email address to communicate with the shop owner.\n"
  email: String!

  """The presentment currencies enabled for the shop."""
  enabledPresentmentCurrencies: [CurrencyCode!]!

  """The set of features enabled for the shop."""
  features: ShopFeatures!

  """
  The paginated list of merchant-managed and third-party fulfillment orders.
  """
  fulfillmentOrders(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Whether to include closed fulfillment orders."""
    includeClosed: Boolean = false

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `assigned_location_id`\n - `status`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: FulfillmentOrderSortKeys = ID
  ): FulfillmentOrderConnection!

  """List of the shop's installed fulfillment services."""
  fulfillmentServices: [FulfillmentService!]!

  """The shop's time zone as defined by the IANA."""
  ianaTimezone: String!

  """A globally-unique identifier."""
  id: ID!

  """List of the shop's inventory items."""
  inventoryItems(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `created_at`\n - `id`\n - `sku`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): InventoryItemConnection! @deprecated(reason: "Use `QueryRoot.inventoryItems` instead.")

  "The number of pendings orders on the shop.\nLimited to a maximum of 10000.\n"
  limitedPendingOrderCount: LimitedPendingOrderCount!

  """List of active locations of the shop."""
  locations(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """If true, also include the locations that are deactivated."""
    includeInactive: Boolean = false

    """If true, also include the legacy locations of fulfillment services."""
    includeLegacy: Boolean = false

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `active`\n - `address1`\n - `address2`\n - `city`\n - `country`\n - `legacy`\n - `name`\n - `province`\n - `zip`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: LocationSortKeys = NAME
  ): LocationConnection! @deprecated(reason: "Use `QueryRoot.locations` instead.")

  """List of a shop's marketing events."""
  marketingEvents(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `app_id`\n - `description`\n - `started_at`\n - `type`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: MarketingEventSortKeys = ID
  ): MarketingEventConnection! @deprecated(reason: "Use `QueryRoot.marketingEvents` instead.")

  """The approval signals for a shop to support onboarding to channel apps."""
  merchantApprovalSignals: MerchantApprovalSignals

  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The key for the metafield."""
    key: String!

    """The namespace for the metafield."""
    namespace: String!
  ): Metafield

  """List of metafields that belong to the resource."""
  metafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """The metafield namespace to filter by."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  """The shop's .myshopify.com domain name."""
  myshopifyDomain: String!

  """The shop's name."""
  name: String!

  """The shop's settings related to navigation."""
  navigationSettings: [NavigationItem!]!

  """The prefix that appears before order numbers."""
  orderNumberFormatPrefix: String!

  """The suffix that appears after order numbers."""
  orderNumberFormatSuffix: String!

  """List of the shop's order saved searches."""
  orderSavedSearches(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.orderSavedSearches` instead.")

  """A list of tags that have been added to orders."""
  orderTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!

    """Sort type."""
    sort: ShopTagSort = ALPHABETICAL
  ): StringConnection!

  """A list of the shop's orders."""
  orders(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `cart_token`\n - `channel`\n - `channel_id`\n - `chargeback_status`\n - `checkout_token`\n - `created_at`\n - `credit_card_last4`\n - `customer_id`\n - `delivery_method`\n - `discount_code`\n - `earliest_fulfill_by`\n - `email`\n - `financial_status`\n - `fraud_protection_level`\n - `fulfillment_location_id`\n - `fulfillment_status`\n - `gateway`\n - `location_id`\n - `name`\n - `payment_provider_id`\n - `processed_at`\n - `reference_location_id`\n - `return_status`\n - `risk_level`\n - `sales_channel`\n - `source_identifier`\n - `source_name`\n - `status`\n - `tag`\n - `tag_not`\n - `test`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: OrderSortKeys = PROCESSED_AT
  ): OrderConnection! @deprecated(reason: "Use `QueryRoot.orders` instead.")

  """The shop's settings related to payments."""
  paymentSettings: PaymentSettings!

  """Number of pending orders on the shop."""
  pendingOrderCount: Int! @deprecated(reason: "Use `limitedPendingOrderCount` instead")

  """The shop's billing plan."""
  plan: ShopPlan!

  """List of the shop's price rule saved searches."""
  priceRuleSavedSearches(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.priceRuleSavedSearches` instead.")

  """List of the shop’s price rules."""
  priceRules(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `created_at`\n - `discount_type`\n - `ends_at`\n - `starts_at`\n - `status`\n - `times_used`\n - `updated_at`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: PriceRuleSortKeys = ID
  ): PriceRuleConnection! @deprecated(reason: "Use `QueryRoot.priceRules` instead.")

  """The primary domain of the shop's online store."""
  primaryDomain: Domain!

  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The key for the private metafield."""
    key: String!

    """The namespace for the private metafield."""
    namespace: String!
  ): PrivateMetafield

  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Filter the private metafields by namespace."""
    namespace: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PrivateMetafieldConnection!

  """Return a product by its handle."""
  productByHandle(
    """The handle of the product."""
    handle: String!
  ): Product @deprecated(reason: "Use `QueryRoot.productByHandle` instead.")

  """The list of all images of all products for the shop."""
  productImages(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductImageSortKeys = CREATED_AT
  ): ImageConnection!

  """List of the shop's product saved searches."""
  productSavedSearches(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.productSavedSearches` instead.")

  """A list of tags that have been added to products."""
  productTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): StringConnection!

  """The list of types added to products."""
  productTypes(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): StringConnection!

  """List of the shop's product variants."""
  productVariants(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `barcode`\n - `collection`\n - `delivery_profile_id`\n - `exclude_composite`\n - `gift_card`\n - `inventory_quantity`\n - `location_id`\n - `managed`\n - `managed_by`\n - `product_id`\n - `product_status`\n - `product_type`\n - `publishable_status`\n - `published_status`\n - `sku`\n - `tag`\n - `tag_not`\n - `taxable`\n - `title`\n - `updated_at`\n - `vendor`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductVariantSortKeys = ID
  ): ProductVariantConnection! @deprecated(reason: "Use `QueryRoot.productVariants` instead.")

  """The list of vendors added to products."""
  productVendors(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): StringConnection!

  """List of the shop's products."""
  products(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `barcode`\n - `created_at`\n - `delivery_profile_id`\n - `error_feedback`\n - `gift_card`\n - `has_only_composites`\n - `has_only_default_variant`\n - `id`\n - `inventory_total`\n - `is_price_reduced`\n - `out_of_stock_somewhere`\n - `price`\n - `product_type`\n - `publishable_status`\n - `published_status`\n - `sku`\n - `status`\n - `tag`\n - `tag_not`\n - `title`\n - `updated_at`\n - `vendor`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    "The ID of an existing saved search.\nThe search’s query string is used as the query argument.\nRefer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).\n"
    savedSearchId: ID

    """Sort the underlying list by the given key."""
    sortKey: ProductSortKeys = ID
  ): ProductConnection! @deprecated(reason: "Use `QueryRoot.products`.")

  """The number of publications for the shop."""
  publicationCount: Int!

  """
  The shop's limits for specific resources. For example, the maximum number ofvariants allowed per product, or the maximum number of locations allowed.
  """
  resourceLimits: ShopResourceLimits!

  """The URL of the rich text editor that can be used for mobile devices."""
  richTextEditorUrl: URL!

  """Fetches a list of admin search results by a specified query."""
  search(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the first `n` elements from the list."""
    first: Int!

    """The search query to filter by."""
    query: String!

    """The search result types to filter by."""
    types: [SearchResultType!]
  ): SearchResultConnection!

  """
  The list of search filter options for the shop. These can be used to filter productvisibility for the shop.
  """
  searchFilters: SearchFilterOptions!

  """Whether the shop has outstanding setup steps."""
  setupRequired: Boolean!

  """The list of countries that the shop ships to."""
  shipsToCountries: [CountryCode!]!

  """The list of all legal policies associated with a shop."""
  shopPolicies: [ShopPolicy!]!

  """Shopify Payments account information, including balances and payouts."""
  shopifyPaymentsAccount: ShopifyPaymentsAccount @deprecated(reason: "Use `QueryRoot.shopifyPaymentsAccount` instead.")

  """The paginated list of the shop's staff members."""
  staffMembers(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): StaffMemberConnection!

  """
  The storefront access token of a private application. These are scoped per-application.
  """
  storefrontAccessTokens(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): StorefrontAccessTokenConnection!

  """The URL of the shop's storefront."""
  storefrontUrl: URL! @deprecated(reason: "Use `url` instead")

  """Whether the shop charges taxes for shipping."""
  taxShipping: Boolean!

  """Whether applicable taxes are included in the shop's product prices."""
  taxesIncluded: Boolean!

  """The shop's time zone abbreviation."""
  timezoneAbbreviation: String!

  """The shop's time zone offset."""
  timezoneOffset: String!

  """The shop's time zone offset expressed as a number of minutes."""
  timezoneOffsetMinutes: Int!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [PublishedTranslation!]!

  """The shop's unit system for weights and measures."""
  unitSystem: UnitSystem!

  """Fetches a list of images uploaded to the shop by their IDs."""
  uploadedImagesByIds(
    """The IDs of the uploaded images."""
    imageIds: [ID!]!
  ): [Image!]!

  """The URL of the shop's online store."""
  url: URL!

  """The shop's primary unit of weight for products and shipping."""
  weightUnit: WeightUnit!
}

"An alert message that appears in the Shopify admin about a problem with a store setting, with an action to take. For example, you could show an alert to ask the merchant to enter their billing information to activate Shopify Plus.\n"
type ShopAlert {
  "The text for the button in the alert that links to related information. For example, _Add credit card_.\n"
  action: ShopAlertAction!

  """
  A description of the alert and further information, such as whether the merchant will be charged.
  """
  description: String!
}

"""An action associated to a shop alert, such as adding a credit card."""
type ShopAlertAction {
  """The text for the button in the alert. For example, _Add credit card_."""
  title: String!

  """The target URL that the button links to."""
  url: URL!
}

"Possible branding of a shop.\nBranding can be used to define the look of a shop including its styling and logo in the Shopify Admin.\n"
enum ShopBranding {
  """Shop has Rogers branding."""
  ROGERS

  """Shop has Shopify branding."""
  SHOPIFY

  """Shop has Shopify Gold branding."""
  SHOPIFY_GOLD

  """Shop has Shopify Plus branding."""
  SHOPIFY_PLUS
}

"Represents the shop's customer account requirement preference.\n"
enum ShopCustomerAccountsSetting {
  DISABLED
  OPTIONAL
  REQUIRED
}

"Represents the feature set available to the shop.\nMost fields specify whether a feature is enabled for a shop, and some fields return information\nrelated to specific features.\n"
type ShopFeatures {
  """Whether a shop has access to Avalara AvaTax."""
  avalaraAvatax: Boolean!

  """
  The branding of the shop, which influences its look and feel in the Shopify admin.
  """
  branding: ShopBranding!

  """Whether a shop's online store can have CAPTCHA protection."""
  captcha: Boolean!

  """
  Whether a shop's online store can have CAPTCHA protection for domains not managed by Shopify.
  """
  captchaExternalDomains: Boolean!

  """Whether the delivery profiles functionality is enabled for this shop."""
  deliveryProfiles: Boolean! @deprecated(reason: "Delivery profiles are now 100% enabled across Shopify.")

  """
  Whether a shop has access to the Google Analytics dynamic remarketing feature.
  """
  dynamicRemarketing: Boolean!

  """Whether a shop can be migrated to use Shopify subscriptions."""
  eligibleForSubscriptionMigration: Boolean!

  """Whether a shop is configured properly to sell subscriptions."""
  eligibleForSubscriptions: Boolean!

  """Whether a shop can create gift cards."""
  giftCards: Boolean!

  "Whether a shop displays Harmonized System codes on products. This is used for customs when shipping\ninternationally.\n"
  harmonizedSystemCode: Boolean!

  """Whether a shop can enable international domains."""
  internationalDomains: Boolean!

  """Whether a shop can enable international price overrides."""
  internationalPriceOverrides: Boolean!

  """Whether a shop can enable international price rules."""
  internationalPriceRules: Boolean!

  """
  Whether a shop has enabled a legacy subscription gateway to handle older subscriptions.
  """
  legacySubscriptionGatewayEnabled: Boolean!

  "Whether to show the Live View metrics in the Shopify admin. Live view is hidden from merchants that are on a trial\nor don't have a storefront.\n"
  liveView: Boolean!

  """Whether a shop has multi-location functionality."""
  multiLocation: Boolean! @deprecated(reason: "All shops support multi-location inventory. Use `QueryRoot.locations` to determine whether shop has more than one location.\n")

  """Whether a shop has access to the onboarding visual."""
  onboardingVisual: Boolean!

  """
  Whether a shop is configured to sell subscriptions with PayPal Express.
  """
  paypalExpressSubscriptionGatewayStatus: PaypalExpressSubscriptionsGatewayStatus!

  """Whether a shop has access to all reporting features."""
  reports: Boolean!

  """Whether a shop has ever had subscription products."""
  sellsSubscriptions: Boolean!

  """Whether the shop has a Shopify Plus subscription."""
  shopifyPlus: Boolean! @deprecated(reason: "Use Shop.plan.shopifyPlus instead.")

  "Whether to show metrics in the Shopify admin. Metrics are hidden for new merchants until they become meaningful.\n"
  showMetrics: Boolean!

  """Whether a shop has an online store."""
  storefront: Boolean!

  """Whether a shop is using Shopify Balance."""
  usingShopifyBalance: Boolean!
}

"""A locale that's been enabled on a shop."""
type ShopLocale {
  """The locale ISO code."""
  locale: String!

  """The human-readable locale name."""
  name: String!

  """Whether the locale is the default locale for the shop."""
  primary: Boolean!

  """Whether the locale is visible to buyers."""
  published: Boolean!
}

"""Return type for `shopLocaleDisable` mutation."""
type ShopLocaleDisablePayload {
  """ISO code of the locale that was deleted."""
  locale: String

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `shopLocaleEnable` mutation."""
type ShopLocaleEnablePayload {
  """ISO code of the locale that was enabled."""
  shopLocale: ShopLocale

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"Specifies the input fields for a shop locale.\n"
input ShopLocaleInput {
  """
  Specifies the published state of the locale. Only published locales are visible to the buyer.
  """
  published: Boolean
}

"""Return type for `shopLocaleUpdate` mutation."""
type ShopLocaleUpdatePayload {
  """The locale that was updated."""
  shopLocale: ShopLocale

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"The billing plan of the shop.\n"
type ShopPlan {
  """The name of the shop's billing plan."""
  displayName: String!

  """Whether the shop is a partner development shop for testing purposes."""
  partnerDevelopment: Boolean!

  """Whether the shop has a Shopify Plus subscription."""
  shopifyPlus: Boolean!
}

"""
Policy that a merchant has configured for their store, such as their refund or privacy policy.
"""
type ShopPolicy implements HasPublishedTranslations & Node {
  """The text of the policy. The maximum size is 512kb."""
  body: HTML!

  """A globally-unique identifier."""
  id: ID!

  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
  ): [PublishedTranslation!]!

  """The shop policy type."""
  type: ShopPolicyType!

  """The public URL of the policy."""
  url: URL!
}

"""Possible error codes that can be returned by `ShopPolicyUserError`."""
enum ShopPolicyErrorCode {
  """The input value is too big."""
  TOO_BIG
}

"""Specifies the input fields required to update a policy."""
input ShopPolicyInput {
  """Policy text, maximum size of 512kb."""
  body: String!

  """The shop policy type."""
  type: ShopPolicyType!
}

"""Available shop policy types."""
enum ShopPolicyType {
  """The legal notice."""
  LEGAL_NOTICE

  """The privacy policy."""
  PRIVACY_POLICY

  """The refund policy."""
  REFUND_POLICY

  """The shipping policy."""
  SHIPPING_POLICY

  """The subscription policy."""
  SUBSCRIPTION_POLICY

  """The terms of sale."""
  TERMS_OF_SALE

  """The terms of service."""
  TERMS_OF_SERVICE
}

"""Return type for `shopPolicyUpdate` mutation."""
type ShopPolicyUpdatePayload {
  """The shop policy that has been updated."""
  shopPolicy: ShopPolicy

  """The list of errors that occurred from executing the mutation."""
  userErrors: [ShopPolicyUserError!]!
}

"""An error that occurs during the execution of a shop policy mutation."""
type ShopPolicyUserError implements DisplayableError {
  """The error code."""
  code: ShopPolicyErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""Resource limits of a shop."""
type ShopResourceLimits {
  """Maximum number of locations allowed."""
  locationLimit: Int!

  """Maximum number of product options allowed."""
  maxProductOptions: Int!

  """The maximum number of variants allowed per product."""
  maxProductVariants: Int!

  """
  Whether the shop has reached the limit of the number of URL redirects it can make for resources.
  """
  redirectLimitReached: Boolean!

  """
  The maximum number of variants allowed per shop. If the shop has unlimited SKUs, then the quantity used cannot be retrieved.
  """
  skuResourceLimits: ResourceLimit!
}

"""Possible sort of tags."""
enum ShopTagSort {
  """Alphabetical sort."""
  ALPHABETICAL

  """Popularity sort."""
  POPULAR
}

"Balance and payout information for a\n[Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)\naccount. Balance includes all balances for the currencies supported by the shop.\nYou can also query for a list of payouts, where each payout includes the corresponding currencyCode field.\n"
type ShopifyPaymentsAccount implements Node {
  """Whether the Shopify Payments setup is completed."""
  activated: Boolean!

  """Current balances in all currencies for the account."""
  balance: [MoneyV2!]!

  """All bank accounts configured for the Shopify Payments account."""
  bankAccounts(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyPaymentsBankAccountConnection!

  "The statement descriptor used for charges.\n\nThe statement descriptor appears on a customer's credit card or bank statement when they make a purchase.\n"
  chargeStatementDescriptor: String @deprecated(reason: "Use `chargeStatementDescriptors` instead")

  "The statement descriptors used for charges.\n\nThese descriptors appear on a customer's credit card or bank statement when they make a purchase.\n"
  chargeStatementDescriptors: ShopifyPaymentsChargeStatementDescriptor

  """The Shopify Payments account country."""
  country: String!

  """The default payout currency for the Shopify Payments account."""
  defaultCurrency: CurrencyCode!

  """All disputes related to the Shopify Payments account."""
  disputes(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    "Supported filter parameters:\n - `id`\n - `initiated_at`\n - `status`\n\nSee the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)\nfor more information about using filters.\n"
    query: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyPaymentsDisputeConnection!

  """The fraud settings of the Shopify Payments account."""
  fraudSettings: ShopifyPaymentsFraudSettings!

  """A globally-unique identifier."""
  id: ID!

  """The notifications settings for the account."""
  notificationSettings: ShopifyPaymentsNotificationSettings!

  """Whether the Shopify Payments account can be onboarded."""
  onboardable: Boolean!

  """The payout schedule for the account."""
  payoutSchedule: ShopifyPaymentsPayoutSchedule!

  "The descriptor used for payouts.\n\nThe descriptor appears on a merchant's bank statement when they receive a payout.\n"
  payoutStatementDescriptor: String

  """
  All current and previous payouts made between the account and the bank account.
  """
  payouts(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Filter the direction of the payout."""
    transactionType: ShopifyPaymentsPayoutTransactionType
  ): ShopifyPaymentsPayoutConnection!

  """The permitted documents for identity verification."""
  permittedVerificationDocuments: [ShopifyPaymentsVerificationDocument!]!

  """The verifications necessary for this account."""
  verifications: [ShopifyPaymentsVerification!]!
}

"A bank account that can receive payouts.\n"
type ShopifyPaymentsBankAccount implements Node {
  """The account number of the bank account."""
  accountNumber: String!

  """The last digits of the account number (the rest is redacted)."""
  accountNumberLastDigits: String!

  "The name of the bank.\n"
  bankName: String

  "The country of the bank.\n"
  country: CountryCode!

  """The date that the bank account was created."""
  createdAt: DateTime!

  "The currency of the bank account.\n"
  currency: CurrencyCode!

  """A globally-unique identifier."""
  id: ID!

  """
  All current and previous payouts made between the account and the bank account.
  """
  payouts(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Filter the direction of the payout."""
    transactionType: ShopifyPaymentsPayoutTransactionType
  ): ShopifyPaymentsPayoutConnection!

  "The routing number of the bank account.\n"
  routingNumber: String!

  "The status of the bank account.\n"
  status: ShopifyPaymentsBankAccountStatus!
}

"An auto-generated type for paginating through multiple ShopifyPaymentsBankAccounts.\n"
type ShopifyPaymentsBankAccountConnection {
  """A list of edges."""
  edges: [ShopifyPaymentsBankAccountEdge!]!

  """A list of the nodes contained in ShopifyPaymentsBankAccountEdge."""
  nodes: [ShopifyPaymentsBankAccount!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one ShopifyPaymentsBankAccount and a cursor during pagination.\n"
type ShopifyPaymentsBankAccountEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ShopifyPaymentsBankAccountEdge."""
  node: ShopifyPaymentsBankAccount!
}

"""The bank account status."""
enum ShopifyPaymentsBankAccountStatus {
  """A payout to the bank account failed."""
  ERRORED

  """A bank account that hasn't had any activity and that's not validated."""
  NEW

  """It was determined that the bank account exists."""
  VALIDATED

  """Bank account validation was successful."""
  VERIFIED
}

"""The charge descriptors for a payments account."""
interface ShopifyPaymentsChargeStatementDescriptor {
  """The default charge statement descriptor."""
  default: String

  """The prefix of the statement descriptor."""
  prefix: String!
}

"""The charge descriptors for a payments account."""
type ShopifyPaymentsDefaultChargeStatementDescriptor implements ShopifyPaymentsChargeStatementDescriptor {
  """The default charge statement descriptor."""
  default: String

  """The prefix of the statement descriptor."""
  prefix: String!
}

"""
A dispute occurs when a buyer questions the legitimacy of a charge with their financial institution.
"""
type ShopifyPaymentsDispute implements LegacyInteroperability & Node {
  """The total amount disputed by the cardholder."""
  amount: MoneyV2!

  """The deadline for evidence submission."""
  evidenceDueBy: Date

  """
  The date when evidence was sent. Returns null if evidence has not yet been sent.
  """
  evidenceSentOn: Date

  """
  The date when this dispute was resolved. Returns null if the dispute is not yet resolved.
  """
  finalizedOn: Date

  """A globally-unique identifier."""
  id: ID!

  """The date when this dispute was initiated."""
  initiatedAt: DateTime!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The order that contains the charge that is under dispute."""
  order: Order

  """The reason of the dispute."""
  reasonDetails: ShopifyPaymentsDisputeReasonDetails!

  """The current state of the dispute."""
  status: DisputeStatus!

  """
  Indicates if this dispute is still in the inquiry phase or has turned into a chargeback.
  """
  type: DisputeType!
}

"An auto-generated type for paginating through multiple ShopifyPaymentsDisputes.\n"
type ShopifyPaymentsDisputeConnection {
  """A list of edges."""
  edges: [ShopifyPaymentsDisputeEdge!]!

  """A list of the nodes contained in ShopifyPaymentsDisputeEdge."""
  nodes: [ShopifyPaymentsDispute!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one ShopifyPaymentsDispute and a cursor during pagination.\n"
type ShopifyPaymentsDisputeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ShopifyPaymentsDisputeEdge."""
  node: ShopifyPaymentsDispute!
}

"""The evidence associated with the dispute."""
type ShopifyPaymentsDisputeEvidence implements Node {
  """The activity logs associated with the dispute evidence."""
  accessActivityLog: String

  """The billing address that is provided by the customer."""
  billingAddress: MailingAddress

  """
  The cancellation policy disclosure associated with the dispute evidence.
  """
  cancellationPolicyDisclosure: String

  """The cancellation policy file associated with the dispute evidence."""
  cancellationPolicyFile: ShopifyPaymentsDisputeFileUpload

  """The cancellation rebuttal associated with the dispute evidence."""
  cancellationRebuttal: String

  """The customer communication file associated with the dispute evidence."""
  customerCommunicationFile: ShopifyPaymentsDisputeFileUpload

  """The customer's email address."""
  customerEmailAddress: String

  """The customer's first name."""
  customerFirstName: String

  """The customer's last name."""
  customerLastName: String

  """The customer purchase ip for this dispute evidence."""
  customerPurchaseIp: String

  """The dispute associated with the evidence."""
  dispute: ShopifyPaymentsDispute!

  """The file uploads associated with the dispute evidence."""
  disputeFileUploads: [ShopifyPaymentsDisputeFileUpload!]!

  """The fulfillments associated with the dispute evidence."""
  fulfillments: [ShopifyPaymentsDisputeFulfillment!]!

  """A globally-unique identifier."""
  id: ID!

  """The product description for this dispute evidence."""
  productDescription: String

  """The refund policy disclosure associated with the dispute evidence."""
  refundPolicyDisclosure: String

  """The refund policy file associated with the dispute evidence."""
  refundPolicyFile: ShopifyPaymentsDisputeFileUpload

  """The refund refusal explanation associated with dispute evidence."""
  refundRefusalExplanation: String

  """The service documentation file associated with the dispute evidence."""
  serviceDocumentationFile: ShopifyPaymentsDisputeFileUpload

  """The mailing address for shipping that is provided by the customer."""
  shippingAddress: MailingAddress

  """The shipping documentation file associated with the dispute evidence."""
  shippingDocumentationFile: ShopifyPaymentsDisputeFileUpload

  """Whether the dispute evidence is submitted."""
  submitted: Boolean!

  """The uncategorized file associated with the dispute evidence."""
  uncategorizedFile: ShopifyPaymentsDisputeFileUpload

  """The uncategorized text for the dispute evidence."""
  uncategorizedText: String
}

"""The possible dispute evidence file types."""
enum ShopifyPaymentsDisputeEvidenceFileType {
  """Cancellation Policy File."""
  CANCELLATION_POLICY_FILE

  """Customer Communication File."""
  CUSTOMER_COMMUNICATION_FILE

  """Refund Policy File."""
  REFUND_POLICY_FILE

  """Service Documentation File."""
  SERVICE_DOCUMENTATION_FILE

  """Shipping Documentation File."""
  SHIPPING_DOCUMENTATION_FILE

  """Uncategorized File."""
  UNCATEGORIZED_FILE
}

"""
Specifies the input fields required to update a dispute evidence object.
"""
input ShopifyPaymentsDisputeEvidenceUpdateInput {
  """Activity logs."""
  accessActivityLog: String

  """Cancellation policy disclosure."""
  cancellationPolicyDisclosure: String

  """Cancellation policy file."""
  cancellationPolicyFile: ShopifyPaymentsDisputeFileUploadUpdateInput

  """Cancellation rebuttal."""
  cancellationRebuttal: String

  """Customer communication file."""
  customerCommunicationFile: ShopifyPaymentsDisputeFileUploadUpdateInput

  """Customer email address."""
  customerEmailAddress: String

  """Customer first name."""
  customerFirstName: String

  """Customer last name."""
  customerLastName: String

  """Refund policy disclosure."""
  refundPolicyDisclosure: String

  """Refund policy file."""
  refundPolicyFile: ShopifyPaymentsDisputeFileUploadUpdateInput

  """Refund refusal explanation."""
  refundRefusalExplanation: String

  """Service documentation file."""
  serviceDocumentationFile: ShopifyPaymentsDisputeFileUploadUpdateInput

  """The shipping address associated with the dispute evidence."""
  shippingAddress: MailingAddressInput

  """Shipping documentation file."""
  shippingDocumentationFile: ShopifyPaymentsDisputeFileUploadUpdateInput

  """Whether to submit the evidence."""
  submitEvidence: Boolean = false

  """Uncategorized file."""
  uncategorizedFile: ShopifyPaymentsDisputeFileUploadUpdateInput

  """Uncategorized text."""
  uncategorizedText: String
}

"""The file upload associated with the dispute evidence."""
type ShopifyPaymentsDisputeFileUpload implements Node {
  """The type of the file for the dispute evidence."""
  disputeEvidenceType: ShopifyPaymentsDisputeEvidenceFileType

  """The file size."""
  fileSize: Int!

  """The file type."""
  fileType: String!

  """A globally-unique identifier."""
  id: ID!

  """The original file name."""
  originalFileName: String

  """The URL for accessing the file."""
  url: URL!
}

"""
Specifies the input fields required to update a dispute file upload object.
"""
input ShopifyPaymentsDisputeFileUploadUpdateInput {
  """Whether to delete this file upload."""
  destroy: Boolean = false

  """The id of the file upload to be updated."""
  id: ID!
}

"""The fulfillment associated with dispute evidence."""
type ShopifyPaymentsDisputeFulfillment implements Node {
  """A globally-unique identifier."""
  id: ID!

  """The shipping carrier for this fulfillment."""
  shippingCarrier: String

  """The shipping date for this fulfillment."""
  shippingDate: Date

  """The shipping tracking number for this fulfillment."""
  shippingTrackingNumber: String
}

"""The reason for the dispute provided by the cardholder's bank."""
enum ShopifyPaymentsDisputeReason {
  """The customer's bank can't process the charge."""
  BANK_CANNOT_PROCESS

  """
  The customer claims that the purchased product was returned or the transaction was otherwise canceled, but you haven't yet provided a refund or credit.
  """
  CREDIT_NOT_PROCESSED

  """
  The customer initiated the dispute. Contact the customer for additional details on why the payment was disputed.
  """
  CUSTOMER_INITIATED

  """
  The customer's bank can't proceed with the debit since it hasn't been authorized.
  """
  DEBIT_NOT_AUTHORIZED

  """
  The customer claims they were charged multiple times for the same product or service.
  """
  DUPLICATE

  """The cardholder claims that they didn’t authorize the payment."""
  FRAUDULENT

  """
  The dispute is uncategorized, so you should contact the customer for additional details to find out why the payment was disputed.
  """
  GENERAL

  """The customer account associated with the purchase is incorrect."""
  INCORRECT_ACCOUNT_DETAILS

  """The customer's bank account has insufficient funds."""
  INSUFFICIENT_FUNDS

  """
  The customer claims they did not receive the products or services purchased.
  """
  PRODUCT_NOT_RECEIVED

  """
  The product or service was received but was defective, damaged, or not as described.
  """
  PRODUCT_UNACCEPTABLE

  """
  The customer claims that you continued to charge them after a subscription was canceled.
  """
  SUBSCRIPTION_CANCELLED

  """
  The customer doesn’t recognize the payment appearing on their card statement.
  """
  UNRECOGNIZED
}

"""Details regarding a dispute reason."""
type ShopifyPaymentsDisputeReasonDetails {
  """The raw code provided by the payment network."""
  networkReasonCode: String

  """The reason for the dispute provided by the cardholder's banks."""
  reason: ShopifyPaymentsDisputeReason!
}

"""
Presents all Shopify Payments information related to an extended authorization.
"""
type ShopifyPaymentsExtendedAuthorization {
  "The time after which the extended authorization expires. After the expiry, the merchant is unable to capture the payment.\n"
  extendedAuthorizationExpiresAt: DateTime!

  "The time after which capture will incur an additional fee.\n"
  standardAuthorizationExpiresAt: DateTime!
}

"""The fraud settings of a payments account."""
type ShopifyPaymentsFraudSettings {
  """Decline a charge if there is an AVS failure."""
  declineChargeOnAvsFailure: Boolean!

  """Decline a charge if there is an CVC failure."""
  declineChargeOnCvcFailure: Boolean!
}

"""The charge descriptors for a Japanese payments account."""
type ShopifyPaymentsJpChargeStatementDescriptor implements ShopifyPaymentsChargeStatementDescriptor {
  """The default charge statement descriptor."""
  default: String

  """The charge statement descriptor in kana."""
  kana: String

  """The charge statement descriptor in kanji."""
  kanji: String

  """The prefix of the statement descriptor."""
  prefix: String!
}

"""The notification settings for the account."""
type ShopifyPaymentsNotificationSettings {
  """Receive email notifications when new payouts are sent or payouts fail."""
  payouts: Boolean!
}

"Payouts represent the movement of money between a merchant's Shopify\nPayments balance and their bank account.\n"
type ShopifyPaymentsPayout implements LegacyInteroperability & Node {
  """The bank account for the payout."""
  bankAccount: ShopifyPaymentsBankAccount

  """The total amount and currency of the payout."""
  gross: MoneyV2! @deprecated(reason: "Use `net` instead")

  """A globally-unique identifier."""
  id: ID!

  "The exact time when the payout was issued. The payout only contains\nbalance transactions that were available at this time.\n"
  issuedAt: DateTime!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The total amount and currency of the payout."""
  net: MoneyV2!

  """The transfer status of the payout."""
  status: ShopifyPaymentsPayoutStatus!

  """The summary of the payout."""
  summary: ShopifyPaymentsPayoutSummary!

  """The direction of the payout."""
  transactionType: ShopifyPaymentsPayoutTransactionType!
}

"An auto-generated type for paginating through multiple ShopifyPaymentsPayouts.\n"
type ShopifyPaymentsPayoutConnection {
  """A list of edges."""
  edges: [ShopifyPaymentsPayoutEdge!]!

  """A list of the nodes contained in ShopifyPaymentsPayoutEdge."""
  nodes: [ShopifyPaymentsPayout!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one ShopifyPaymentsPayout and a cursor during pagination.\n"
type ShopifyPaymentsPayoutEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ShopifyPaymentsPayoutEdge."""
  node: ShopifyPaymentsPayout!
}

"""The interval at which payouts are sent to the connected bank account."""
enum ShopifyPaymentsPayoutInterval {
  """Each business day."""
  DAILY

  """Payouts will not be automatically made."""
  MANUAL

  """Each month, on the day of month specified by monthlyAnchor."""
  MONTHLY

  """Each week, on the day of week specified by weeklyAnchor."""
  WEEKLY
}

"""The payment schedule for a payments account."""
type ShopifyPaymentsPayoutSchedule {
  """The interval at which payouts are sent to the connected bank account."""
  interval: ShopifyPaymentsPayoutInterval!

  "The day of the month funds will be paid out.\n\nThe value can be any day of the month from the 1st to the 31st.\nIf the payment interval is set to monthly, this value will be used.\nPayouts scheduled between 29-31st of the month are sent on the last day of shorter months.\n"
  monthlyAnchor: Int

  "The day of the week funds will be paid out.\n\nThe value can be any weekday from Monday to Friday.\nIf the payment interval is set to weekly, this value will be used.\n"
  weeklyAnchor: DayOfTheWeek
}

"""The transfer status of the payout."""
enum ShopifyPaymentsPayoutStatus {
  """The payout has been canceled by Shopify."""
  CANCELED

  """The payout has been declined by the bank."""
  FAILED

  """The payout has been submitted to the bank."""
  IN_TRANSIT

  """The payout has been successfully deposited into the bank."""
  PAID

  "The payout has been created and had transactions assigned to it, but\nit has not yet been submitted to the bank.\n"
  SCHEDULED
}

"Breakdown of the total fees and gross of each of the different types of transactions associated\nwith the payout.\n"
type ShopifyPaymentsPayoutSummary {
  """Total fees for all adjustments including disputes."""
  adjustmentsFee: MoneyV2!

  """Total gross amount for all adjustments including disputes."""
  adjustmentsGross: MoneyV2!

  """Total fees for all charges."""
  chargesFee: MoneyV2!

  """Total gross amount for all charges."""
  chargesGross: MoneyV2!

  """Total fees for all refunds."""
  refundsFee: MoneyV2!

  """Total gross amount for all refunds."""
  refundsFeeGross: MoneyV2!

  """Total fees for all reserved funds."""
  reservedFundsFee: MoneyV2!

  """Total gross amount for all reserved funds."""
  reservedFundsGross: MoneyV2!

  """Total fees for all retried payouts."""
  retriedPayoutsFee: MoneyV2!

  """Total gross amount for all retried payouts."""
  retriedPayoutsGross: MoneyV2!
}

"""The possible transaction types for a payout."""
enum ShopifyPaymentsPayoutTransactionType {
  """The payout is a deposit."""
  DEPOSIT

  """The payout is a withdrawal."""
  WITHDRAWAL
}

"""
Presents all Shopify Payments specific information related to an order refund.
"""
type ShopifyPaymentsRefundSet {
  "The acquirer reference number (ARN) code generated for Visa/Mastercard transactions.\n"
  acquirerReferenceNumber: String
}

"""
Presents all Shopify Payments specific information related to an order transaction.
"""
type ShopifyPaymentsTransactionSet {
  "Contains all fields related to an extended authorization.\n"
  extendedAuthorizationSet: ShopifyPaymentsExtendedAuthorization

  "Contains all fields related to a refund.\n"
  refundSet: ShopifyPaymentsRefundSet
}

"Each subject (individual) of an account has a verification object giving\n information about the verification state.\n"
type ShopifyPaymentsVerification implements Node {
  """A globally-unique identifier."""
  id: ID!

  """The status of the verification."""
  status: ShopifyPaymentsVerificationStatus!

  """The subject/individual who has to be verified."""
  subject: ShopifyPaymentsVerificationSubject!
}

"""A document which can be used to verify an individual."""
type ShopifyPaymentsVerificationDocument {
  """True if the back side of the document is required."""
  backRequired: Boolean!

  """True if the front side of the document is required."""
  frontRequired: Boolean!

  """The type of the document which can be used for verification."""
  type: ShopifyPaymentsVerificationDocumentType!
}

"""The types of possible verification documents."""
enum ShopifyPaymentsVerificationDocumentType {
  """The subject's driver's license."""
  DRIVERS_LICENSE

  """A government's identification document of the subject."""
  GOVERNMENT_IDENTIFICATION

  """The subject's passport."""
  PASSPORT
}

"""The status of a verification."""
enum ShopifyPaymentsVerificationStatus {
  """
  The verification request has been submitted but a response has not yet been given.
  """
  PENDING

  """The verification has not yet been verified."""
  UNVERIFIED

  """The verification has been verified."""
  VERIFIED
}

"""
The verification subject represents an individual that has to be verified.
"""
type ShopifyPaymentsVerificationSubject {
  """The family name of the individual to verify."""
  familyName: String!

  """The given name of the individual to verify."""
  givenName: String!
}

"Represents the data about a staff member's Shopify account. Merchants can use staff member data to get more information about the staff members in their store.\n"
type StaffMember implements Node {
  """Whether the staff member is active."""
  active: Boolean!

  """The image used as the staff member's avatar in the Shopify admin."""
  avatar(
    """The default image returned if the staff member has no avatar."""
    fallback: StaffMemberDefaultImage = DEFAULT
  ): Image!

  """The staff member's email address."""
  email: String!

  """Whether the staff member's account exists."""
  exists: Boolean!

  """The staff member's first name."""
  firstName: String

  """A globally-unique identifier."""
  id: ID!

  """The staff member's initials, if available."""
  initials: [String!]

  """Whether the staff member is the shop owner."""
  isShopOwner: Boolean!

  """The staff member's last name."""
  lastName: String

  """
  The staff member's preferred locale. Locale values use the format `language` or `language-COUNTRY`, where `language` is a two-letter language code, and `COUNTRY` is a two-letter country code. For example: `en` or `en-US`
  """
  locale: String!

  """The staff member's full name."""
  name: String!

  """The staff member's phone number."""
  phone: String

  """
  The data used to customize the Shopify admin experience for the staff member.
  """
  privateData: StaffMemberPrivateData!
}

"An auto-generated type for paginating through multiple StaffMembers.\n"
type StaffMemberConnection {
  """A list of edges."""
  edges: [StaffMemberEdge!]!

  """A list of the nodes contained in StaffMemberEdge."""
  nodes: [StaffMember!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""
Represents the fallback avatar image for a staff member. This is used only if the staff member has no avatar image.
"""
enum StaffMemberDefaultImage {
  """Returns a default avatar image for the staff member."""
  DEFAULT

  """Returns a URL that returns a 404 error if the image is not present."""
  NOT_FOUND

  """Returns a transparent avatar image for the staff member."""
  TRANSPARENT
}

"An auto-generated type which holds one StaffMember and a cursor during pagination.\n"
type StaffMemberEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of StaffMemberEdge."""
  node: StaffMember!
}

"""Represents access permissions for a staff member."""
enum StaffMemberPermission {
  """The staff member can manage and install apps and channels."""
  APPLICATIONS

  """The staff member can manage and install sales channels."""
  CHANNELS

  """
  The staff member can view, create, update, and delete customers, and respond to customer messages in the Shopify Messaging API.
  """
  CUSTOMERS

  """
  The staff member can view the Shopify Home page, which includes sales information and other shop data.
  """
  DASHBOARD

  """The staff member can view, buy, and manage domains."""
  DOMAINS

  """The staff member can create, update, and delete draft orders."""
  DRAFT_ORDERS

  """The staff member can update orders."""
  EDIT_ORDERS

  """
  The staff has the same permissions as the [store owner](https://shopify.dev/en/manual/your-account/staff-accounts/staff-permissions#store-owner-permissions) with some exceptions, such as modifying the account billing or deleting staff accounts.
  """
  FULL @deprecated(reason: "Use the list of the staff member's explicit permissions returned in the `StaffMember.permissions.userPermissions` field instead of `full` permission.")

  """
  The staff member can view, create, issue, and export gift cards to a CSV file.
  """
  GIFT_CARDS

  """The staff member can view and modify links and navigation menus."""
  LINKS

  """
  The staff member can create, update, and delete locations where inventory is stocked or managed.
  """
  LOCATIONS

  """
  The staff member can view and create discount codes and automatic discounts, and export discounts to a CSV file.
  """
  MARKETING

  """The staff member can view, create, and automate marketing campaigns."""
  MARKETING_SECTION

  """
  The staff member can view, create, update, delete, and cancel orders, and receive order notifications. The staff member can still create draft orders without this permission.
  """
  ORDERS

  """
  The staff member can view the Overview and Live view pages,
              which include sales information, and other shop and sales channels data.
  """
  OVERVIEWS

  """
  The staff member can view, create, update, publish, and delete blog posts and pages.
  """
  PAGES

  """The staff member can pay for an order by using a vaulted card."""
  PAY_ORDERS_BY_VAULTED_CARD

  """The staff member can view the preferences and configuration of a shop."""
  PREFERENCES

  """
  The staff member can view, create, import, and update products, collections, and inventory.
  """
  PRODUCTS

  """
  The staff member can view and create all reports, which includes sales information and other shop data.
  """
  REPORTS

  """The staff member can view, update, and publish themes."""
  THEMES

  """The staff member can view and create translations."""
  TRANSLATIONS @deprecated(reason: "Unused.")
}

"""
Represents the data used to customize the Shopify admin experience for a logged-in staff member.
"""
type StaffMemberPrivateData {
  """The URL to the staff member's account settings page."""
  accountSettingsUrl: URL!

  """The date and time when the staff member was created."""
  createdAt: DateTime!

  """Access permissions for the staff member."""
  permissions: [StaffMemberPermission!]! @deprecated(reason: "Use StaffMember.permissions.userPermissions instead")
}

"Image to be uploaded.\n\nDeprecated in favor of\n[StagedUploadInput](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadInput),\nwhich is used by the\n[stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).\n"
input StageImageInput {
  """Image filename."""
  filename: String!

  """HTTP method to be used by the Staged Upload."""
  httpMethod: StagedUploadHttpMethodType = PUT

  """Image MIME type."""
  mimeType: String!

  """Image resource."""
  resource: StagedUploadTargetGenerateUploadResource!
}

"Information about a staged upload target, which should be used to send a request to upload\nthe file.\n\nFor more information on the upload process, please refer to\n[this page](https://shopify.dev/api/examples/product-media#uploading-media-to-shopify).\n"
type StagedMediaUploadTarget {
  """Parameters needed to authenticate a request to upload the file."""
  parameters: [StagedUploadParameter!]!

  "The URL to be passed as originalSource in\n[CreateMediaInput](https://shopify.dev/api/admin-graphql/latest/input-objects/CreateMediaInput)\nand [FileCreateInput](https://shopify.dev/api/admin-graphql/2022-04/input-objects/FileCreateInput)\nfor [productCreateMedia](https://shopify.dev/api/admin-graphql/2022-04/mutations/productCreateMedia)\nand [fileCreate](https://shopify.dev/api/admin-graphql/2022-04/mutations/fileCreate)\nmutations.\n"
  resourceUrl: URL

  "The URL to use when sending an request to upload the file. Should be used in conjunction with\nthe parameters field.\n"
  url: URL
}

"The possible HTTP methods that can be used when sending a request to upload a file via information from a\n[StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget).\n"
enum StagedUploadHttpMethodType {
  """The POST HTTP method."""
  POST

  """The PUT HTTP method."""
  PUT
}

"""Information needed to generate staged upload targets."""
input StagedUploadInput {
  "Size of the file to upload, in bytes. This is required when the request's resource property is set to\n[VIDEO](https://shopify.dev/api/admin-graphql/latest/enums/StagedUploadTargetGenerateUploadResource#value-video)\nor [MODEL_3D](https://shopify.dev/api/admin-graphql/latest/enums/StagedUploadTargetGenerateUploadResource#value-model3d).\n"
  fileSize: UnsignedInt64

  """The file's name, including extension."""
  filename: String!

  "The HTTP method to be used when sending a request to upload the file via the returned staged\nupload target.\n"
  httpMethod: StagedUploadHttpMethodType = PUT

  """The file's MIME type."""
  mimeType: String!

  """The file's intended Shopify resource type."""
  resource: StagedUploadTargetGenerateUploadResource!
}

"Parameters needed to authenticate a file upload request using a\n[StagedMediaUploadTarget's url field](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget#field-stagedmediauploadtarget-url).\n\nFor more information on the upload process, please refer to\n[this page](https://shopify.dev/api/examples/product-media#uploading-media-to-shopify).\n"
type StagedUploadParameter {
  """The parameter's name."""
  name: String!

  """The parameter's value."""
  value: String!
}

"Staged target information.\n\nDeprecated in favor of\n[StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget),\nwhich is returned by the\n[stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).\n"
type StagedUploadTarget {
  """Parameters of an image to be uploaded."""
  parameters: [ImageUploadParameter!]!

  """Image URL."""
  url: String!
}

"Specifies the fields required to generate the URL and parameters needed to upload an\"\nasset to Shopify.\n\nDeprecated in favor of\n[StagedUploadInput](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadInput),\nwhich is used by the\n[stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).\n"
input StagedUploadTargetGenerateInput {
  """The size of the file to upload, in bytes."""
  fileSize: UnsignedInt64

  """The filename of the asset being uploaded."""
  filename: String!

  """The HTTP method to be used by the staged upload."""
  httpMethod: StagedUploadHttpMethodType = PUT

  """The MIME type of the asset being uploaded."""
  mimeType: String!

  """The resource type being uploaded."""
  resource: StagedUploadTargetGenerateUploadResource!
}

"""Return type for `stagedUploadTargetGenerate` mutation."""
type StagedUploadTargetGeneratePayload {
  """The signed parameters that can be used to upload the asset."""
  parameters: [MutationsStagedUploadTargetGenerateUploadParameter!]!

  """The signed URL where the asset can be uploaded."""
  url: String!

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""The resource type to receive."""
enum StagedUploadTargetGenerateUploadResource {
  "Represents bulk mutation variables.\n\nExample usage: This resource can be used for bulk operations via the\n[bulkOperationRunMutation mutation](https://shopify.dev/api/admin-graphql/latest/mutations/bulkOperationRunMutation).\n"
  BULK_MUTATION_VARIABLES

  "Represents an image associated with a collection.\n\nExample usage: After being uploaded, this resource can be added to a collection via the\n[collectionUpdate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/collectionUpdate).\n"
  COLLECTION_IMAGE

  "Represents any file other than HTML.\n\nExample usage: After being uploaded, this resource can be added to the\n[Files page](https://shopify.com/admin/settings/files) in Shopify admin via the\n[fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).\n"
  FILE

  "Represents an image.\n\nExample usage: After being uploaded, this resource can be added to a product via the\n[productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia)\nor to the [Files page](https://shopify.com/admin/settings/files) in Shopify admin via the\n[fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).\n"
  IMAGE

  "Represents a Shopify hosted 3d model.\n\nExample usage: After being uploaded, this resource can be added to a product via the\n[productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia).\n"
  MODEL_3D

  "Represents an image that is associated with a product.\n\nExample usage: After being uploaded, this resource can be added to a product via the\n[productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia).\n"
  PRODUCT_IMAGE

  "Represents an image.\n\nExample usage: After being uploaded, this resource can be added to the\n[Files page](https://shopify.com/admin/settings/files) in Shopify admin via the\n[fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).\n"
  SHOP_IMAGE

  "Represents a redirect CSV file.\n\nExample usage: This resource can be used for creating a\n[UrlRedirectImport](https://shopify.dev/api/admin-graphql/2022-04/objects/UrlRedirectImport)\nobject for use in the\n[urlRedirectImportCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportCreate).\n"
  URL_REDIRECT_IMPORT

  "Represents a Shopify-hosted video.\n\nExample usage: After being uploaded, this resource can be added to a product via the\n[productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia)\nor to the [Files page](https://shopify.com/admin/settings/files) in Shopify admin via the\n[fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).\n"
  VIDEO
}

"""Return type for `stagedUploadTargetsGenerate` mutation."""
type StagedUploadTargetsGeneratePayload {
  """The staged upload targets that were generated."""
  urls: [StagedUploadTarget!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `stagedUploadsCreate` mutation."""
type StagedUploadsCreatePayload {
  """The staged upload targets that were generated."""
  stagedTargets: [StagedMediaUploadTarget!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `standardMetafieldDefinitionEnable` mutation."""
type StandardMetafieldDefinitionEnablePayload {
  """The metafield definition that was created."""
  createdDefinition: MetafieldDefinition

  """The list of errors that occurred from executing the mutation."""
  userErrors: [StandardMetafieldDefinitionEnableUserError!]!
}

"""
An error that occurs during the execution of `StandardMetafieldDefinitionEnable`.
"""
type StandardMetafieldDefinitionEnableUserError implements DisplayableError {
  """The error code."""
  code: StandardMetafieldDefinitionEnableUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `StandardMetafieldDefinitionEnableUserError`.
"""
enum StandardMetafieldDefinitionEnableUserErrorCode {
  """The input value is invalid."""
  INVALID

  """The maximum number of definitions per owner type has been exceeded."""
  LIMIT_EXCEEDED

  """The input value is already taken."""
  TAKEN

  """The standard metafield definition template was not found."""
  TEMPLATE_NOT_FOUND

  """The namespace and key is already in use for a set of your metafields."""
  UNSTRUCTURED_ALREADY_EXISTS
}

"Standard metafield definition templates provide preset configurations to create metafield definitions.\nEach template has a specific namespace and key that we've reserved to have specific meanings for common use cases.\n\nRefer to the [list of standard metafield definitions](https://shopify.dev/apps/metafields/definitions/standard-definitions).\n"
type StandardMetafieldDefinitionTemplate implements Node {
  """The description of the standard metafield definition."""
  description: String

  """A globally-unique identifier."""
  id: ID!

  """
  The key owned by the definition after the definition has been activated.
  """
  key: String!

  """The human-readable name for the standard metafield definition."""
  name: String!

  """
  The namespace owned by the definition after the definition has been activated.
  """
  namespace: String!

  """
  The list of resource types that the standard metafield definition can be applied to.
  """
  ownerTypes: [MetafieldOwnerType!]!

  """
  The associated [metafield definition type](https://shopify.dev/apps/metafields/definitions/types) that the metafield stores.
  """
  type: MetafieldDefinitionType!

  """The configured validations for the standard metafield definition."""
  validations: [MetafieldDefinitionValidation!]!

  "Whether metafields for the definition are by default visible using the Storefront API.\n"
  visibleToStorefrontApi: Boolean!
}

"An auto-generated type for paginating through multiple StandardMetafieldDefinitionTemplates.\n"
type StandardMetafieldDefinitionTemplateConnection {
  """A list of edges."""
  edges: [StandardMetafieldDefinitionTemplateEdge!]!

  """
  A list of the nodes contained in StandardMetafieldDefinitionTemplateEdge.
  """
  nodes: [StandardMetafieldDefinitionTemplate!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one StandardMetafieldDefinitionTemplate and a cursor during pagination.\n"
type StandardMetafieldDefinitionTemplateEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of StandardMetafieldDefinitionTemplateEdge."""
  node: StandardMetafieldDefinitionTemplate!
}

"""
Represents the details of a specific type of product within the [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt).
"""
type StandardizedProductType {
  """
  The product taxonomy node associated with the standardized product type.
  """
  productTaxonomyNode: ProductTaxonomyNode
}

"""
Provides the fields and values to use when adding a standard product type to a product. The [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) contains the full list of available values.
"""
input StandardizedProductTypeInput {
  """
  The id of the node in the Shopify taxonomy that represents the product type.
  """
  productTaxonomyNodeId: ID!
}

"Token used to delegate unauthenticated access scopes to clients that need to access the unautheticated Storefront API.\n"
type StorefrontAccessToken implements Node {
  """List of permissions associated with the token."""
  accessScopes: [AccessScope!]!

  """The issued public access token."""
  accessToken: String!

  """The date and time when the public access token was created."""
  createdAt: DateTime!

  """A globally-unique identifier."""
  id: ID!

  """
  An arbitrary title for each token determined by the developer, used for reference         purposes.
  """
  title: String!

  """The date and time when the storefront access token was updated."""
  updatedAt: DateTime!
}

"An auto-generated type for paginating through multiple StorefrontAccessTokens.\n"
type StorefrontAccessTokenConnection {
  """A list of edges."""
  edges: [StorefrontAccessTokenEdge!]!

  """A list of the nodes contained in StorefrontAccessTokenEdge."""
  nodes: [StorefrontAccessToken!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `storefrontAccessTokenCreate` mutation."""
type StorefrontAccessTokenCreatePayload {
  """The user's shop."""
  shop: Shop!

  """The storefront access token."""
  storefrontAccessToken: StorefrontAccessToken

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the input fields to delete a storefront access token."""
input StorefrontAccessTokenDeleteInput {
  """The ID of the storefront access token to delete."""
  id: ID!
}

"""Return type for `storefrontAccessTokenDelete` mutation."""
type StorefrontAccessTokenDeletePayload {
  """The ID of the deleted storefront access token."""
  deletedStorefrontAccessTokenId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type which holds one StorefrontAccessToken and a cursor during pagination.\n"
type StorefrontAccessTokenEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of StorefrontAccessTokenEdge."""
  node: StorefrontAccessToken!
}

"""Specifies the input fields for a storefront access token."""
input StorefrontAccessTokenInput {
  """A title for the storefront access token."""
  title: String!
}

"Represents a unique identifier in the Storefront API. A `StorefrontID` value can be used wherever an ID is expected in the Storefront API.\n\nExample value: `\"Z2lkOi8vc2hvcGlmeS9Qcm9kdWN0LzEwMDc5Nzg1MTAw\"`.\n"
scalar StorefrontID

"An auto-generated type for paginating through a list of Strings.\n"
type StringConnection {
  """A list of edges."""
  edges: [StringEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one String and a cursor during pagination.\n"
type StringEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of StringEdge."""
  node: String!
}

"""Represents an applied code discount."""
type SubscriptionAppliedCodeDiscount {
  """The unique identifier."""
  id: ID!

  """The redeem code of the discount that applies on the subscription."""
  redeemCode: String!

  """The reason that the discount on the subscription draft is rejected."""
  rejectionReason: SubscriptionDiscountRejectionReason
}

"A record of an execution of the subscription billing process. Billing attempts use\nidempotency keys to avoid duplicate order creation. A successful billing attempt\nwill create an order.\n"
type SubscriptionBillingAttempt implements Node {
  """The date and time when the billing attempt was completed."""
  completedAt: DateTime

  """The date and time when the billing attempt was created."""
  createdAt: DateTime!

  """A code corresponding to a payment error during processing."""
  errorCode: SubscriptionBillingAttemptErrorCode

  """A message describing a payment error during processing."""
  errorMessage: String

  """A globally-unique identifier."""
  id: ID!

  """A unique key generated by the client to avoid duplicate payments."""
  idempotencyKey: String!

  "The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.\n"
  nextActionUrl: URL

  """The result of this billing attempt if completed successfully."""
  order: Order

  "The date and time used to calculate fulfillment intervals for a billing attempt that\nsuccessfully completed after the current anchor date. To prevent fulfillment from being\npushed to the next anchor date, this field can override the billing attempt date.\n"
  originTime: DateTime

  """Whether the billing attempt is still processing."""
  ready: Boolean!

  """The subscription contract."""
  subscriptionContract: SubscriptionContract!
}

"An auto-generated type for paginating through multiple SubscriptionBillingAttempts.\n"
type SubscriptionBillingAttemptConnection {
  """A list of edges."""
  edges: [SubscriptionBillingAttemptEdge!]!

  """A list of the nodes contained in SubscriptionBillingAttemptEdge."""
  nodes: [SubscriptionBillingAttempt!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `subscriptionBillingAttemptCreate` mutation."""
type SubscriptionBillingAttemptCreatePayload {
  """The subscription billing attempt."""
  subscriptionBillingAttempt: SubscriptionBillingAttempt

  """The list of errors that occurred from executing the mutation."""
  userErrors: [BillingAttemptUserError!]!
}

"An auto-generated type which holds one SubscriptionBillingAttempt and a cursor during pagination.\n"
type SubscriptionBillingAttemptEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SubscriptionBillingAttemptEdge."""
  node: SubscriptionBillingAttempt!
}

"The possible error codes associated with making billing attempts. The error codes supplement the\n`error_message` to provide consistent results and help with dunning management.\n"
enum SubscriptionBillingAttemptErrorCode {
  """The amount is too small."""
  AMOUNT_TOO_SMALL

  "There was an error during the authentication.\n"
  AUTHENTICATION_ERROR

  """Payment method was canceled by buyer."""
  BUYER_CANCELED_PAYMENT_METHOD

  """Customer is invalid."""
  CUSTOMER_INVALID

  """Customer was not found."""
  CUSTOMER_NOT_FOUND

  "Payment method is expired.\n"
  EXPIRED_PAYMENT_METHOD

  """
  The billing agreement ID or the transaction ID for the customer's payment method is invalid.
  """
  INVALID_CUSTOMER_BILLING_AGREEMENT

  "Payment method is invalid. Please update or create a new payment method.\n"
  INVALID_PAYMENT_METHOD

  """The shipping address is either missing or invalid."""
  INVALID_SHIPPING_ADDRESS

  """A payment has already been made for this invoice."""
  INVOICE_ALREADY_PAID

  "Payment method was declined by processor.\n"
  PAYMENT_METHOD_DECLINED

  """
  Payment method cannot be used with the current payment gateway test mode configuration.
  """
  PAYMENT_METHOD_INCOMPATIBLE_WITH_GATEWAY_CONFIG

  "Payment method was not found.\n"
  PAYMENT_METHOD_NOT_FOUND

  "Payment provider is not enabled.\n"
  PAYMENT_PROVIDER_IS_NOT_ENABLED

  "Gateway is in test mode and attempted to bill a live payment method.\n"
  TEST_MODE

  "There was an unexpected error during the billing attempt.\n"
  UNEXPECTED_ERROR
}

"""
Specifies the fields required to complete a subscription billing attempt.
"""
input SubscriptionBillingAttemptInput {
  """
  A unique key generated by the client to avoid duplicate payments. For more information, refer to [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
  """
  idempotencyKey: String!

  "The date and time used to calculate fulfillment intervals for a billing attempt that\nsuccessfully completed after the current anchor date. To prevent fulfillment from being\npushed to the next anchor date, this field can override the billing attempt date.\n"
  originTime: DateTime
}

"""Represents a Subscription Billing Policy."""
type SubscriptionBillingPolicy {
  """
  Specific anchor dates upon which the billing interval calculations should be made.
  """
  anchors: [SellingPlanAnchor!]!

  """
  The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
  """
  interval: SellingPlanInterval!

  """The number of billing intervals between invoices."""
  intervalCount: Int!

  """Maximum amount of cycles after which the subscription ends."""
  maxCycles: Int

  """Minimum amount of cycles required in the subscription."""
  minCycles: Int
}

"""Specifies the input fields for a Subscription Billing Policy."""
input SubscriptionBillingPolicyInput {
  """
  Specific anchor dates upon which the billing interval calculations should be made.
  """
  anchors: [SellingPlanAnchorInput!] = []

  """
  The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
  """
  interval: SellingPlanInterval!

  """The number of billing intervals between invoices."""
  intervalCount: Int!

  """Maximum amount of cycles required in the subscription."""
  maxCycles: Int

  """Minimum amount of cycles required in the subscription."""
  minCycles: Int
}

"""Represents a Subscription Contract."""
type SubscriptionContract implements Node {
  """The subscription app that this subscription contract is registered to."""
  app: App

  """URL of the subscription contract page on the subscription app."""
  appAdminUrl: URL

  """
  The list of billing attempts associated with the subscription contract.
  """
  billingAttempts(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SubscriptionBillingAttemptConnection!

  """The billing policy associated with the subscription contract."""
  billingPolicy: SubscriptionBillingPolicy!

  """The date and time when the subscription contract was created."""
  createdAt: DateTime!

  """The currency used for the subscription contract."""
  currencyCode: CurrencyCode!

  """A list of the custom attributes to be added to the generated orders."""
  customAttributes: [Attribute!]!

  """The customer to whom the subscription contract belongs."""
  customer: Customer

  """The customer payment method used for the subscription contract."""
  customerPaymentMethod(
    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
  ): CustomerPaymentMethod

  """The delivery method for each billing of the subscription contract."""
  deliveryMethod: SubscriptionDeliveryMethod

  """The delivery policy associated with the subscription contract."""
  deliveryPolicy: SubscriptionDeliveryPolicy!

  """The delivery price for each billing of the subscription contract."""
  deliveryPrice: MoneyV2!

  """
  The list of subscription discounts associated with the subscription contract.
  """
  discounts(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SubscriptionManualDiscountConnection!

  """A globally-unique identifier."""
  id: ID!

  """The current status of the last payment."""
  lastPaymentStatus: SubscriptionContractLastPaymentStatus

  """The number of lines associated with the subscription contract."""
  lineCount: Int!

  """
  The list of subscription lines associated with the subscription contract.
  """
  lines(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SubscriptionLineConnection!

  """The next billing date for the subscription contract."""
  nextBillingDate: DateTime

  """The note field that will be applied to the generated orders."""
  note: String

  """A list of the subscription contract's orders."""
  orders(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): OrderConnection!

  """The order from which this contract originated."""
  originOrder: Order

  """The current status of the subscription contract."""
  status: SubscriptionContractSubscriptionStatus!

  """The date and time when the subscription contract was updated."""
  updatedAt: DateTime!
}

"An auto-generated type for paginating through multiple SubscriptionContracts.\n"
type SubscriptionContractConnection {
  """A list of edges."""
  edges: [SubscriptionContractEdge!]!

  """A list of the nodes contained in SubscriptionContractEdge."""
  nodes: [SubscriptionContract!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Specifies the input fields required to create a Subscription Contract."""
input SubscriptionContractCreateInput {
  """The attributes used as input for the Subscription Draft."""
  contract: SubscriptionDraftInput!

  """The currency used for the subscription contract."""
  currencyCode: CurrencyCode!

  """The ID of the customer to associate with the subscription contract."""
  customerId: ID!

  """The next billing date for the subscription contract."""
  nextBillingDate: DateTime!
}

"""Return type for `subscriptionContractCreate` mutation."""
type SubscriptionContractCreatePayload {
  """The Subscription Contract object."""
  draft: SubscriptionDraft

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SubscriptionDraftUserError!]!
}

"An auto-generated type which holds one SubscriptionContract and a cursor during pagination.\n"
type SubscriptionContractEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SubscriptionContractEdge."""
  node: SubscriptionContract!
}

"""
Possible error codes that can be returned by `SubscriptionContractUserError`.
"""
enum SubscriptionContractErrorCode {
  """The input value is invalid."""
  INVALID
}

"""Possible status values of the last payment on a subscription contract."""
enum SubscriptionContractLastPaymentStatus {
  """Failed subscription billing attempt."""
  FAILED

  """Successful subscription billing attempt."""
  SUCCEEDED
}

"""Return type for `subscriptionContractSetNextBillingDate` mutation."""
type SubscriptionContractSetNextBillingDatePayload {
  """The updated Subscription Contract object."""
  contract: SubscriptionContract

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SubscriptionContractUserError!]!
}

"""Possible status values of a subscription."""
enum SubscriptionContractSubscriptionStatus {
  """Active subscription contract."""
  ACTIVE

  """Cancelled subscription contract."""
  CANCELLED

  """Expired subscription contract."""
  EXPIRED

  """Failed subscription contract."""
  FAILED

  """Paused subscription contract."""
  PAUSED
}

"""Return type for `subscriptionContractUpdate` mutation."""
type SubscriptionContractUpdatePayload {
  """The Subscription Contract object."""
  draft: SubscriptionDraft

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SubscriptionDraftUserError!]!
}

"""Represents a Subscription Contract error."""
type SubscriptionContractUserError implements DisplayableError {
  """The error code."""
  code: SubscriptionContractErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""Represents a Subscription Line Pricing Cycle Adjustment."""
type SubscriptionCyclePriceAdjustment {
  """Price adjustment type."""
  adjustmentType: SellingPlanPricingPolicyAdjustmentType!

  """Price adjustment value."""
  adjustmentValue: SellingPlanPricingPolicyAdjustmentValue!

  """The number of cycles required before this pricing policy applies."""
  afterCycle: Int!

  """The computed price after the adjustments applied."""
  computedPrice: MoneyV2!
}

"""
Describes the delivery method to use to get the physical goods to the customer.
"""
union SubscriptionDeliveryMethod = SubscriptionDeliveryMethodShipping

"Specifies delivery method fields for a subscription draft.\nThis is an input union: one, and only one, field can be provided.\nThe field provided will determine which delivery method is to be used.\n\nNote: Only `shipping` is supported for now, but other inputs will be\nadded as they become supported in subscriptions.\n"
input SubscriptionDeliveryMethodInput {
  """Shipping delivery method input."""
  shipping: SubscriptionDeliveryMethodShippingInput
}

"""
Represents a shipping delivery method: a mailing address and a shipping option.
"""
type SubscriptionDeliveryMethodShipping {
  """The address to ship to."""
  address: SubscriptionMailingAddress!

  """The details of the shipping method to use."""
  shippingOption: SubscriptionDeliveryMethodShippingOption!
}

"Specifies shipping delivery method fields.\n\nThis input accepts partial input. When a field is not provided,\nits prior value is left unchanged.\n"
input SubscriptionDeliveryMethodShippingInput {
  """The address to ship to."""
  address: MailingAddressInput

  """The details of the shipping method to use."""
  shippingOption: SubscriptionDeliveryMethodShippingOptionInput
}

"""Represents the selected shipping option on a subscription contract."""
type SubscriptionDeliveryMethodShippingOption {
  """The carrier service of the shipping option."""
  carrierService: DeliveryCarrierService

  """The code of the shipping option."""
  code: String

  """The description of the shipping option."""
  description: String

  """The presentment title of the shipping option."""
  presentmentTitle: String

  """The title of the shipping option."""
  title: String
}

"""Specifies shipping option fields."""
input SubscriptionDeliveryMethodShippingOptionInput {
  """The carrier service ID of the shipping option."""
  carrierServiceId: ID

  """The code of the shipping option."""
  code: String

  """The description of the shipping option."""
  description: String

  """The presentment title of the shipping option."""
  presentmentTitle: String

  """The title of the shipping option."""
  title: String
}

"""Represents a Subscription Delivery Policy."""
type SubscriptionDeliveryPolicy {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [SellingPlanAnchor!]!

  """
  The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
  """
  interval: SellingPlanInterval!

  """The number of delivery intervals between deliveries."""
  intervalCount: Int!
}

"""Specifies the input fields for a Subscription Delivery Policy."""
input SubscriptionDeliveryPolicyInput {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [SellingPlanAnchorInput!] = []

  """
  The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
  """
  interval: SellingPlanInterval!

  """The number of billing intervals between invoices."""
  intervalCount: Int!
}

"""Subscription draft discount types."""
union SubscriptionDiscount = SubscriptionAppliedCodeDiscount | SubscriptionManualDiscount

"""Represents what a particular discount reduces from a line price."""
type SubscriptionDiscountAllocation {
  """Allocation amount."""
  amount: MoneyV2!

  """Discount that created the allocation."""
  discount: SubscriptionDiscount!
}

"An auto-generated type for paginating through multiple SubscriptionDiscounts.\n"
type SubscriptionDiscountConnection {
  """A list of edges."""
  edges: [SubscriptionDiscountEdge!]!

  """A list of the nodes contained in SubscriptionDiscountEdge."""
  nodes: [SubscriptionDiscount!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one SubscriptionDiscount and a cursor during pagination.\n"
type SubscriptionDiscountEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SubscriptionDiscountEdge."""
  node: SubscriptionDiscount!
}

"""Represents the subscription lines the discount applies on."""
type SubscriptionDiscountEntitledLines {
  """
  Specify whether the subscription discount will apply on all subscription lines.
  """
  all: Boolean!

  """
  The list of subscription lines associated with the subscription discount.
  """
  lines(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SubscriptionLineConnection!
}

"""The value of the discount and how it will be applied."""
type SubscriptionDiscountFixedAmountValue {
  """The fixed amount value of the discount."""
  amount: MoneyV2!

  """Whether the amount is applied per item."""
  appliesOnEachItem: Boolean!
}

"""The percentage value of the discount."""
type SubscriptionDiscountPercentageValue {
  """The percentage value of the discount."""
  percentage: Int!
}

"""The reason a discount on a subscription draft was rejected."""
enum SubscriptionDiscountRejectionReason {
  """Discount is inactive."""
  CURRENTLY_INACTIVE

  """Given customer does not qualify for the discount."""
  CUSTOMER_NOT_ELIGIBLE

  """Customer usage limit has been reached."""
  CUSTOMER_USAGE_LIMIT_REACHED

  """Purchase type does not qualify for the discount."""
  INCOMPATIBLE_PURCHASE_TYPE

  """Internal error during discount code validation."""
  INTERNAL_ERROR

  """Discount code is not found."""
  NOT_FOUND

  """Discount does not apply to any of the given line items."""
  NO_ENTITLED_LINE_ITEMS

  """No applicable shipping lines."""
  NO_ENTITLED_SHIPPING_LINES

  """Purchase amount of items does not qualify for the discount."""
  PURCHASE_NOT_IN_RANGE

  """Quantity of items does not qualify for the discount."""
  QUANTITY_NOT_IN_RANGE

  """Discount usage limit has been reached."""
  USAGE_LIMIT_REACHED
}

"""The value of the discount and how it will be applied."""
union SubscriptionDiscountValue = SubscriptionDiscountFixedAmountValue | SubscriptionDiscountPercentageValue

"""Represents a Subscription Draft."""
type SubscriptionDraft implements Node {
  """The billing policy for the subscription contract."""
  billingPolicy: SubscriptionBillingPolicy!

  """The currency used for the subscription contract."""
  currencyCode: CurrencyCode!

  """A list of the custom attributes to be added to the generated orders."""
  customAttributes: [Attribute!]!

  """The customer to whom the subscription contract belongs."""
  customer: Customer!

  """The customer payment method used for the subscription contract."""
  customerPaymentMethod(
    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
  ): CustomerPaymentMethod

  """The delivery method for each billing of the subscription contract."""
  deliveryMethod: SubscriptionDeliveryMethod

  """The delivery policy for the subscription contract."""
  deliveryPolicy: SubscriptionDeliveryPolicy!

  """The delivery price for each billing the subscription contract."""
  deliveryPrice: MoneyV2

  """
  The list of subscription discounts which will be associated with the subscription contract.
  """
  discounts(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SubscriptionDiscountConnection!

  """
  The list of subscription discounts to be added to the subscription contract.
  """
  discountsAdded(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SubscriptionDiscountConnection!

  """
  The list of subscription discounts to be removed from the subscription contract.
  """
  discountsRemoved(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SubscriptionDiscountConnection!

  """
  The list of subscription discounts to be updated on the subscription contract.
  """
  discountsUpdated(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SubscriptionDiscountConnection!

  """A globally-unique identifier."""
  id: ID!

  """
  The list of subscription lines which will be associated with the subscription contract.
  """
  lines(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SubscriptionLineConnection!

  """
  The list of subscription lines to be added to the subscription contract.
  """
  linesAdded(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SubscriptionLineConnection!

  """
  The list of subscription lines to be removed from the subscription contract.
  """
  linesRemoved(
    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns the elements that come before the specified cursor."""
    before: String

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SubscriptionLineConnection!

  """The next billing date for the subscription contract."""
  nextBillingDate: DateTime

  """The note field that will be applied to the generated orders."""
  note: String

  """The original subscription contract."""
  originalContract: SubscriptionContract

  "Available Shipping Options for a given delivery address. Returns NULL for pending requests.\n"
  shippingOptions(
    """The address to delivery the subscription contract to."""
    deliveryAddress: MailingAddressInput
  ): SubscriptionShippingOptionResult

  """The current status of the subscription contract."""
  status: SubscriptionContractSubscriptionStatus
}

"""Return type for `subscriptionDraftCommit` mutation."""
type SubscriptionDraftCommitPayload {
  """The updated Subscription Contract object."""
  contract: SubscriptionContract

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SubscriptionDraftUserError!]!
}

"""Return type for `subscriptionDraftDiscountAdd` mutation."""
type SubscriptionDraftDiscountAddPayload {
  """The added Subscription Discount."""
  discountAdded: SubscriptionManualDiscount

  """The Subscription Contract draft object."""
  draft: SubscriptionDraft

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SubscriptionDraftUserError!]!
}

"""Return type for `subscriptionDraftDiscountCodeApply` mutation."""
type SubscriptionDraftDiscountCodeApplyPayload {
  """The added subscription discount."""
  appliedDiscount: SubscriptionAppliedCodeDiscount

  """The subscription contract draft object."""
  draft: SubscriptionDraft

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SubscriptionDraftUserError!]!
}

"""Return type for `subscriptionDraftDiscountRemove` mutation."""
type SubscriptionDraftDiscountRemovePayload {
  """The removed subscription draft discount."""
  discountRemoved: SubscriptionDiscount

  """The subscription contract draft object."""
  draft: SubscriptionDraft

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SubscriptionDraftUserError!]!
}

"""Return type for `subscriptionDraftDiscountUpdate` mutation."""
type SubscriptionDraftDiscountUpdatePayload {
  """The updated Subscription Discount."""
  discountUpdated: SubscriptionManualDiscount

  """The Subscription Contract draft object."""
  draft: SubscriptionDraft

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SubscriptionDraftUserError!]!
}

"""
Possible error codes that can be returned by `SubscriptionDraftUserError`.
"""
enum SubscriptionDraftErrorCode {
  """This line has already been removed."""
  ALREADY_REMOVED

  """The input value is blank."""
  BLANK

  """Subscription draft has been already committed."""
  COMMITTED

  """Currency is not enabled."""
  CURRENCY_NOT_ENABLED

  """The customer doesn't exist."""
  CUSTOMER_DOES_NOT_EXIST

  """The payment method customer must be the same as the contract customer."""
  CUSTOMER_MISMATCH

  """The after cycle attribute must be unique between cycle discounts."""
  CYCLE_DISCOUNTS_UNIQUE_AFTER_CYCLE

  """The delivery method can't be blank if any lines require shipping."""
  DELIVERY_METHOD_REQUIRED

  """
  The delivery policy interval must be a multiple of the billing policy interval.
  """
  DELIVERY_MUST_BE_MULTIPLE_OF_BILLING

  """The input value should be greater than the minimum allowed value."""
  GREATER_THAN

  """
  The input value should be greater than or equal to the minimum value allowed.
  """
  GREATER_THAN_OR_EQUAL_TO

  """The input value is invalid."""
  INVALID

  """The adjustment value must the same type as the adjustment type."""
  INVALID_ADJUSTMENT_TYPE

  """The adjustment value must be either fixed_value or percentage."""
  INVALID_ADJUSTMENT_VALUE

  """Next billing date is invalid."""
  INVALID_BILLING_DATE

  """Must have at least one line."""
  INVALID_LINES

  """Note length is too long."""
  INVALID_NOTE_LENGTH

  """The input value should be less than the maximum value allowed."""
  LESS_THAN

  """
  The input value should be less than or equal to the maximum value allowed.
  """
  LESS_THAN_OR_EQUAL_TO

  """The value is not an integer."""
  NOT_AN_INTEGER

  """Value is not in range."""
  NOT_IN_RANGE

  """Discount must have at least one entitled line."""
  NO_ENTITLED_LINES

  """Input value is not present."""
  PRESENCE

  """The maximum number of cycles must be greater than the minimum."""
  SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES

  """
  Another operation updated the contract concurrently as the commit was in progress.
  """
  STALE_CONTRACT

  """The input value is too long."""
  TOO_LONG

  """The input value is too short."""
  TOO_SHORT
}

"""Return type for `subscriptionDraftFreeShippingDiscountAdd` mutation."""
type SubscriptionDraftFreeShippingDiscountAddPayload {
  """The added subscription free shipping discount."""
  discountAdded: SubscriptionManualDiscount

  """The subscription contract draft object."""
  draft: SubscriptionDraft

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SubscriptionDraftUserError!]!
}

"""
Return type for `subscriptionDraftFreeShippingDiscountUpdate` mutation.
"""
type SubscriptionDraftFreeShippingDiscountUpdatePayload {
  """The updated Subscription Discount."""
  discountUpdated: SubscriptionManualDiscount

  """The Subscription Contract draft object."""
  draft: SubscriptionDraft

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SubscriptionDraftUserError!]!
}

"""Specifies the input fields required to create a Subscription Draft."""
input SubscriptionDraftInput {
  """The billing policy for the subscription contract."""
  billingPolicy: SubscriptionBillingPolicyInput

  """A list of the custom attributes added to the subscription contract."""
  customAttributes: [AttributeInput!]

  """The delivery method for the subscription contract."""
  deliveryMethod: SubscriptionDeliveryMethodInput

  """The delivery policy for the subscription contract."""
  deliveryPolicy: SubscriptionDeliveryPolicyInput

  """The shipping price for each renewal the subscription contract."""
  deliveryPrice: Decimal

  """The next billing date for the subscription contract."""
  nextBillingDate: DateTime

  """The note field that will be applied to the generated orders."""
  note: String

  """The ID of the payment method to be used for the subscription contract."""
  paymentMethodId: ID

  """The current status of the subscription contract."""
  status: SubscriptionContractSubscriptionStatus
}

"""Return type for `subscriptionDraftLineAdd` mutation."""
type SubscriptionDraftLineAddPayload {
  """The Subscription Contract draft object."""
  draft: SubscriptionDraft

  """The added Subscription Line."""
  lineAdded: SubscriptionLine

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SubscriptionDraftUserError!]!
}

"""Return type for `subscriptionDraftLineRemove` mutation."""
type SubscriptionDraftLineRemovePayload {
  """
  The list of updated subscription discounts impacted by the removed line.
  """
  discountsUpdated: [SubscriptionManualDiscount!]

  """The Subscription Contract draft object."""
  draft: SubscriptionDraft

  """The removed Subscription Line."""
  lineRemoved: SubscriptionLine

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SubscriptionDraftUserError!]!
}

"""Return type for `subscriptionDraftLineUpdate` mutation."""
type SubscriptionDraftLineUpdatePayload {
  """The Subscription Contract draft object."""
  draft: SubscriptionDraft

  """The updated Subscription Line."""
  lineUpdated: SubscriptionLine

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SubscriptionDraftUserError!]!
}

"""Return type for `subscriptionDraftUpdate` mutation."""
type SubscriptionDraftUpdatePayload {
  """The Subscription Draft object."""
  draft: SubscriptionDraft

  """The list of errors that occurred from executing the mutation."""
  userErrors: [SubscriptionDraftUserError!]!
}

"""Represents a Subscription Draft error."""
type SubscriptionDraftUserError implements DisplayableError {
  """The error code."""
  code: SubscriptionDraftErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Specifies the input fields of a subscription free shipping discount on a contract.
"""
input SubscriptionFreeShippingDiscountInput {
  """
  The maximum number of times the subscription free shipping discount will be applied on orders.
  """
  recurringCycleLimit: Int

  """The title associated with the subscription free shipping discount."""
  title: String
}

"""Represents a Subscription Line."""
type SubscriptionLine {
  """
  The price per unit for the subscription line in the contract's currency.
  """
  currentPrice: MoneyV2!

  """List of custom attributes associated to the line item."""
  customAttributes: [Attribute!]!

  """Discount allocations."""
  discountAllocations: [SubscriptionDiscountAllocation!]!

  """The unique identifier."""
  id: ID!

  """Total line price including all discounts."""
  lineDiscountedPrice: MoneyV2!

  """Describe the price changes of the line over time."""
  pricingPolicy: SubscriptionPricingPolicy

  """The product id associated with the subscription line."""
  productId: ID

  """The quantity of the unit selected for the subscription line."""
  quantity: Int!

  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!

  "The selling plan ID associated to the line.\n\nIndicates which selling plan was used to create this\ncontract line initially. The selling plan ID is also used to\nfind the associated delivery profile.\n\nThe subscription contract, subscription line, or selling plan might have\nchanged. As a result, the selling plan's attributes might not\nmatch the information on the contract.\n"
  sellingPlanId: ID

  "The selling plan name associated to the line. This name describes\nthe order line items created from this subscription line\nfor both merchants and customers.\n\nThe value can be different from the selling plan's name, because both\nthe selling plan's name and the subscription line's selling_plan_name\nattribute can be updated independently.\n"
  sellingPlanName: String

  """Variant SKU number of the item associated with the subscription line."""
  sku: String

  """Whether the variant is taxable."""
  taxable: Boolean!

  """Product title of the item associated with the subscription line."""
  title: String!

  """The product variant id associated with the subscription line."""
  variantId: ID

  """The image associated with the line item's variant or product."""
  variantImage: Image

  """
  Product variant title of the item associated with the subscription line.
  """
  variantTitle: String
}

"An auto-generated type for paginating through multiple SubscriptionLines.\n"
type SubscriptionLineConnection {
  """A list of edges."""
  edges: [SubscriptionLineEdge!]!

  """A list of the nodes contained in SubscriptionLineEdge."""
  nodes: [SubscriptionLine!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one SubscriptionLine and a cursor during pagination.\n"
type SubscriptionLineEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SubscriptionLineEdge."""
  node: SubscriptionLine!
}

"""
Specifies the input fields required to add a new subscription line to a contract.
"""
input SubscriptionLineInput {
  """The price of the product."""
  currentPrice: Decimal!

  """The custom attributes for this subscription line."""
  customAttributes: [AttributeInput!]

  """Describes expected price changes of the subscription line over time."""
  pricingPolicy: SubscriptionPricingPolicyInput

  """The ID of the product variant the subscription line refers to."""
  productVariantId: ID!

  """The quantity of the product."""
  quantity: Int!

  """The selling plan for the subscription line."""
  sellingPlanId: ID

  "The selling plan name for the subscription line.\n\nDefaults to using the selling plan's current name when not specified.\n"
  sellingPlanName: String
}

"""
Specifies the input fields required to update a subscription line on a contract.
"""
input SubscriptionLineUpdateInput {
  """The price of the product."""
  currentPrice: Decimal

  """The custom attributes for this subscription line."""
  customAttributes: [AttributeInput!]

  """Describes expected price changes of the subscription line over time."""
  pricingPolicy: SubscriptionPricingPolicyInput

  """The ID of the product variant the subscription line refers to."""
  productVariantId: ID

  """The quantity of the product."""
  quantity: Int

  """The selling plan for the subscription line."""
  sellingPlanId: ID

  """The selling plan name for the subscription line."""
  sellingPlanName: String
}

"""Represents a Mailing Address on a Subscription."""
type SubscriptionMailingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String

  """The name of the city, district, village, or town."""
  city: String

  """The name of the customer's company or organization."""
  company: String

  """The name of the country."""
  country: String

  "The two-letter code for the country of the address.\n\nFor example, US.\n"
  countryCode: CountryCode

  """The first name of the customer."""
  firstName: String

  """The last name of the customer."""
  lastName: String

  """The full name of the customer, based on firstName and lastName."""
  name: String

  """
  A unique phone number for the customer. Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String

  """The region of the address, such as the province, state, or district."""
  province: String

  "The two-letter code for the region.\n\nFor example, ON.\n"
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

"""Custom subscription discount."""
type SubscriptionManualDiscount {
  """Entitled line items used to apply the subscription discount on."""
  entitledLines: SubscriptionDiscountEntitledLines!

  """The unique identifier."""
  id: ID!

  """
  The maximum number of times the subscription discount will be applied on orders.
  """
  recurringCycleLimit: Int

  """The reason that the discount on the subscription draft is rejected."""
  rejectionReason: SubscriptionDiscountRejectionReason

  """Type of line the discount applies on."""
  targetType: DiscountTargetType!

  """The title associated with the subscription discount."""
  title: String

  """The type of the subscription discount."""
  type: DiscountType!

  """The number of times the discount was applied."""
  usageCount: Int!

  """The value of the subscription discount."""
  value: SubscriptionDiscountValue!
}

"An auto-generated type for paginating through multiple SubscriptionManualDiscounts.\n"
type SubscriptionManualDiscountConnection {
  """A list of edges."""
  edges: [SubscriptionManualDiscountEdge!]!

  """A list of the nodes contained in SubscriptionManualDiscountEdge."""
  nodes: [SubscriptionManualDiscount!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one SubscriptionManualDiscount and a cursor during pagination.\n"
type SubscriptionManualDiscountEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SubscriptionManualDiscountEdge."""
  node: SubscriptionManualDiscount!
}

"""Represents the subscription lines the discount applies on."""
input SubscriptionManualDiscountEntitledLinesInput {
  """
  Specify whether the subscription discount will apply on all subscription lines.
  """
  all: Boolean

  """
  The ID of the lines to add to or remove from the subscription discount.
  """
  lines: SubscriptionManualDiscountLinesInput
}

"""
Specifies the fixed amount value of the discount and distribution on the lines.
"""
input SubscriptionManualDiscountFixedAmountInput {
  """Fixed amount value."""
  amount: Float

  """Whether the amount is intended per line item or once per subscription."""
  appliesOnEachItem: Boolean
}

"""Specifies the input fields of a subscription discount on a contract."""
input SubscriptionManualDiscountInput {
  """Entitled line items used to apply the subscription discount on."""
  entitledLines: SubscriptionManualDiscountEntitledLinesInput

  """
  The maximum number of times the subscription discount will be applied on orders.
  """
  recurringCycleLimit: Int

  """The title associated with the subscription discount."""
  title: String

  """Percentage or fixed amount value of the discount."""
  value: SubscriptionManualDiscountValueInput
}

"""Line items that a the discount refers to."""
input SubscriptionManualDiscountLinesInput {
  """The ID of the lines to add to the subscription discount."""
  add: [ID!]

  """The ID of the lines to remove from the subscription discount."""
  remove: [ID!]
}

"""Specifies the discount value and its distribution."""
input SubscriptionManualDiscountValueInput {
  """Fixed amount input in the currency defined by the subscription."""
  fixedAmount: SubscriptionManualDiscountFixedAmountInput

  """The percentage value of the discount. Value must be between 0 - 100."""
  percentage: Int
}

"""Represents a Subscription Line Pricing Policy."""
type SubscriptionPricingPolicy {
  """
  The base price per unit for the subscription line in the contract's currency.
  """
  basePrice: MoneyV2!

  """The adjustments per cycle for the subscription line."""
  cycleDiscounts: [SubscriptionCyclePriceAdjustment!]!
}

"""An array containing all pricing changes for each billing cycle."""
input SubscriptionPricingPolicyCycleDiscountsInput {
  """The price adjustment type."""
  adjustmentType: SellingPlanPricingPolicyAdjustmentType!

  """The price adjustment value."""
  adjustmentValue: SellingPlanPricingPolicyValueInput!

  """The cycle after which the pricing policy applies."""
  afterCycle: Int!

  """The computed price after the adjustments are applied."""
  computedPrice: Decimal!
}

"""Describes expected price changes of the subscription line over time."""
input SubscriptionPricingPolicyInput {
  """
  The base price per unit for the subscription line in the contract's currency.
  """
  basePrice: Decimal!

  """An array containing all pricing changes for each billing cycle."""
  cycleDiscounts: [SubscriptionPricingPolicyCycleDiscountsInput!]!
}

"""A shipping option to deliver a subscription contract."""
type SubscriptionShippingOption {
  "The carrier service that is providing this shipping option.\nThis field isn't currently supported and returns null.\n"
  carrierService: DeliveryCarrierService

  """The code of the shipping option."""
  code: String!

  """The description of the shipping option."""
  description: String

  """If a phone number is required for the shipping option."""
  phoneRequired: Boolean

  """The presentment title of the shipping option."""
  presentmentTitle: String

  """The price of the shipping option."""
  price: MoneyV2

  """The title of the shipping option."""
  title: String!
}

"""
The result of the query to fetch shipping options for the subscription contract.
"""
union SubscriptionShippingOptionResult = SubscriptionShippingOptionResultFailure | SubscriptionShippingOptionResultSuccess

"""
Failure determining available shipping options for delivery of a subscription contract.
"""
type SubscriptionShippingOptionResultFailure {
  """Failure reason."""
  message: String
}

"""A shipping option for delivery of a subscription contract."""
type SubscriptionShippingOptionResultSuccess {
  """Available shipping options."""
  shippingOptions: [SubscriptionShippingOption!]!
}

"A suggested transaction. Suggested transaction are usually used in the context of refunds\nand exchanges.\n"
type SuggestedOrderTransaction {
  """The masked account number associated with the payment method."""
  accountNumber: String

  """The amount of the transaction."""
  amount: Money! @deprecated(reason: "Use `amountSet` instead")

  """
  The amount and currency of the suggested order transaction in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """
  The human-readable payment gateway name suggested to process the transaction.
  """
  formattedGateway: String

  """The suggested payment gateway used to process the transaction."""
  gateway: String

  """Specifies the kind of the suggested order transaction."""
  kind: SuggestedOrderTransactionKind!

  """
  Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
  """
  maximumRefundable: Money @deprecated(reason: "Use `maximumRefundableSet` instead")

  """
  Specifies the available amount to refund on the gateway in shop and presentment currencies. Only available within SuggestedRefund.
  """
  maximumRefundableSet: MoneyBag

  """
  The associated parent transaction, for example the authorization of a capture.
  """
  parentTransaction: OrderTransaction
}

"""Specifies the kind of the suggested order transaction."""
enum SuggestedOrderTransactionKind {
  """A suggested refund transaction for an order."""
  SUGGESTED_REFUND
}

"""
Represents a refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund.
"""
type SuggestedRefund {
  """The total monetary value to be refunded."""
  amount: Money! @deprecated(reason: "Use `amountSet` instead")

  """
  The total monetary value to be refunded in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """The sum of all the discounted prices of the line items being refunded."""
  discountedSubtotalSet: MoneyBag!

  """The total monetary value available to refund."""
  maximumRefundable: Money! @deprecated(reason: "Use `maximumRefundableSet` instead")

  """
  The total monetary value available to refund in shop and presentment currencies.
  """
  maximumRefundableSet: MoneyBag!

  """A list of duties to be refunded from the order."""
  refundDuties: [RefundDuty!]!

  """A list of line items to be refunded, along with restock instructions."""
  refundLineItems: [RefundLineItem!]!

  """The shipping costs to be refunded from the order."""
  shipping: ShippingRefund!

  """The sum of all the prices of the line items being refunded."""
  subtotal: Money! @deprecated(reason: "Use `subtotalSet` instead")

  """
  The sum of all the prices of the line items being refunded in shop and presentment currencies.
  """
  subtotalSet: MoneyBag!

  """A list of suggested order transactions."""
  suggestedTransactions: [SuggestedOrderTransaction!]!

  """
  The total cart discount amount that was applied to all line items in this refund.
  """
  totalCartDiscountAmountSet: MoneyBag!

  """
  The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
  """
  totalDutiesSet: MoneyBag!

  """
  The sum of the taxes being refunded from the order in shop and presentment currencies. The value must be positive.
  """
  totalTaxSet: MoneyBag!

  """
  The sum of the taxes being refunded from the order. The value must be positive.
  """
  totalTaxes: Money! @deprecated(reason: "Use `totalTaxSet` instead")
}

"""Return type for `tagsAdd` mutation."""
type TagsAddPayload {
  """The object that was updated."""
  node: Node

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `tagsRemove` mutation."""
type TagsRemovePayload {
  """The object that was updated."""
  node: Node

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Available customer tax exemptions."""
enum TaxExemption {
  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in British Columbia.
  """
  CA_BC_COMMERCIAL_FISHERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in British Columbia.
  """
  CA_BC_CONTRACTOR_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in British Columbia.
  """
  CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in British Columbia.
  """
  CA_BC_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in British Columbia.
  """
  CA_BC_SUB_CONTRACTOR_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid DIPLOMAT_EXEMPTION in Canada.
  """
  CA_DIPLOMAT_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Manitoba.
  """
  CA_MB_COMMERCIAL_FISHERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Manitoba.
  """
  CA_MB_FARMER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Manitoba.
  """
  CA_MB_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Nova Scotia.
  """
  CA_NS_COMMERCIAL_FISHERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Nova Scotia.
  """
  CA_NS_FARMER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid PURCHASE_EXEMPTION in Ontario.
  """
  CA_ON_PURCHASE_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Prince Edward Island.
  """
  CA_PE_COMMERCIAL_FISHERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Saskatchewan.
  """
  CA_SK_COMMERCIAL_FISHERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in Saskatchewan.
  """
  CA_SK_CONTRACTOR_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Saskatchewan.
  """
  CA_SK_FARMER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in Saskatchewan.
  """
  CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Saskatchewan.
  """
  CA_SK_RESELLER_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in Saskatchewan.
  """
  CA_SK_SUB_CONTRACTOR_EXEMPTION

  """
  This customer is exempt from specific taxes for holding a valid STATUS_CARD_EXEMPTION in Canada.
  """
  CA_STATUS_CARD_EXEMPTION
}

"""Represents a single tax applied to the associated line item."""
type TaxLine {
  """
  Whether the channel that submitted the tax line is liable for remitting. A value of null indicates unknown liability for this tax line.
  """
  channelLiable: Boolean

  """
  The amount of tax, in shop currency, after discounts and before returns.
  """
  price: Money! @deprecated(reason: "Use `priceSet` instead")

  """
  The amount of tax, in shop and presentment currencies, after discounts and before returns.
  """
  priceSet: MoneyBag!

  """
  The proportion of the line item price that the tax represents as a decimal.
  """
  rate: Float

  """
  The proportion of the line item price that the tax represents as a percentage.
  """
  ratePercentage: Float

  """The name of the tax."""
  title: String!
}

"A TenderTransaction represents a transaction with financial impact on a shop's balance sheet. A tender transaction always\nrepresents actual money movement between a buyer and a shop. TenderTransactions can be used instead of OrderTransactions\nfor reconciling a shop's cash flow. A TenderTransaction is immutable once created.\n"
type TenderTransaction implements Node {
  """The amount and currency of the tender transaction."""
  amount: MoneyV2!

  """A globally-unique identifier."""
  id: ID!

  """Information about the payment method used for the transaction."""
  paymentMethod: String

  """Date and time when the transaction was processed."""
  processedAt: DateTime

  """The remote gateway reference associated with the tender transaction."""
  remoteReference: String

  """Whether the transaction is a test transaction."""
  test: Boolean!

  """Information about the payment instrument used for the transaction."""
  transactionDetails: TenderTransactionDetails

  """The staff member who performed the transaction."""
  user: StaffMember
}

"An auto-generated type for paginating through multiple TenderTransactions.\n"
type TenderTransactionConnection {
  """A list of edges."""
  edges: [TenderTransactionEdge!]!

  """A list of the nodes contained in TenderTransactionEdge."""
  nodes: [TenderTransaction!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Information about the credit card used for this transaction."""
type TenderTransactionCreditCardDetails {
  """
  The name of the company that issued the customer's credit card. Example: `Visa`.
  """
  creditCardCompany: String

  """
  The customer's credit card number, with all digits except the last 4 redacted. Example: `•••• •••• •••• 1234`
  """
  creditCardNumber: String
}

"""Information about the payment instrument used for this transaction."""
union TenderTransactionDetails = TenderTransactionCreditCardDetails

"An auto-generated type which holds one TenderTransaction and a cursor during pagination.\n"
type TenderTransactionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of TenderTransactionEdge."""
  node: TenderTransaction!
}

"""A sale associated with a tip."""
type TipSale implements Sale {
  """The type of order action that the sale represents."""
  actionType: SaleActionType!

  """The unique identifier for the sale."""
  id: ID!

  """The line item for the associated sale."""
  lineItem: LineItem!

  """The line type assocated with the sale."""
  lineType: SaleLineType!

  """The number of units either ordered or intended to be returned."""
  quantity: Int

  """All individual taxes associated with the sale."""
  taxes: [SaleTax!]!

  """The total sale amount after taxes and discounts."""
  totalAmount: MoneyBag!

  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: MoneyBag!

  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: MoneyBag!

  """The total amount of taxes for the sale."""
  totalTaxAmount: MoneyBag!
}

"""Transaction fee related to an order transaction."""
type TransactionFee implements Node {
  """Amount of the fee."""
  amount: MoneyV2!

  """Flat rate charge for a transaction."""
  flatFee: MoneyV2!

  """Name of the credit card flat fee."""
  flatFeeName: String

  """A globally-unique identifier."""
  id: ID!

  """Percentage charge."""
  rate: Decimal!

  """Name of the credit card rate."""
  rateName: String

  """Tax amount charged on the fee."""
  taxAmount: MoneyV2!

  """Name of the type of fee."""
  type: String!
}

"""Translatable content of a resource's field."""
type TranslatableContent {
  """Hash digest representation of the content value."""
  digest: String

  """The resource field that is being translated."""
  key: String!

  """Locale of the content."""
  locale: String!

  """Content value."""
  value: String
}

"""A resource that has translatable fields."""
type TranslatableResource {
  """GID of the resource."""
  resourceId: ID!

  """Translatable content."""
  translatableContent: [TranslatableContent!]!

  """Translatable content translations."""
  translations(
    """Filters translations by locale."""
    locale: String!

    """Filters by outdated translations."""
    outdated: Boolean
  ): [Translation!]!
}

"An auto-generated type for paginating through multiple TranslatableResources.\n"
type TranslatableResourceConnection {
  """A list of edges."""
  edges: [TranslatableResourceEdge!]!

  """A list of the nodes contained in TranslatableResourceEdge."""
  nodes: [TranslatableResource!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"An auto-generated type which holds one TranslatableResource and a cursor during pagination.\n"
type TranslatableResourceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of TranslatableResourceEdge."""
  node: TranslatableResource!
}

"""Specifies the type of resources that are translatable."""
enum TranslatableResourceType {
  """
  A product collection. Translatable fields: `title`, `body_html`, `meta_title`, `meta_description`.
  """
  COLLECTION

  """
  The delivery method definition. For example, "Standard", or "Expedited".
          Translatable fields: `name`.
  """
  DELIVERY_METHOD_DEFINITION

  """An email template. Translatable fields: `title`, `body_html`."""
  EMAIL_TEMPLATE

  """A link to direct users. Translatable fields: `title`."""
  LINK

  """A Metafield. Translatable fields: `value`."""
  METAFIELD

  """
  An online store article. Translatable fields: `title`, `body_html`, `summary_html`, `meta_title`, `meta_description`.
  """
  ONLINE_STORE_ARTICLE

  """
  An online store blog. Translatable fields: `title`, `meta_title`, `meta_description`.
  """
  ONLINE_STORE_BLOG

  """A category of links. Translatable fields: `title`."""
  ONLINE_STORE_MENU

  """
  An online store page. Translatable fields: `title`, `body_html`, `meta_title`, `meta_description`.
  """
  ONLINE_STORE_PAGE

  """
  An online store theme. Translatable fields: `dynamic keys based on theme data`.
  """
  ONLINE_STORE_THEME

  """A packing slip template. Translatable fields: `body`."""
  PACKING_SLIP_TEMPLATE

  """A payment gateway. Translatable fields: `name`."""
  PAYMENT_GATEWAY

  """
  An online store product. Translatable fields: `title`, `body_html`, `meta_title`, `meta_description`.
  """
  PRODUCT

  """
  An online store custom product property name. For example, "Size", "Color", or "Material".
          Translatable fields: `name`.
  """
  PRODUCT_OPTION

  """
  An online store product variant. Translatable fields: `title`, `option1`, `option2`, `option3`. The field `title` has been deprecated.
  """
  PRODUCT_VARIANT

  """A shop. Translatable fields: `meta_title`, `meta_description`."""
  SHOP

  """A shop policy. Translatable fields: `body`."""
  SHOP_POLICY

  """An SMS template. Translatable fields: `body`."""
  SMS_TEMPLATE
}

"""Translation of a field of a resource."""
type Translation {
  """
  On the resource that this translation belongs to, the reference to the value being translated.
  """
  key: String!

  """ISO code of the translation locale."""
  locale: String!

  """
  Whether the original content has changed since this translation was updated.
  """
  outdated: Boolean!

  """Translation value."""
  value: String
}

"""Possible error codes that can be returned by `TranslationUserError`."""
enum TranslationErrorCode {
  """The input value is blank."""
  BLANK

  """Translation value is invalid."""
  FAILS_RESOURCE_VALIDATION

  """The input value is invalid."""
  INVALID

  """Locale language code is invalid."""
  INVALID_CODE

  """Locale code format is invalid."""
  INVALID_FORMAT

  """Translation key is invalid."""
  INVALID_KEY_FOR_MODEL

  """Locale is invalid for the shop."""
  INVALID_LOCALE_FOR_SHOP

  """Translatable content is invalid."""
  INVALID_TRANSLATABLE_CONTENT

  """Resource does not exist."""
  RESOURCE_NOT_FOUND

  """Too many translation keys for the resource."""
  TOO_MANY_KEYS_FOR_RESOURCE
}

"""
Provides the fields and values to use when creating or updating a translation.
"""
input TranslationInput {
  """
  On the resource that this translation belongs to,         the reference to the value being translated.
  """
  key: String!

  """ISO code of the locale being translated into."""
  locale: String!

  """Hash digest representation         of the content being translated."""
  translatableContentDigest: String!

  """The value of the translation."""
  value: String!
}

"""
Represents an error that happens during the execution of a translation mutation.
"""
type TranslationUserError implements DisplayableError {
  """The error code."""
  code: TranslationErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""Return type for `translationsRegister` mutation."""
type TranslationsRegisterPayload {
  """The translations that were created or updated."""
  translations: [Translation!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [TranslationUserError!]!
}

"""Return type for `translationsRemove` mutation."""
type TranslationsRemovePayload {
  """The translations that were deleted."""
  translations: [Translation!]

  """The list of errors that occurred from executing the mutation."""
  userErrors: [TranslationUserError!]!
}

"Represents an [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986) and\n[RFC 3987](https://datatracker.ietf.org/doc/html/rfc3987)-compliant URI string.\n\nFor example, `\"https://johns-apparel.myshopify.com\"` is a valid URL. It includes a scheme (`https`) and a host\n(`johns-apparel.myshopify.com`).\n"
scalar URL

"Specifies the\n[Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)\nthat are associated with a related marketing campaign.\n"
input UTMInput {
  """The name of the UTM campaign."""
  campaign: String!

  """The UTM campaign medium."""
  medium: String!

  """The name of the website or application where the referral link exists."""
  source: String!
}

"""Represents a set of UTM parameters."""
type UTMParameters {
  """The name of a marketing campaign."""
  campaign: String

  """
  Identifies specific content in a marketing campaign. Used to differentiate between similar content or links in a marketing campaign to determine which is the most effective.
  """
  content: String

  """
  The medium of a marketing campaign, such as a banner or email newsletter.
  """
  medium: String

  """
  The source of traffic to the merchant's store, such as Google or an email newsletter.
  """
  source: String

  """Paid search terms used by a marketing campaign."""
  term: String
}

"""Systems of weights and measures."""
enum UnitSystem {
  """Imperial system of weights and measures."""
  IMPERIAL_SYSTEM

  """Metric system of weights and measures."""
  METRIC_SYSTEM
}

"An unsigned 64-bit integer. Represents whole numeric values between 0 and 2^64 - 1 encoded as a string of base-10 digits.\n\nExample value: `\"50\"`.\n"
scalar UnsignedInt64

"""Specifies the input fields required to update a media object."""
input UpdateMediaInput {
  """The alt text associated to the media."""
  alt: String

  """Specifies the media to update."""
  id: ID!

  """
  The source from which to update the media preview image. May be an external URL or signed upload URL.
  """
  previewImageSource: String
}

"""The URL redirect for the online store."""
type UrlRedirect implements Node {
  """The ID of the URL redirect."""
  id: ID!

  """
  The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
  """
  path: String!

  """The target location where the user will be redirected to."""
  target: String!
}

"""Return type for `urlRedirectBulkDeleteAll` mutation."""
type UrlRedirectBulkDeleteAllPayload {
  """The asynchronous job removing the redirects."""
  job: Job

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `urlRedirectBulkDeleteByIds` mutation."""
type UrlRedirectBulkDeleteByIdsPayload {
  """The asynchronous job removing the redirects."""
  job: Job

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UrlRedirectBulkDeleteByIdsUserError!]!
}

"""
An error that occurs during the execution of `UrlRedirectBulkDeleteByIds`.
"""
type UrlRedirectBulkDeleteByIdsUserError implements DisplayableError {
  """The error code."""
  code: UrlRedirectBulkDeleteByIdsUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `UrlRedirectBulkDeleteByIdsUserError`.
"""
enum UrlRedirectBulkDeleteByIdsUserErrorCode {
  """
  You must pass one or more [`URLRedirect`](
              https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect
            ) object IDs.
  """
  IDS_EMPTY
}

"""Return type for `urlRedirectBulkDeleteBySavedSearch` mutation."""
type UrlRedirectBulkDeleteBySavedSearchPayload {
  """The asynchronous job removing the redirects."""
  job: Job

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UrlRedirectBulkDeleteBySavedSearchUserError!]!
}

"""
An error that occurs during the execution of `UrlRedirectBulkDeleteBySavedSearch`.
"""
type UrlRedirectBulkDeleteBySavedSearchUserError implements DisplayableError {
  """The error code."""
  code: UrlRedirectBulkDeleteBySavedSearchUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `UrlRedirectBulkDeleteBySavedSearchUserError`.
"""
enum UrlRedirectBulkDeleteBySavedSearchUserErrorCode {
  """The saved search's query cannot match all entries or be empty."""
  INVALID_SAVED_SEARCH_QUERY

  """Saved search not found."""
  SAVED_SEARCH_NOT_FOUND
}

"""Return type for `urlRedirectBulkDeleteBySearch` mutation."""
type UrlRedirectBulkDeleteBySearchPayload {
  """The asynchronous job removing the redirects."""
  job: Job

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UrlRedirectBulkDeleteBySearchUserError!]!
}

"""
An error that occurs during the execution of `UrlRedirectBulkDeleteBySearch`.
"""
type UrlRedirectBulkDeleteBySearchUserError implements DisplayableError {
  """The error code."""
  code: UrlRedirectBulkDeleteBySearchUserErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `UrlRedirectBulkDeleteBySearchUserError`.
"""
enum UrlRedirectBulkDeleteBySearchUserErrorCode {
  """Invalid search string."""
  INVALID_SEARCH_ARGUMENT
}

"An auto-generated type for paginating through multiple UrlRedirects.\n"
type UrlRedirectConnection {
  """A list of edges."""
  edges: [UrlRedirectEdge!]!

  """A list of the nodes contained in UrlRedirectEdge."""
  nodes: [UrlRedirect!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `urlRedirectCreate` mutation."""
type UrlRedirectCreatePayload {
  """The created redirect."""
  urlRedirect: UrlRedirect

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UrlRedirectUserError!]!
}

"""Return type for `urlRedirectDelete` mutation."""
type UrlRedirectDeletePayload {
  """The ID of the deleted redirect."""
  deletedUrlRedirectId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UrlRedirectUserError!]!
}

"An auto-generated type which holds one UrlRedirect and a cursor during pagination.\n"
type UrlRedirectEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of UrlRedirectEdge."""
  node: UrlRedirect!
}

"""Possible error codes that can be returned by `UrlRedirectUserError`."""
enum UrlRedirectErrorCode {
  """Redirect could not be created."""
  CREATE_FAILED

  """Redirect could not be deleted."""
  DELETE_FAILED

  """Redirect does not exist."""
  DOES_NOT_EXIST

  """Redirect could not be updated."""
  UPDATE_FAILED
}

"A request to import a [`URLRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object\ninto the Online Store channel. Apps can use this to query the state of an `UrlRedirectImport` request.\n\nFor more information, see [`url-redirect`](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect)s.\n"
type UrlRedirectImport implements Node {
  """The number of rows in the file."""
  count: Int

  """The number of redirects created from the import."""
  createdCount: Int

  """The number of redirects that failed to be imported."""
  failedCount: Int

  """Whether the import is finished."""
  finished: Boolean!

  """The date and time when the import finished."""
  finishedAt: DateTime

  """The ID of the `UrlRedirectImport` object."""
  id: ID!

  """A list of up to three previews of the URL redirects to be imported."""
  previewRedirects: [UrlRedirectImportPreview!]!

  """The number of redirects updated during the import."""
  updatedCount: Int
}

"""Return type for `urlRedirectImportCreate` mutation."""
type UrlRedirectImportCreatePayload {
  """The created `URLRedirectImport` object."""
  urlRedirectImport: UrlRedirectImport

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UrlRedirectImportUserError!]!
}

"""
Possible error codes that can be returned by `UrlRedirectImportUserError`.
"""
enum UrlRedirectImportErrorCode {
  """The import has already completed."""
  ALREADY_IMPORTED

  """CSV file does not exist at given URL."""
  FILE_DOES_NOT_EXIST @deprecated(reason: "This error code is never returned")

  """The import is already in progress."""
  IN_PROGRESS

  """URL redirect import not found."""
  NOT_FOUND
}

"""A preview of a URL redirect import row."""
type UrlRedirectImportPreview {
  """
  The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
  """
  path: String!

  """The target location where the user will be redirected to."""
  target: String!
}

"""Return type for `urlRedirectImportSubmit` mutation."""
type UrlRedirectImportSubmitPayload {
  """The asynchronous job importing the redirects."""
  job: Job

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UrlRedirectImportUserError!]!
}

"""
Represents an error that happens during execution of a redirect import mutation.
"""
type UrlRedirectImportUserError implements DisplayableError {
  """The error code."""
  code: UrlRedirectImportErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""The input fields to create or update a URL redirect."""
input UrlRedirectInput {
  """
  The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
  """
  path: String

  """The target location where the user will be redirected to."""
  target: String
}

"""The set of valid sort keys for the UrlRedirect query."""
enum UrlRedirectSortKeys {
  """Sort by the `id` value."""
  ID

  """Sort by the `path` value."""
  PATH

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"""Return type for `urlRedirectUpdate` mutation."""
type UrlRedirectUpdatePayload {
  """Returns the updated URL redirect."""
  urlRedirect: UrlRedirect

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UrlRedirectUserError!]!
}

"""
Represents an error that happens during execution of a redirect mutation.
"""
type UrlRedirectUserError implements DisplayableError {
  """The error code."""
  code: UrlRedirectErrorCode

  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""Represents an error in the input of a mutation."""
type UserError implements DisplayableError {
  """The path to the input field that caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"Time between UTC time and a location's observed time, in the format `\"+HH:MM\"` or `\"-HH:MM\"`.\n\nExample value: `\"-07:00\"`.\n"
scalar UtcOffset

"""Represents a credit card payment instrument."""
type VaultCreditCard {
  """The billing address of the card."""
  billingAddress: CustomerCreditCardBillingAddress

  """The brand for the card."""
  brand: String!

  """Whether the card has been expired."""
  expired: Boolean!

  """The expiry month of the card."""
  expiryMonth: Int!

  """The expiry year of the card."""
  expiryYear: Int!

  """The last four digits for the card."""
  lastDigits: String!

  """The name of the card holder."""
  name: String!
}

"""Represents a paypal billing agreement payment instrument."""
type VaultPaypalBillingAgreement {
  """Whether the paypal billing agreement is inactive."""
  inactive: Boolean!

  """The paypal account name."""
  name: String!

  """The paypal account email address."""
  paypalAccountEmail: String!
}

"Representation of 3d vectors and points. It can represent\neither the coordinates of a point in space, a direction, or\nsize. Presented as an object with three floating-point values.\n"
type Vector3 {
  """The x coordinate of Vector3."""
  x: Float!

  """The y coordinate of Vector3."""
  y: Float!

  """The z coordinate of Vector3."""
  z: Float!
}

"Represents a Shopify hosted video.\n"
type Video implements File & Media & Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String

  "The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.\n"
  createdAt: DateTime!

  "The video's duration in milliseconds. Note that this value will be null unless the video's status field is\n[READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).\n"
  duration: Int

  """Any errors that have occurred on the file."""
  fileErrors: [FileError!]!

  """The status of the file."""
  fileStatus: FileStatus!

  """The video's filename."""
  filename: String!

  """A globally-unique identifier."""
  id: ID!

  """The media content type."""
  mediaContentType: MediaContentType!

  """Any errors which have occurred on the media."""
  mediaErrors: [MediaError!]!

  """The warnings attached to the media."""
  mediaWarnings: [MediaWarning!]!

  "The video's original source. Note that this value will be null unless the video's status field is\n[READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).\n"
  originalSource: VideoSource

  """The preview image for the media."""
  preview: MediaPreviewImage

  "The video's sources. Note that this value will be empty unless the video's status field is\n[READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).\n"
  sources: [VideoSource!]!

  """Current status of the media."""
  status: MediaStatus!
}

"Represents a source for a Shopify hosted video.\n\nTypes of sources include the original video, lower resolution versions of the original video,\nand an m3u8 playlist file.\n\nNote that only [video](https://shopify.dev/api/admin-graphql/latest/objects/video)s with a status field\nof [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready) will have sources.\n"
type VideoSource {
  """The video source's file size in bytes."""
  fileSize: Int

  """The video source's file format (extension)."""
  format: String!

  """The video source's height."""
  height: Int!

  """The video source's MIME type."""
  mimeType: String!

  """The video source's URL."""
  url: String!

  """The video source's width."""
  width: Int!
}

"""
An Amazon EventBridge partner event source to which webhook subscriptions publish events.
"""
type WebhookEventBridgeEndpoint {
  """The ARN of this EventBridge partner event source."""
  arn: ARN!
}

"""An HTTPS endpoint to which webhook subscriptions send POST requests."""
type WebhookHttpEndpoint {
  """The URL to which the webhooks events are sent."""
  callbackUrl: URL!
}

"""
A Google Cloud Pub/Sub topic to which webhook subscriptions publish events.
"""
type WebhookPubSubEndpoint {
  """The Google Cloud Pub/Sub project ID."""
  pubSubProject: String!

  """The Google Cloud Pub/Sub topic ID."""
  pubSubTopic: String!
}

"A webhook subscription is a persisted data object created by an app using the REST Admin API or GraphQL Admin API.\nIt describes the topic that the app wants to receive, and a destination where Shopify should send webhooks of the specified topic.\nWhen an event for a given topic occurs, the webhook subscription sends a relevant payload to the destination.\nLearn more about the [webhooks system](https://shopify.dev/apps/webhooks).\n"
type WebhookSubscription implements LegacyInteroperability & Node {
  """
  The destination URI to which the webhook subscription will send a message when an event occurs.
  """
  callbackUrl: URL! @deprecated(reason: "Use `endpoint` instead")

  """The date and time when the webhook subscription was created."""
  createdAt: DateTime!

  """The endpoint to which the webhook subscription will send events."""
  endpoint: WebhookSubscriptionEndpoint!

  """The format in which the webhook subscription should send the data."""
  format: WebhookSubscriptionFormat!

  """A globally-unique identifier."""
  id: ID!

  """
  An optional array of top-level resource fields that should be serialized and sent in the webhook message. If null, then all fields will be sent.
  """
  includeFields: [String!]!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """
  The list of namespaces for any metafields that should be included in the webhook subscription.
  """
  metafieldNamespaces: [String!]!

  """
  The list of namespaces for private metafields that should be included in the webhook subscription.
  """
  privateMetafieldNamespaces: [String!]!

  """
  The type of event that triggers the webhook. The topic determines when the webhook subscription sends a webhook, as well as what class of data object that webhook contains.
  """
  topic: WebhookSubscriptionTopic!

  """The date and time when the webhook subscription was updated."""
  updatedAt: DateTime!
}

"An auto-generated type for paginating through multiple WebhookSubscriptions.\n"
type WebhookSubscriptionConnection {
  """A list of edges."""
  edges: [WebhookSubscriptionEdge!]!

  """A list of the nodes contained in WebhookSubscriptionEdge."""
  nodes: [WebhookSubscription!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Return type for `webhookSubscriptionCreate` mutation."""
type WebhookSubscriptionCreatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!

  """The webhook subscription that was created."""
  webhookSubscription: WebhookSubscription
}

"""Return type for `webhookSubscriptionDelete` mutation."""
type WebhookSubscriptionDeletePayload {
  """The ID of the deleted webhook subscription."""
  deletedWebhookSubscriptionId: ID

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"An auto-generated type which holds one WebhookSubscription and a cursor during pagination.\n"
type WebhookSubscriptionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of WebhookSubscriptionEdge."""
  node: WebhookSubscription!
}

"""An endpoint to which webhook subscriptions send webhooks events."""
union WebhookSubscriptionEndpoint = WebhookEventBridgeEndpoint | WebhookHttpEndpoint | WebhookPubSubEndpoint

"""The supported formats for webhook subscriptions."""
enum WebhookSubscriptionFormat {
  JSON
  XML
}

"Specifies the input fields for a webhook subscription.\n"
input WebhookSubscriptionInput {
  """
  URL where the webhook subscription should send the POST request when the event occurs.
  """
  callbackUrl: URL

  """The format in which the webhook subscription should send the data."""
  format: WebhookSubscriptionFormat

  """The list of fields to be included in the webhook subscription."""
  includeFields: [String!]

  """
  The list of namespaces for any metafields that should be included in the webhook subscription.
  """
  metafieldNamespaces: [String!]

  """
  The list of namespaces for private metafields that should be included inthe webhook subscription.
  """
  privateMetafieldNamespaces: [String!]
}

"""The set of valid sort keys for the WebhookSubscription query."""
enum WebhookSubscriptionSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  "Sort by relevance to the search terms when the `query` parameter is specified on the connection.\nDon't use this sort key when no search query is specified.\n"
  RELEVANCE
}

"The supported topics for webhook subscriptions. You can use webhook subscriptions to receive\nnotifications about particular events in a shop.\n\nYou don't create webhook subscriptions to\n[mandatory webhooks](https://shopify.dev/apps/webhooks/configuration/mandatory-webhooks).\nInstead, you configure mandatory webhooks in your Partner Dashboard as part of your app setup.\n"
enum WebhookSubscriptionTopic {
  """
  The webhook topic for `app_purchases_one_time/update` events. Occurs whenever a one-time app charge is updated.
  """
  APP_PURCHASES_ONE_TIME_UPDATE

  """
  The webhook topic for `app_subscriptions/approaching_capped_amount` events. Occurs when the balance used on an app subscription crosses 90% of the capped amount.
  """
  APP_SUBSCRIPTIONS_APPROACHING_CAPPED_AMOUNT

  """
  The webhook topic for `app_subscriptions/update` events. Occurs whenever an app subscription is updated.
  """
  APP_SUBSCRIPTIONS_UPDATE

  """
  The webhook topic for `app/uninstalled` events. Occurs whenever a shop has uninstalled the app.
  """
  APP_UNINSTALLED

  """
  The webhook topic for `attributed_sessions/first` events. Occurs whenever an order with a "first" attributed session is attributed. Requires the `read_marketing_events` scope.
  """
  ATTRIBUTED_SESSIONS_FIRST

  """
  The webhook topic for `attributed_sessions/last` events. Occurs whenever an order with a "last" attributed session is attributed. Requires the `read_marketing_events` scope.
  """
  ATTRIBUTED_SESSIONS_LAST

  """
  The webhook topic for `bulk_operations/finish` events. Notifies when a Bulk Operation finishes.
  """
  BULK_OPERATIONS_FINISH

  """
  The webhook topic for `carts/create` events. Occurs when a cart is created in the online store. Other types of carts aren't supported. For example, the webhook doesn't support carts that are created in a custom storefront. Requires the `read_orders` scope.
  """
  CARTS_CREATE

  """
  The webhook topic for `carts/update` events. Occurs when a cart is updated in the online store. Other types of carts aren't supported. For example, the webhook doesn't support carts that are updated in a custom storefront. Requires the `read_orders` scope.
  """
  CARTS_UPDATE

  """
  The webhook topic for `channels/delete` events. Occurs whenever a channel is deleted. Requires the `read_publications` scope.
  """
  CHANNELS_DELETE

  """
  The webhook topic for `checkouts/create` events. Occurs whenever a checkout is created. Requires the `read_orders` scope.
  """
  CHECKOUTS_CREATE

  """
  The webhook topic for `checkouts/delete` events. Occurs whenever a checkout is deleted. Requires the `read_orders` scope.
  """
  CHECKOUTS_DELETE

  """
  The webhook topic for `checkouts/update` events. Occurs whenever a checkout is updated. Requires the `read_orders` scope.
  """
  CHECKOUTS_UPDATE

  """
  The webhook topic for `collections/create` events. Occurs whenever a collection is created. Requires the `read_products` scope.
  """
  COLLECTIONS_CREATE

  """
  The webhook topic for `collections/delete` events. Occurs whenever a collection is deleted. Requires the `read_products` scope.
  """
  COLLECTIONS_DELETE

  """
  The webhook topic for `collections/update` events. Occurs whenever a collection is updated, including whenever products are added or removed from the collection. Occurs once if multiple products are added or removed from a collection at the same time. Requires the `read_products` scope.
  """
  COLLECTIONS_UPDATE

  """
  The webhook topic for `collection_listings/add` events. Occurs whenever a collection listing is added. Requires the `read_product_listings` scope.
  """
  COLLECTION_LISTINGS_ADD

  """
  The webhook topic for `collection_listings/remove` events. Occurs whenever a collection listing is removed. Requires the `read_product_listings` scope.
  """
  COLLECTION_LISTINGS_REMOVE

  """
  The webhook topic for `collection_listings/update` events. Occurs whenever a collection listing is updated. Requires the `read_product_listings` scope.
  """
  COLLECTION_LISTINGS_UPDATE

  """
  The webhook topic for `collection_publications/create` events. Occurs whenever a collection publication listing is created. Requires the `read_publications` scope.
  """
  COLLECTION_PUBLICATIONS_CREATE

  """
  The webhook topic for `collection_publications/delete` events. Occurs whenever a collection publication listing is deleted. Requires the `read_publications` scope.
  """
  COLLECTION_PUBLICATIONS_DELETE

  """
  The webhook topic for `collection_publications/update` events. Occurs whenever a collection publication listing is updated. Requires the `read_publications` scope.
  """
  COLLECTION_PUBLICATIONS_UPDATE

  """
  The webhook topic for `customers/create` events. Occurs whenever a customer is created. Requires the `read_customers` scope.
  """
  CUSTOMERS_CREATE

  """
  The webhook topic for `customers/delete` events. Occurs whenever a customer is deleted. Requires the `read_customers` scope.
  """
  CUSTOMERS_DELETE

  """
  The webhook topic for `customers/disable` events. Occurs whenever a customer account is disabled. Requires the `read_customers` scope.
  """
  CUSTOMERS_DISABLE

  """
  The webhook topic for `customers/enable` events. Occurs whenever a customer account is enabled. Requires the `read_customers` scope.
  """
  CUSTOMERS_ENABLE

  """
  The webhook topic for `customers_marketing_consent/update` events. Occurs whenever a customer's marketing consent is updated. Requires the `read_customers` scope.
  """
  CUSTOMERS_MARKETING_CONSENT_UPDATE

  """
  The webhook topic for `customers/update` events. Occurs whenever a customer is updated. Requires the `read_customers` scope.
  """
  CUSTOMERS_UPDATE

  """
  The webhook topic for `customer_groups/create` events. Occurs whenever a customer saved search is created. Requires the `read_customers` scope.
  """
  CUSTOMER_GROUPS_CREATE

  """
  The webhook topic for `customer_groups/delete` events. Occurs whenever a customer saved search is deleted. Requires the `read_customers` scope.
  """
  CUSTOMER_GROUPS_DELETE

  """
  The webhook topic for `customer_groups/update` events. Occurs whenever a customer saved search is updated. Requires the `read_customers` scope.
  """
  CUSTOMER_GROUPS_UPDATE

  """
  The webhook topic for `customer_payment_methods/create` events. Occurs whenever a customer payment method is created. Requires the `read_customer_payment_methods` scope.
  """
  CUSTOMER_PAYMENT_METHODS_CREATE

  """
  The webhook topic for `customer_payment_methods/revoke` events. Occurs whenever a customer payment method is revoked. Requires the `read_customer_payment_methods` scope.
  """
  CUSTOMER_PAYMENT_METHODS_REVOKE

  """
  The webhook topic for `customer_payment_methods/update` events. Occurs whenever a customer payment method is updated. Requires the `read_customer_payment_methods` scope.
  """
  CUSTOMER_PAYMENT_METHODS_UPDATE

  """
  The webhook topic for `disputes/create` events. Occurs whenever a dispute is created. Requires the `read_shopify_payments_disputes` scope.
  """
  DISPUTES_CREATE

  """
  The webhook topic for `disputes/update` events. Occurs whenever a dispute is updated. Requires the `read_shopify_payments_disputes` scope.
  """
  DISPUTES_UPDATE

  """
  The webhook topic for `domains/create` events. Occurs whenever a domain is created.
  """
  DOMAINS_CREATE

  """
  The webhook topic for `domains/destroy` events. Occurs whenever a domain is destroyed.
  """
  DOMAINS_DESTROY

  """
  The webhook topic for `domains/update` events. Occurs whenever a domain is updated.
  """
  DOMAINS_UPDATE

  """
  The webhook topic for `draft_orders/create` events. Occurs whenever a draft order is created. Requires the `read_draft_orders` scope.
  """
  DRAFT_ORDERS_CREATE

  """
  The webhook topic for `draft_orders/delete` events. Occurs whenever a draft order is deleted. Requires the `read_draft_orders` scope.
  """
  DRAFT_ORDERS_DELETE

  """
  The webhook topic for `draft_orders/update` events. Occurs whenever a draft order is updated. Requires the `read_draft_orders` scope.
  """
  DRAFT_ORDERS_UPDATE

  """
  The webhook topic for `fulfillments/create` events. Occurs whenever a fulfillment is created. Requires at least one of the following scopes: read_fulfillments, read_marketplace_orders.
  """
  FULFILLMENTS_CREATE

  """
  The webhook topic for `fulfillments/update` events. Occurs whenever a fulfillment is updated. Requires at least one of the following scopes: read_fulfillments, read_marketplace_orders.
  """
  FULFILLMENTS_UPDATE

  """
  The webhook topic for `fulfillment_events/create` events. Occurs whenever a fulfillment event is created. Requires the `read_fulfillments` scope.
  """
  FULFILLMENT_EVENTS_CREATE

  """
  The webhook topic for `fulfillment_events/delete` events. Occurs whenever a fulfillment event is deleted. Requires the `read_fulfillments` scope.
  """
  FULFILLMENT_EVENTS_DELETE

  """
  The webhook topic for `inventory_items/create` events. Occurs whenever an inventory item is created. Requires the `read_inventory` scope.
  """
  INVENTORY_ITEMS_CREATE

  """
  The webhook topic for `inventory_items/delete` events. Occurs whenever an inventory item is deleted. Requires the `read_inventory` scope.
  """
  INVENTORY_ITEMS_DELETE

  """
  The webhook topic for `inventory_items/update` events. Occurs whenever an inventory item is updated. Requires the `read_inventory` scope.
  """
  INVENTORY_ITEMS_UPDATE

  """
  The webhook topic for `inventory_levels/connect` events. Occurs whenever an inventory level is connected. Requires the `read_inventory` scope.
  """
  INVENTORY_LEVELS_CONNECT

  """
  The webhook topic for `inventory_levels/disconnect` events. Occurs whenever an inventory level is disconnected. Requires the `read_inventory` scope.
  """
  INVENTORY_LEVELS_DISCONNECT

  """
  The webhook topic for `inventory_levels/update` events. Occurs whenever an inventory level is updated. Requires the `read_inventory` scope.
  """
  INVENTORY_LEVELS_UPDATE

  """
  The webhook topic for `locales/create` events. Occurs whenever a shop locale is created Requires the `read_locales` scope.
  """
  LOCALES_CREATE

  """
  The webhook topic for `locales/update` events. Occurs whenever a shop locale is updated, such as published or unpublished Requires the `read_locales` scope.
  """
  LOCALES_UPDATE

  """
  The webhook topic for `locations/create` events. Occurs whenever a location is created. Requires the `read_locations` scope.
  """
  LOCATIONS_CREATE

  """
  The webhook topic for `locations/delete` events. Occurs whenever a location is deleted. Requires the `read_locations` scope.
  """
  LOCATIONS_DELETE

  """
  The webhook topic for `locations/update` events. Occurs whenever a location is updated. Requires the `read_locations` scope.
  """
  LOCATIONS_UPDATE

  """
  The webhook topic for `markets/create` events. Occurs when a new market is created. Requires the `read_markets` scope.
  """
  MARKETS_CREATE

  """
  The webhook topic for `markets/delete` events. Occurs when a market is deleted. Requires the `read_markets` scope.
  """
  MARKETS_DELETE

  """
  The webhook topic for `markets/update` events. Occurs when a market is updated. Requires the `read_markets` scope.
  """
  MARKETS_UPDATE

  """
  The webhook topic for `orders/cancelled` events. Occurs whenever an order is cancelled. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
  """
  ORDERS_CANCELLED

  """
  The webhook topic for `orders/create` events. Occurs whenever an order is created. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
  """
  ORDERS_CREATE

  """
  The webhook topic for `orders/delete` events. Occurs whenever an order is deleted. Requires the `read_orders` scope.
  """
  ORDERS_DELETE

  """
  The webhook topic for `orders/edited` events. Occurs whenever an order is edited. Requires the `read_orders` scope.
  """
  ORDERS_EDITED

  """
  The webhook topic for `orders/fulfilled` events. Occurs whenever an order is fulfilled. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
  """
  ORDERS_FULFILLED

  """
  The webhook topic for `orders/paid` events. Occurs whenever an order is paid. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
  """
  ORDERS_PAID

  """
  The webhook topic for `orders/partially_fulfilled` events. Occurs whenever an order is partially fulfilled. Requires the `read_orders` scope.
  """
  ORDERS_PARTIALLY_FULFILLED

  """
  The webhook topic for `orders/updated` events. Occurs whenever an order is updated. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
  """
  ORDERS_UPDATED

  """
  The webhook topic for `order_transactions/create` events. Occurs when a order transaction is created or when it's status is updated. Only occurs for transactions with a status of success, failure or error. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
  """
  ORDER_TRANSACTIONS_CREATE

  """
  The webhook topic for `payment_terms/create` events. Occurs whenever payment terms are created. Requires the `read_payment_terms` scope.
  """
  PAYMENT_TERMS_CREATE

  """
  The webhook topic for `payment_terms/delete` events. Occurs whenever payment terms are deleted. Requires the `read_payment_terms` scope.
  """
  PAYMENT_TERMS_DELETE

  """
  The webhook topic for `payment_terms/update` events. Occurs whenever payment terms are updated. Requires the `read_payment_terms` scope.
  """
  PAYMENT_TERMS_UPDATE

  """
  The webhook topic for `products/create` events. Occurs whenever a product is created. Requires the `read_products` scope.
  """
  PRODUCTS_CREATE

  """
  The webhook topic for `products/delete` events. Occurs whenever a product publication is deleted. Requires the `read_products` scope.
  """
  PRODUCTS_DELETE

  """
  The webhook topic for `products/update` events. Occurs whenever a product is updated, or whenever a product is ordered, or whenever a variant is added, removed, or updated. Requires the `read_products` scope.
  """
  PRODUCTS_UPDATE

  """
  The webhook topic for `product_listings/add` events. Occurs whenever an active product is listed on a channel. Requires the `read_product_listings` scope.
  """
  PRODUCT_LISTINGS_ADD

  """
  The webhook topic for `product_listings/remove` events. Occurs whenever a product listing is removed from the channel. Requires the `read_product_listings` scope.
  """
  PRODUCT_LISTINGS_REMOVE

  """
  The webhook topic for `product_listings/update` events. Occurs whenever a product publication is updated. Requires the `read_product_listings` scope.
  """
  PRODUCT_LISTINGS_UPDATE

  """
  The webhook topic for `product_publications/create` events. Occurs whenever a product publication for an active product is created, or whenever an existing product publication is published. Requires the `read_publications` scope.
  """
  PRODUCT_PUBLICATIONS_CREATE

  """
  The webhook topic for `product_publications/delete` events. Occurs whenever a product publication for an active product is removed, or whenever an existing product publication is unpublished. Requires the `read_publications` scope.
  """
  PRODUCT_PUBLICATIONS_DELETE

  """
  The webhook topic for `product_publications/update` events. Occurs whenever a product publication is updated. Requires the `read_publications` scope.
  """
  PRODUCT_PUBLICATIONS_UPDATE

  """
  The webhook topic for `profiles/create` events. Occurs whenever a delivery profile is created Requires the `read_shipping` scope.
  """
  PROFILES_CREATE

  """
  The webhook topic for `profiles/delete` events. Occurs whenever a delivery profile is deleted Requires the `read_shipping` scope.
  """
  PROFILES_DELETE

  """
  The webhook topic for `profiles/update` events. Occurs whenever a delivery profile is updated Requires the `read_shipping` scope.
  """
  PROFILES_UPDATE

  """
  The webhook topic for `refunds/create` events. Occurs whenever a new refund is created without errors on an order, independent from the movement of money. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
  """
  REFUNDS_CREATE

  """
  The webhook topic for `scheduled_product_listings/add` events. Occurs whenever a product is scheduled to be published. Requires the `read_product_listings` scope.
  """
  SCHEDULED_PRODUCT_LISTINGS_ADD

  """
  The webhook topic for `scheduled_product_listings/remove` events. Occurs whenever a product is no longer scheduled to be published. Requires the `read_product_listings` scope.
  """
  SCHEDULED_PRODUCT_LISTINGS_REMOVE

  """
  The webhook topic for `scheduled_product_listings/update` events. Occurs whenever a product's scheduled availability date changes. Requires the `read_product_listings` scope.
  """
  SCHEDULED_PRODUCT_LISTINGS_UPDATE

  """
  The webhook topic for `segments/create` events. Occurs whenever a segment is created. Requires the `read_customers` scope.
  """
  SEGMENTS_CREATE

  """
  The webhook topic for `segments/delete` events. Occurs whenever a segment is deleted. Requires the `read_customers` scope.
  """
  SEGMENTS_DELETE

  """
  The webhook topic for `segments/update` events. Occurs whenever a segment is updated. Requires the `read_customers` scope.
  """
  SEGMENTS_UPDATE

  """
  The webhook topic for `selling_plan_groups/create` events. Notifies when a SellingPlanGroup is created. Requires the `read_products` scope.
  """
  SELLING_PLAN_GROUPS_CREATE

  """
  The webhook topic for `selling_plan_groups/delete` events. Notifies when a SellingPlanGroup is deleted. Requires the `read_products` scope.
  """
  SELLING_PLAN_GROUPS_DELETE

  """
  The webhook topic for `selling_plan_groups/update` events. Notifies when a SellingPlanGroup is updated. Requires the `read_products` scope.
  """
  SELLING_PLAN_GROUPS_UPDATE

  """
  The webhook topic for `shipping_addresses/create` events. Occurs whenever a shipping address is created. Requires the `read_shipping` scope.
  """
  SHIPPING_ADDRESSES_CREATE

  """
  The webhook topic for `shipping_addresses/update` events. Occurs whenever a shipping address is updated. Requires the `read_shipping` scope.
  """
  SHIPPING_ADDRESSES_UPDATE

  """
  The webhook topic for `shop/update` events. Occurs whenever a shop is updated.
  """
  SHOP_UPDATE

  """
  The webhook topic for `subscription_billing_attempts/challenged` events. Occurs when the financial instutition challenges the subscripttion billing attempt charge as per 3D Secure. Requires the `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_ATTEMPTS_CHALLENGED

  """
  The webhook topic for `subscription_billing_attempts/failure` events. Occurs whenever a subscription billing attempt fails. Requires the `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_ATTEMPTS_FAILURE

  """
  The webhook topic for `subscription_billing_attempts/success` events. Occurs whenever a subscription billing attempt succeeds. Requires the `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_ATTEMPTS_SUCCESS

  """
  The webhook topic for `subscription_contracts/create` events. Occurs whenever a subscription contract is created. Requires the `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_CONTRACTS_CREATE

  """
  The webhook topic for `subscription_contracts/update` events. Occurs whenever a subscription contract is updated. Requires the `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_CONTRACTS_UPDATE

  """
  The webhook topic for `tax_services/create` events. Occurs whenever a tax service is created. Requires the `read_taxes` scope.
  """
  TAX_SERVICES_CREATE

  """
  The webhook topic for `tax_services/update` events. Occurs whenver a tax service is updated. Requires the `read_taxes` scope.
  """
  TAX_SERVICES_UPDATE

  """
  The webhook topic for `tender_transactions/create` events. Occurs when a tender transaction is created. Requires the `read_orders` scope.
  """
  TENDER_TRANSACTIONS_CREATE

  """
  The webhook topic for `themes/create` events. Occurs whenever a theme is created. Does not occur when theme files are created. Requires the `read_themes` scope.
  """
  THEMES_CREATE

  """
  The webhook topic for `themes/delete` events. Occurs whenever a theme is deleted. Does not occur when theme files are deleted. Requires the `read_themes` scope.
  """
  THEMES_DELETE

  """
  The webhook topic for `themes/publish` events. Occurs whenever a theme with the main or mobile (deprecated) role is published. Requires the `read_themes` scope.
  """
  THEMES_PUBLISH

  """
  The webhook topic for `themes/update` events. Occurs whenever a theme is updated. Does not occur when theme files are updated. Requires the `read_themes` scope.
  """
  THEMES_UPDATE

  """
  The webhook topic for `variants/in_stock` events. Occurs whenever a variant becomes in stock. Requires the `read_products` scope.
  """
  VARIANTS_IN_STOCK

  """
  The webhook topic for `variants/out_of_stock` events. Occurs whenever a variant becomes out of stock. Requires the `read_products` scope.
  """
  VARIANTS_OUT_OF_STOCK
}

"""Return type for `webhookSubscriptionUpdate` mutation."""
type WebhookSubscriptionUpdatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!

  """The webhook subscription that was updated."""
  webhookSubscription: WebhookSubscription
}

"""A weight, which includes a numeric value and a unit of measurement."""
type Weight {
  """The unit of measurement for `value`."""
  unit: WeightUnit!

  """The weight value using the unit system specified with `unit`."""
  value: Float!
}

"Specifies the weight unit and value inputs.\n"
input WeightInput {
  """Unit of measurement for `value`."""
  unit: WeightUnit!

  """The weight value using the unit system specified with `weight_unit`."""
  value: Float!
}

"""Units of measurement for weight."""
enum WeightUnit {
  """Metric system unit of mass."""
  GRAMS

  """1 kilogram equals 1000 grams."""
  KILOGRAMS

  """Imperial system unit of mass."""
  OUNCES

  """1 pound equals 16 ounces."""
  POUNDS
}

"""Return type for `deliveryProfileCreate` mutation."""
type deliveryProfileCreatePayload {
  """The delivery profile that was created."""
  profile: DeliveryProfile

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `deliveryProfileRemove` mutation."""
type deliveryProfileRemovePayload {
  """The delivery profile deletion job triggered by the mutation."""
  job: Job

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}

"""Return type for `deliveryProfileUpdate` mutation."""
type deliveryProfileUpdatePayload {
  """The delivery profile that was updated."""
  profile: DeliveryProfile

  """The list of errors that occurred from executing the mutation."""
  userErrors: [UserError!]!
}